
uSD_FatFS_F746G.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014640  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000c25bc  08014810  08014810  00024810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080d6dcc  080d6dcc  000f0298  2**0
                  CONTENTS
  4 .ARM          00000008  080d6dcc  080d6dcc  000e6dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080d6dd4  080d6dd4  000f0298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080d6dd4  080d6dd4  000e6dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080d6dd8  080d6dd8  000e6dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  080d6ddc  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00037fd8  20000298  080d7074  000f0298  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20038270  080d7074  000f8270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000f0298  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000f02c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002fdbc  00000000  00000000  000f030b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c13  00000000  00000000  001200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002858  00000000  00000000  00126ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ef2  00000000  00000000  00129538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000311fe  00000000  00000000  0012b42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000359a8  00000000  00000000  0015c628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00113c13  00000000  00000000  00191fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b948  00000000  00000000  002a5be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  002b152c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000298 	.word	0x20000298
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080147f8 	.word	0x080147f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000029c 	.word	0x2000029c
 800020c:	080147f8 	.word	0x080147f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000f96:	4b21      	ldr	r3, [pc, #132]	; (800101c <MX_ADC3_Init+0x98>)
 8000f98:	4a21      	ldr	r2, [pc, #132]	; (8001020 <MX_ADC3_Init+0x9c>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <MX_ADC3_Init+0x98>)
 8000f9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fa2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <MX_ADC3_Init+0x98>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <MX_ADC3_Init+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <MX_ADC3_Init+0x98>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <MX_ADC3_Init+0x98>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <MX_ADC3_Init+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <MX_ADC3_Init+0x98>)
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <MX_ADC3_Init+0xa0>)
 8000fc8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_ADC3_Init+0x98>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_ADC3_Init+0x98>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_ADC3_Init+0x98>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_ADC3_Init+0x98>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <MX_ADC3_Init+0x98>)
 8000fe6:	f005 fcfb 	bl	80069e0 <HAL_ADC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000ff0:	f002 fbb8 	bl	8003764 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_ADC3_Init+0x98>)
 8001006:	f005 fe95 	bl	8006d34 <HAL_ADC_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001010:	f002 fba8 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200002b4 	.word	0x200002b4
 8001020:	40012200 	.word	0x40012200
 8001024:	0f000001 	.word	0x0f000001

08001028 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a15      	ldr	r2, [pc, #84]	; (800109c <HAL_ADC_MspInit+0x74>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d123      	bne.n	8001092 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_ADC_MspInit+0x78>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <HAL_ADC_MspInit+0x78>)
 8001050:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_ADC_MspInit+0x78>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <HAL_ADC_MspInit+0x78>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <HAL_ADC_MspInit+0x78>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <HAL_ADC_MspInit+0x78>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800107a:	2301      	movs	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107e:	2303      	movs	r3, #3
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <HAL_ADC_MspInit+0x7c>)
 800108e:	f007 f843 	bl	8008118 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	; 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40012200 	.word	0x40012200
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000

080010a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <MX_DMA_Init+0x48>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <MX_DMA_Init+0x48>)
 80010b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <MX_DMA_Init+0x48>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	203b      	movs	r0, #59	; 0x3b
 80010cc:	f006 f95d 	bl	800738a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010d0:	203b      	movs	r0, #59	; 0x3b
 80010d2:	f006 f976 	bl	80073c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2045      	movs	r0, #69	; 0x45
 80010dc:	f006 f955 	bl	800738a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80010e0:	2045      	movs	r0, #69	; 0x45
 80010e2:	f006 f96e 	bl	80073c2 <HAL_NVIC_EnableIRQ>

}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800

080010f4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <MX_DMA2D_Init+0x5c>)
 80010fa:	4a16      	ldr	r2, [pc, #88]	; (8001154 <MX_DMA2D_Init+0x60>)
 80010fc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_DMA2D_Init+0x5c>)
 8001100:	2200      	movs	r2, #0
 8001102:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_DMA2D_Init+0x5c>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_DMA2D_Init+0x5c>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_DMA2D_Init+0x5c>)
 8001112:	2200      	movs	r2, #0
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_DMA2D_Init+0x5c>)
 8001118:	2200      	movs	r2, #0
 800111a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_DMA2D_Init+0x5c>)
 800111e:	2200      	movs	r2, #0
 8001120:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_DMA2D_Init+0x5c>)
 8001124:	2200      	movs	r2, #0
 8001126:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001128:	4809      	ldr	r0, [pc, #36]	; (8001150 <MX_DMA2D_Init+0x5c>)
 800112a:	f006 fd69 	bl	8007c00 <HAL_DMA2D_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001134:	f002 fb16 	bl	8003764 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001138:	2101      	movs	r1, #1
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_DMA2D_Init+0x5c>)
 800113c:	f006 febe 	bl	8007ebc <HAL_DMA2D_ConfigLayer>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001146:	f002 fb0d 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200002fc 	.word	0x200002fc
 8001154:	4002b000 	.word	0x4002b000

08001158 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <HAL_DMA2D_MspInit+0x38>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d10b      	bne.n	8001182 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_DMA2D_MspInit+0x3c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a09      	ldr	r2, [pc, #36]	; (8001194 <HAL_DMA2D_MspInit+0x3c>)
 8001170:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <HAL_DMA2D_MspInit+0x3c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	4002b000 	.word	0x4002b000
 8001194:	40023800 	.word	0x40023800

08001198 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
 80011ac:	615a      	str	r2, [r3, #20]
 80011ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <MX_FMC_Init+0x94>)
 80011b2:	4a1f      	ldr	r2, [pc, #124]	; (8001230 <MX_FMC_Init+0x98>)
 80011b4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <MX_FMC_Init+0x94>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_FMC_Init+0x94>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_FMC_Init+0x94>)
 80011c4:	2204      	movs	r2, #4
 80011c6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_FMC_Init+0x94>)
 80011ca:	2210      	movs	r2, #16
 80011cc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_FMC_Init+0x94>)
 80011d0:	2240      	movs	r2, #64	; 0x40
 80011d2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_FMC_Init+0x94>)
 80011d6:	2280      	movs	r2, #128	; 0x80
 80011d8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_FMC_Init+0x94>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_FMC_Init+0x94>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_FMC_Init+0x94>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_FMC_Init+0x94>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80011f2:	2310      	movs	r3, #16
 80011f4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80011f6:	2310      	movs	r3, #16
 80011f8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80011fa:	2310      	movs	r3, #16
 80011fc:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80011fe:	2310      	movs	r3, #16
 8001200:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001202:	2310      	movs	r3, #16
 8001204:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001206:	2310      	movs	r3, #16
 8001208:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800120a:	2310      	movs	r3, #16
 800120c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <MX_FMC_Init+0x94>)
 8001214:	f00b f882 	bl	800c31c <HAL_SDRAM_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800121e:	f002 faa1 	bl	8003764 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001222:	bf00      	nop
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000033c 	.word	0x2000033c
 8001230:	a0000140 	.word	0xa0000140

08001234 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001248:	4b33      	ldr	r3, [pc, #204]	; (8001318 <HAL_FMC_MspInit+0xe4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d15e      	bne.n	800130e <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 8001250:	4b31      	ldr	r3, [pc, #196]	; (8001318 <HAL_FMC_MspInit+0xe4>)
 8001252:	2201      	movs	r2, #1
 8001254:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001256:	4b31      	ldr	r3, [pc, #196]	; (800131c <HAL_FMC_MspInit+0xe8>)
 8001258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125a:	4a30      	ldr	r2, [pc, #192]	; (800131c <HAL_FMC_MspInit+0xe8>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6393      	str	r3, [r2, #56]	; 0x38
 8001262:	4b2e      	ldr	r3, [pc, #184]	; (800131c <HAL_FMC_MspInit+0xe8>)
 8001264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 800126e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001272:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001280:	230c      	movs	r3, #12
 8001282:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4825      	ldr	r0, [pc, #148]	; (8001320 <HAL_FMC_MspInit+0xec>)
 800128a:	f006 ff45 	bl	8008118 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 800128e:	f248 1333 	movw	r3, #33075	; 0x8133
 8001292:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012a0:	230c      	movs	r3, #12
 80012a2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	481e      	ldr	r0, [pc, #120]	; (8001324 <HAL_FMC_MspInit+0xf0>)
 80012aa:	f006 ff35 	bl	8008118 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80012ae:	f24c 7303 	movw	r3, #50947	; 0xc703
 80012b2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012c0:	230c      	movs	r3, #12
 80012c2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4619      	mov	r1, r3
 80012c8:	4817      	ldr	r0, [pc, #92]	; (8001328 <HAL_FMC_MspInit+0xf4>)
 80012ca:	f006 ff25 	bl	8008118 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012ce:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80012d2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012e0:	230c      	movs	r3, #12
 80012e2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4619      	mov	r1, r3
 80012e8:	4810      	ldr	r0, [pc, #64]	; (800132c <HAL_FMC_MspInit+0xf8>)
 80012ea:	f006 ff15 	bl	8008118 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 80012ee:	232c      	movs	r3, #44	; 0x2c
 80012f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012fe:	230c      	movs	r3, #12
 8001300:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	480a      	ldr	r0, [pc, #40]	; (8001330 <HAL_FMC_MspInit+0xfc>)
 8001308:	f006 ff06 	bl	8008118 <HAL_GPIO_Init>
 800130c:	e000      	b.n	8001310 <HAL_FMC_MspInit+0xdc>
    return;
 800130e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000370 	.word	0x20000370
 800131c:	40023800 	.word	0x40023800
 8001320:	40021000 	.word	0x40021000
 8001324:	40021800 	.word	0x40021800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40021400 	.word	0x40021400
 8001330:	40021c00 	.word	0x40021c00

08001334 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800133c:	f7ff ff7a 	bl	8001234 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b090      	sub	sp, #64	; 0x40
 800134c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800135e:	4bb0      	ldr	r3, [pc, #704]	; (8001620 <MX_GPIO_Init+0x2d8>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4aaf      	ldr	r2, [pc, #700]	; (8001620 <MX_GPIO_Init+0x2d8>)
 8001364:	f043 0310 	orr.w	r3, r3, #16
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4bad      	ldr	r3, [pc, #692]	; (8001620 <MX_GPIO_Init+0x2d8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
 8001374:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001376:	4baa      	ldr	r3, [pc, #680]	; (8001620 <MX_GPIO_Init+0x2d8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4aa9      	ldr	r2, [pc, #676]	; (8001620 <MX_GPIO_Init+0x2d8>)
 800137c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4ba7      	ldr	r3, [pc, #668]	; (8001620 <MX_GPIO_Init+0x2d8>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	4ba4      	ldr	r3, [pc, #656]	; (8001620 <MX_GPIO_Init+0x2d8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4aa3      	ldr	r2, [pc, #652]	; (8001620 <MX_GPIO_Init+0x2d8>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4ba1      	ldr	r3, [pc, #644]	; (8001620 <MX_GPIO_Init+0x2d8>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	623b      	str	r3, [r7, #32]
 80013a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a6:	4b9e      	ldr	r3, [pc, #632]	; (8001620 <MX_GPIO_Init+0x2d8>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a9d      	ldr	r2, [pc, #628]	; (8001620 <MX_GPIO_Init+0x2d8>)
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b9b      	ldr	r3, [pc, #620]	; (8001620 <MX_GPIO_Init+0x2d8>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013be:	4b98      	ldr	r3, [pc, #608]	; (8001620 <MX_GPIO_Init+0x2d8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a97      	ldr	r2, [pc, #604]	; (8001620 <MX_GPIO_Init+0x2d8>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b95      	ldr	r3, [pc, #596]	; (8001620 <MX_GPIO_Init+0x2d8>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b92      	ldr	r3, [pc, #584]	; (8001620 <MX_GPIO_Init+0x2d8>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a91      	ldr	r2, [pc, #580]	; (8001620 <MX_GPIO_Init+0x2d8>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b8f      	ldr	r3, [pc, #572]	; (8001620 <MX_GPIO_Init+0x2d8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013ee:	4b8c      	ldr	r3, [pc, #560]	; (8001620 <MX_GPIO_Init+0x2d8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a8b      	ldr	r2, [pc, #556]	; (8001620 <MX_GPIO_Init+0x2d8>)
 80013f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b89      	ldr	r3, [pc, #548]	; (8001620 <MX_GPIO_Init+0x2d8>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001406:	4b86      	ldr	r3, [pc, #536]	; (8001620 <MX_GPIO_Init+0x2d8>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a85      	ldr	r2, [pc, #532]	; (8001620 <MX_GPIO_Init+0x2d8>)
 800140c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b83      	ldr	r3, [pc, #524]	; (8001620 <MX_GPIO_Init+0x2d8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800141e:	4b80      	ldr	r3, [pc, #512]	; (8001620 <MX_GPIO_Init+0x2d8>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a7f      	ldr	r2, [pc, #508]	; (8001620 <MX_GPIO_Init+0x2d8>)
 8001424:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b7d      	ldr	r3, [pc, #500]	; (8001620 <MX_GPIO_Init+0x2d8>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001436:	4b7a      	ldr	r3, [pc, #488]	; (8001620 <MX_GPIO_Init+0x2d8>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a79      	ldr	r2, [pc, #484]	; (8001620 <MX_GPIO_Init+0x2d8>)
 800143c:	f043 0320 	orr.w	r3, r3, #32
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b77      	ldr	r3, [pc, #476]	; (8001620 <MX_GPIO_Init+0x2d8>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144e:	4b74      	ldr	r3, [pc, #464]	; (8001620 <MX_GPIO_Init+0x2d8>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a73      	ldr	r2, [pc, #460]	; (8001620 <MX_GPIO_Init+0x2d8>)
 8001454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b71      	ldr	r3, [pc, #452]	; (8001620 <MX_GPIO_Init+0x2d8>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	2102      	movs	r1, #2
 800146a:	486e      	ldr	r0, [pc, #440]	; (8001624 <MX_GPIO_Init+0x2dc>)
 800146c:	f007 f924 	bl	80086b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, rge_Pin|vrt_Pin|ble_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8001476:	486c      	ldr	r0, [pc, #432]	; (8001628 <MX_GPIO_Init+0x2e0>)
 8001478:	f007 f91e 	bl	80086b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE3 PE2 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 800147c:	237c      	movs	r3, #124	; 0x7c
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001480:	2303      	movs	r3, #3
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800148c:	4619      	mov	r1, r3
 800148e:	4867      	ldr	r0, [pc, #412]	; (800162c <MX_GPIO_Init+0x2e4>)
 8001490:	f006 fe42 	bl	8008118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG12 PG9
                           PG7 PG3 PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_9
 8001494:	f247 238c 	movw	r3, #29324	; 0x728c
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149a:	2303      	movs	r3, #3
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a6:	4619      	mov	r1, r3
 80014a8:	4861      	ldr	r0, [pc, #388]	; (8001630 <MX_GPIO_Init+0x2e8>)
 80014aa:	f006 fe35 	bl	8008118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB4 PB3 PB6
                           PB13 PB12 PB2 PB10
                           PB1 PB0 PB11 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_6
 80014ae:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_2|GPIO_PIN_10
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b4:	2303      	movs	r3, #3
 80014b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c0:	4619      	mov	r1, r3
 80014c2:	485c      	ldr	r0, [pc, #368]	; (8001634 <MX_GPIO_Init+0x2ec>)
 80014c4:	f006 fe28 	bl	8008118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD5 PD4
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80014c8:	f643 03f0 	movw	r3, #14576	; 0x38f0
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ce:	2303      	movs	r3, #3
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014da:	4619      	mov	r1, r3
 80014dc:	4856      	ldr	r0, [pc, #344]	; (8001638 <MX_GPIO_Init+0x2f0>)
 80014de:	f006 fe1b 	bl	8008118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ3
                           PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80014e2:	f64f 73db 	movw	r3, #65499	; 0xffdb
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_3
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e8:	2303      	movs	r3, #3
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80014f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f4:	4619      	mov	r1, r3
 80014f6:	4851      	ldr	r0, [pc, #324]	; (800163c <MX_GPIO_Init+0x2f4>)
 80014f8:	f006 fe0e 	bl	8008118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC14 PC15
                           PC9 PC7 PC6 PC3
                           PC0 PC1 PC2 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15
 80014fc:	f64c 63ff 	movw	r3, #52991	; 0xceff
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001502:	2303      	movs	r3, #3
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800150e:	4619      	mov	r1, r3
 8001510:	484b      	ldr	r0, [pc, #300]	; (8001640 <MX_GPIO_Init+0x2f8>)
 8001512:	f006 fe01 	bl	8008118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI3 PI2 PI7
                           PI6 PI12 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7
 8001516:	f249 13cc 	movw	r3, #37324	; 0x91cc
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151c:	2303      	movs	r3, #3
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001524:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001528:	4619      	mov	r1, r3
 800152a:	483e      	ldr	r0, [pc, #248]	; (8001624 <MX_GPIO_Init+0x2dc>)
 800152c:	f006 fdf4 	bl	8008118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001536:	2300      	movs	r3, #0
 8001538:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001542:	4619      	mov	r1, r3
 8001544:	483e      	ldr	r0, [pc, #248]	; (8001640 <MX_GPIO_Init+0x2f8>)
 8001546:	f006 fde7 	bl	8008118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK4 PK3 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0;
 800154a:	231d      	movs	r3, #29
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800154e:	2303      	movs	r3, #3
 8001550:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800155a:	4619      	mov	r1, r3
 800155c:	4839      	ldr	r0, [pc, #228]	; (8001644 <MX_GPIO_Init+0x2fc>)
 800155e:	f006 fddb 	bl	8008118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001562:	2302      	movs	r3, #2
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001576:	4619      	mov	r1, r3
 8001578:	482a      	ldr	r0, [pc, #168]	; (8001624 <MX_GPIO_Init+0x2dc>)
 800157a:	f006 fdcd 	bl	8008118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA1 PA4 PA2
                           PA6 PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2
 800157e:	f240 43fe 	movw	r3, #1278	; 0x4fe
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001584:	2303      	movs	r3, #3
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001590:	4619      	mov	r1, r3
 8001592:	482d      	ldr	r0, [pc, #180]	; (8001648 <MX_GPIO_Init+0x300>)
 8001594:	f006 fdc0 	bl	8008118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH14 PH4 PH12 PH7
                           PH6 PH8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_7
 8001598:	f245 13d0 	movw	r3, #20944	; 0x51d0
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159e:	2303      	movs	r3, #3
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015aa:	4619      	mov	r1, r3
 80015ac:	481e      	ldr	r0, [pc, #120]	; (8001628 <MX_GPIO_Init+0x2e0>)
 80015ae:	f006 fdb3 	bl	8008118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin|TS_INT_Pin;
 80015b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c6:	4619      	mov	r1, r3
 80015c8:	4816      	ldr	r0, [pc, #88]	; (8001624 <MX_GPIO_Init+0x2dc>)
 80015ca:	f006 fda5 	bl	8008118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 80015ce:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d4:	2303      	movs	r3, #3
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015e0:	4619      	mov	r1, r3
 80015e2:	481a      	ldr	r0, [pc, #104]	; (800164c <MX_GPIO_Init+0x304>)
 80015e4:	f006 fd98 	bl	8008118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = rge_Pin|vrt_Pin|ble_Pin;
 80015e8:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fe:	4619      	mov	r1, r3
 8001600:	4809      	ldr	r0, [pc, #36]	; (8001628 <MX_GPIO_Init+0x2e0>)
 8001602:	f006 fd89 	bl	8008118 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2101      	movs	r1, #1
 800160a:	2028      	movs	r0, #40	; 0x28
 800160c:	f005 febd 	bl	800738a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001610:	2028      	movs	r0, #40	; 0x28
 8001612:	f005 fed6 	bl	80073c2 <HAL_NVIC_EnableIRQ>

}
 8001616:	bf00      	nop
 8001618:	3740      	adds	r7, #64	; 0x40
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	40022000 	.word	0x40022000
 8001628:	40021c00 	.word	0x40021c00
 800162c:	40021000 	.word	0x40021000
 8001630:	40021800 	.word	0x40021800
 8001634:	40020400 	.word	0x40020400
 8001638:	40020c00 	.word	0x40020c00
 800163c:	40022400 	.word	0x40022400
 8001640:	40020800 	.word	0x40020800
 8001644:	40022800 	.word	0x40022800
 8001648:	40020000 	.word	0x40020000
 800164c:	40021400 	.word	0x40021400

08001650 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <MX_I2C1_Init+0x74>)
 8001656:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <MX_I2C1_Init+0x78>)
 8001658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <MX_I2C1_Init+0x74>)
 800165c:	4a1b      	ldr	r2, [pc, #108]	; (80016cc <MX_I2C1_Init+0x7c>)
 800165e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <MX_I2C1_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <MX_I2C1_Init+0x74>)
 8001668:	2201      	movs	r2, #1
 800166a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <MX_I2C1_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <MX_I2C1_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <MX_I2C1_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_I2C1_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <MX_I2C1_Init+0x74>)
 8001686:	2200      	movs	r2, #0
 8001688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800168a:	480e      	ldr	r0, [pc, #56]	; (80016c4 <MX_I2C1_Init+0x74>)
 800168c:	f007 f860 	bl	8008750 <HAL_I2C_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001696:	f002 f865 	bl	8003764 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800169a:	2100      	movs	r1, #0
 800169c:	4809      	ldr	r0, [pc, #36]	; (80016c4 <MX_I2C1_Init+0x74>)
 800169e:	f007 fded 	bl	800927c <HAL_I2CEx_ConfigAnalogFilter>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016a8:	f002 f85c 	bl	8003764 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016ac:	2100      	movs	r1, #0
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_I2C1_Init+0x74>)
 80016b0:	f007 fe2f 	bl	8009312 <HAL_I2CEx_ConfigDigitalFilter>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016ba:	f002 f853 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000374 	.word	0x20000374
 80016c8:	40005400 	.word	0x40005400
 80016cc:	20404768 	.word	0x20404768

080016d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b0aa      	sub	sp, #168	; 0xa8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	2284      	movs	r2, #132	; 0x84
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f010 ff86 	bl	8012602 <memset>
  if(i2cHandle->Instance==I2C1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a22      	ldr	r2, [pc, #136]	; (8001784 <HAL_I2C_MspInit+0xb4>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d13c      	bne.n	800177a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001700:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001704:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001706:	2300      	movs	r3, #0
 8001708:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	4618      	mov	r0, r3
 8001710:	f008 fddc 	bl	800a2cc <HAL_RCCEx_PeriphCLKConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800171a:	f002 f823 	bl	8003764 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <HAL_I2C_MspInit+0xb8>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a19      	ldr	r2, [pc, #100]	; (8001788 <HAL_I2C_MspInit+0xb8>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <HAL_I2C_MspInit+0xb8>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001736:	f44f 7340 	mov.w	r3, #768	; 0x300
 800173a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800173e:	2312      	movs	r3, #18
 8001740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001750:	2304      	movs	r3, #4
 8001752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001756:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800175a:	4619      	mov	r1, r3
 800175c:	480b      	ldr	r0, [pc, #44]	; (800178c <HAL_I2C_MspInit+0xbc>)
 800175e:	f006 fcdb 	bl	8008118 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_I2C_MspInit+0xb8>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	4a08      	ldr	r2, [pc, #32]	; (8001788 <HAL_I2C_MspInit+0xb8>)
 8001768:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800176c:	6413      	str	r3, [r2, #64]	; 0x40
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_I2C_MspInit+0xb8>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800177a:	bf00      	nop
 800177c:	37a8      	adds	r7, #168	; 0xa8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40005400 	.word	0x40005400
 8001788:	40023800 	.word	0x40023800
 800178c:	40020400 	.word	0x40020400

08001790 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <HAL_I2C_MspDeInit+0x3c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d10f      	bne.n	80017c2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_I2C_MspDeInit+0x40>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <HAL_I2C_MspDeInit+0x40>)
 80017a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017ac:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80017ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b2:	4808      	ldr	r0, [pc, #32]	; (80017d4 <HAL_I2C_MspDeInit+0x44>)
 80017b4:	f006 fe5c 	bl	8008470 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80017b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <HAL_I2C_MspDeInit+0x44>)
 80017be:	f006 fe57 	bl	8008470 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40005400 	.word	0x40005400
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020400 	.word	0x40020400

080017d8 <LCD_LOG_Init>:
  * @param  None
  * @retval None
  */

void LCD_LOG_Init ( void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* Deinit LCD cache */
  LCD_LOG_DeInit();
 80017dc:	f000 f806 	bl	80017ec <LCD_LOG_DeInit>
  
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f003 faea 	bl	8004dbc <BSP_LCD_Clear>
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <LCD_LOG_DeInit>:
  * @brief DeInitializes the LCD Log module. 
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <LCD_LOG_DeInit+0x50>)
 80017f2:	4a13      	ldr	r2, [pc, #76]	; (8001840 <LCD_LOG_DeInit+0x54>)
 80017f4:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 80017f6:	4b13      	ldr	r3, [pc, #76]	; (8001844 <LCD_LOG_DeInit+0x58>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_top = 0;
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <LCD_LOG_DeInit+0x5c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <LCD_LOG_DeInit+0x60>)
 8001804:	2200      	movs	r2, #0
 8001806:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_top_bak = 0;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <LCD_LOG_DeInit+0x64>)
 800180a:	2200      	movs	r2, #0
 800180c:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <LCD_LOG_DeInit+0x68>)
 8001810:	2200      	movs	r2, #0
 8001812:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <LCD_LOG_DeInit+0x6c>)
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
  LCD_ScrollActive = DISABLE;
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <LCD_LOG_DeInit+0x70>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
  LCD_Lock = DISABLE;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <LCD_LOG_DeInit+0x74>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
  LCD_Scrolled = DISABLE;
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <LCD_LOG_DeInit+0x78>)
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
  LCD_ScrollBackStep = 0;
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <LCD_LOG_DeInit+0x7c>)
 800182e:	2200      	movs	r2, #0
 8001830:	801a      	strh	r2, [r3, #0]
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	2000401c 	.word	0x2000401c
 8001840:	ff000080 	.word	0xff000080
 8001844:	20004020 	.word	0x20004020
 8001848:	20004022 	.word	0x20004022
 800184c:	20004024 	.word	0x20004024
 8001850:	20004026 	.word	0x20004026
 8001854:	20004028 	.word	0x20004028
 8001858:	2000402a 	.word	0x2000402a
 800185c:	2000402b 	.word	0x2000402b
 8001860:	2000402c 	.word	0x2000402c
 8001864:	2000402d 	.word	0x2000402d
 8001868:	2000402e 	.word	0x2000402e

0800186c <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 8001874:	4817      	ldr	r0, [pc, #92]	; (80018d4 <LCD_LOG_SetHeader+0x68>)
 8001876:	f003 fa71 	bl	8004d5c <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800187a:	4817      	ldr	r0, [pc, #92]	; (80018d8 <LCD_LOG_SetHeader+0x6c>)
 800187c:	f003 fa3c 	bl	8004cf8 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 8001880:	f003 f964 	bl	8004b4c <BSP_LCD_GetXSize>
 8001884:	4603      	mov	r3, r0
 8001886:	b29a      	uxth	r2, r3
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <LCD_LOG_SetHeader+0x68>)
 800188a:	88db      	ldrh	r3, [r3, #6]
 800188c:	4619      	mov	r1, r3
 800188e:	0049      	lsls	r1, r1, #1
 8001890:	440b      	add	r3, r1
 8001892:	b29b      	uxth	r3, r3
 8001894:	2100      	movs	r1, #0
 8001896:	2000      	movs	r0, #0
 8001898:	f003 fd96 	bl	80053c8 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 800189c:	f04f 30ff 	mov.w	r0, #4294967295
 80018a0:	f003 fa2a 	bl	8004cf8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80018a4:	480c      	ldr	r0, [pc, #48]	; (80018d8 <LCD_LOG_SetHeader+0x6c>)
 80018a6:	f003 fa3f 	bl	8004d28 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <LCD_LOG_SetHeader+0x68>)
 80018ac:	88d9      	ldrh	r1, [r3, #6]
 80018ae:	2301      	movs	r3, #1
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	2000      	movs	r0, #0
 80018b4:	f003 faee 	bl	8004e94 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f003 fa34 	bl	8004d28 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 80018c0:	4806      	ldr	r0, [pc, #24]	; (80018dc <LCD_LOG_SetHeader+0x70>)
 80018c2:	f003 fa19 	bl	8004cf8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 80018c6:	4806      	ldr	r0, [pc, #24]	; (80018e0 <LCD_LOG_SetHeader+0x74>)
 80018c8:	f003 fa48 	bl	8004d5c <BSP_LCD_SetFont>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200000b4 	.word	0x200000b4
 80018d8:	ff0000ff 	.word	0xff0000ff
 80018dc:	ff000080 	.word	0xff000080
 80018e0:	200000bc 	.word	0x200000bc

080018e4 <__io_putchar>:
  * @param  c: character to be displayed
  * @param  f: output file pointer
  * @retval None
 */
LCD_LOG_PUTCHAR
{
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  
  sFONT *cFont = BSP_LCD_GetFont();
 80018ec:	f003 fa50 	bl	8004d90 <BSP_LCD_GetFont>
 80018f0:	60b8      	str	r0, [r7, #8]
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 80018f2:	4b60      	ldr	r3, [pc, #384]	; (8001a74 <__io_putchar+0x190>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 80b6 	bne.w	8001a68 <__io_putchar+0x184>
  {
    if(LCD_ScrollActive == ENABLE)
 80018fc:	4b5e      	ldr	r3, [pc, #376]	; (8001a78 <__io_putchar+0x194>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d110      	bne.n	8001926 <__io_putchar+0x42>
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8001904:	4b5d      	ldr	r3, [pc, #372]	; (8001a7c <__io_putchar+0x198>)
 8001906:	881a      	ldrh	r2, [r3, #0]
 8001908:	4b5d      	ldr	r3, [pc, #372]	; (8001a80 <__io_putchar+0x19c>)
 800190a:	801a      	strh	r2, [r3, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800190c:	4b5d      	ldr	r3, [pc, #372]	; (8001a84 <__io_putchar+0x1a0>)
 800190e:	881a      	ldrh	r2, [r3, #0]
 8001910:	4b5d      	ldr	r3, [pc, #372]	; (8001a88 <__io_putchar+0x1a4>)
 8001912:	801a      	strh	r2, [r3, #0]
      LCD_ScrollActive = DISABLE;
 8001914:	4b58      	ldr	r3, [pc, #352]	; (8001a78 <__io_putchar+0x194>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
      LCD_Scrolled = DISABLE;
 800191a:	4b5c      	ldr	r3, [pc, #368]	; (8001a8c <__io_putchar+0x1a8>)
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
      LCD_ScrollBackStep = 0;
 8001920:	4b5b      	ldr	r3, [pc, #364]	; (8001a90 <__io_putchar+0x1ac>)
 8001922:	2200      	movs	r2, #0
 8001924:	801a      	strh	r2, [r3, #0]
      
    }
    
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 8001926:	4b5b      	ldr	r3, [pc, #364]	; (8001a94 <__io_putchar+0x1b0>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	461c      	mov	r4, r3
 800192c:	f003 f90e 	bl	8004b4c <BSP_LCD_GetXSize>
 8001930:	4602      	mov	r2, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	889b      	ldrh	r3, [r3, #4]
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	429c      	cmp	r4, r3
 800193c:	d218      	bcs.n	8001970 <__io_putchar+0x8c>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b0a      	cmp	r3, #10
 8001942:	d015      	beq.n	8001970 <__io_putchar+0x8c>
    {
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8001944:	4b4e      	ldr	r3, [pc, #312]	; (8001a80 <__io_putchar+0x19c>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	4b52      	ldr	r3, [pc, #328]	; (8001a94 <__io_putchar+0x1b0>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	b290      	uxth	r0, r2
 8001952:	4a50      	ldr	r2, [pc, #320]	; (8001a94 <__io_putchar+0x1b0>)
 8001954:	8010      	strh	r0, [r2, #0]
 8001956:	461c      	mov	r4, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	b2d8      	uxtb	r0, r3
 800195c:	4a4e      	ldr	r2, [pc, #312]	; (8001a98 <__io_putchar+0x1b4>)
 800195e:	460b      	mov	r3, r1
 8001960:	015b      	lsls	r3, r3, #5
 8001962:	440b      	add	r3, r1
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	4423      	add	r3, r4
 800196a:	4602      	mov	r2, r0
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	e07b      	b.n	8001a68 <__io_putchar+0x184>
    }   
    else 
    {
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 8001970:	4b45      	ldr	r3, [pc, #276]	; (8001a88 <__io_putchar+0x1a4>)
 8001972:	881a      	ldrh	r2, [r3, #0]
 8001974:	4b42      	ldr	r3, [pc, #264]	; (8001a80 <__io_putchar+0x19c>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d314      	bcc.n	80019a6 <__io_putchar+0xc2>
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 800197c:	4b47      	ldr	r3, [pc, #284]	; (8001a9c <__io_putchar+0x1b8>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10d      	bne.n	80019a0 <__io_putchar+0xbc>
        {
          LCD_CacheBuffer_yptr_top++;
 8001984:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <__io_putchar+0x1a4>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	3301      	adds	r3, #1
 800198a:	b29a      	uxth	r2, r3
 800198c:	4b3e      	ldr	r3, [pc, #248]	; (8001a88 <__io_putchar+0x1a4>)
 800198e:	801a      	strh	r2, [r3, #0]
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8001990:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <__io_putchar+0x1a4>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	2b75      	cmp	r3, #117	; 0x75
 8001996:	d106      	bne.n	80019a6 <__io_putchar+0xc2>
          {
            LCD_CacheBuffer_yptr_top = 0;  
 8001998:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <__io_putchar+0x1a4>)
 800199a:	2200      	movs	r2, #0
 800199c:	801a      	strh	r2, [r3, #0]
 800199e:	e002      	b.n	80019a6 <__io_putchar+0xc2>
          }
        }
        else
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
 80019a0:	4b3e      	ldr	r3, [pc, #248]	; (8001a9c <__io_putchar+0x1b8>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80019a6:	4b3b      	ldr	r3, [pc, #236]	; (8001a94 <__io_putchar+0x1b0>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e015      	b.n	80019da <__io_putchar+0xf6>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 80019ae:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <__io_putchar+0x19c>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	4619      	mov	r1, r3
 80019b4:	4b37      	ldr	r3, [pc, #220]	; (8001a94 <__io_putchar+0x1b0>)
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	b290      	uxth	r0, r2
 80019bc:	4a35      	ldr	r2, [pc, #212]	; (8001a94 <__io_putchar+0x1b0>)
 80019be:	8010      	strh	r0, [r2, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	4a35      	ldr	r2, [pc, #212]	; (8001a98 <__io_putchar+0x1b4>)
 80019c4:	460b      	mov	r3, r1
 80019c6:	015b      	lsls	r3, r3, #5
 80019c8:	440b      	add	r3, r1
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	4403      	add	r3, r0
 80019d0:	2220      	movs	r2, #32
 80019d2:	701a      	strb	r2, [r3, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3301      	adds	r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	f003 f8b7 	bl	8004b4c <BSP_LCD_GetXSize>
 80019de:	4602      	mov	r2, r0
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	889b      	ldrh	r3, [r3, #4]
 80019e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d3df      	bcc.n	80019ae <__io_putchar+0xca>
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <__io_putchar+0x19c>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <__io_putchar+0x1bc>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4927      	ldr	r1, [pc, #156]	; (8001a98 <__io_putchar+0x1b4>)
 80019fa:	4603      	mov	r3, r0
 80019fc:	015b      	lsls	r3, r3, #5
 80019fe:	4403      	add	r3, r0
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	3380      	adds	r3, #128	; 0x80
 8001a06:	601a      	str	r2, [r3, #0]
      
      LCD_CacheBuffer_xptr = 0;
 8001a08:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <__io_putchar+0x1b0>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	801a      	strh	r2, [r3, #0]
      
      LCD_LOG_UpdateDisplay (); 
 8001a0e:	f000 f849 	bl	8001aa4 <LCD_LOG_UpdateDisplay>
      
      LCD_CacheBuffer_yptr_bottom ++; 
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <__io_putchar+0x19c>)
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <__io_putchar+0x19c>)
 8001a1c:	801a      	strh	r2, [r3, #0]
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <__io_putchar+0x19c>)
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	2b75      	cmp	r3, #117	; 0x75
 8001a24:	d108      	bne.n	8001a38 <__io_putchar+0x154>
      {
        LCD_CacheBuffer_yptr_bottom = 0;
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <__io_putchar+0x19c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <__io_putchar+0x1a4>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <__io_putchar+0x1b8>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
      }
      
      if( ch != '\n')
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b0a      	cmp	r3, #10
 8001a3c:	d014      	beq.n	8001a68 <__io_putchar+0x184>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <__io_putchar+0x19c>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	4619      	mov	r1, r3
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <__io_putchar+0x1b0>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	b290      	uxth	r0, r2
 8001a4c:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <__io_putchar+0x1b0>)
 8001a4e:	8010      	strh	r0, [r2, #0]
 8001a50:	461c      	mov	r4, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	b2d8      	uxtb	r0, r3
 8001a56:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <__io_putchar+0x1b4>)
 8001a58:	460b      	mov	r3, r1
 8001a5a:	015b      	lsls	r3, r3, #5
 8001a5c:	440b      	add	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	4423      	add	r3, r4
 8001a64:	4602      	mov	r2, r0
 8001a66:	701a      	strb	r2, [r3, #0]
      }
      
    }
  }
  return ch;
 8001a68:	687b      	ldr	r3, [r7, #4]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd90      	pop	{r4, r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000402c 	.word	0x2000402c
 8001a78:	2000402b 	.word	0x2000402b
 8001a7c:	20004028 	.word	0x20004028
 8001a80:	20004024 	.word	0x20004024
 8001a84:	20004026 	.word	0x20004026
 8001a88:	20004022 	.word	0x20004022
 8001a8c:	2000402d 	.word	0x2000402d
 8001a90:	2000402e 	.word	0x2000402e
 8001a94:	20004020 	.word	0x20004020
 8001a98:	200003c8 	.word	0x200003c8
 8001a9c:	2000402a 	.word	0x2000402a
 8001aa0:	2000401c 	.word	0x2000401c

08001aa4 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
  uint8_t cnt = 0 ;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	71fb      	strb	r3, [r7, #7]
  uint16_t length = 0 ;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = 0, index = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	807b      	strh	r3, [r7, #2]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	803b      	strh	r3, [r7, #0]
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8001aba:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <LCD_LOG_UpdateDisplay+0x100>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	2b0f      	cmp	r3, #15
 8001ac0:	d826      	bhi.n	8001b10 <LCD_LOG_UpdateDisplay+0x6c>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 8001ac2:	4b38      	ldr	r3, [pc, #224]	; (8001ba4 <LCD_LOG_UpdateDisplay+0x100>)
 8001ac4:	881a      	ldrh	r2, [r3, #0]
 8001ac6:	4b38      	ldr	r3, [pc, #224]	; (8001ba8 <LCD_LOG_UpdateDisplay+0x104>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d320      	bcc.n	8001b10 <LCD_LOG_UpdateDisplay+0x6c>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	4a34      	ldr	r2, [pc, #208]	; (8001ba4 <LCD_LOG_UpdateDisplay+0x100>)
 8001ad2:	8812      	ldrh	r2, [r2, #0]
 8001ad4:	441a      	add	r2, r3
 8001ad6:	4935      	ldr	r1, [pc, #212]	; (8001bac <LCD_LOG_UpdateDisplay+0x108>)
 8001ad8:	4613      	mov	r3, r2
 8001ada:	015b      	lsls	r3, r3, #5
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3380      	adds	r3, #128	; 0x80
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 f906 	bl	8004cf8 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8001aec:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <LCD_LOG_UpdateDisplay+0x100>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	3304      	adds	r3, #4
 8001af2:	b298      	uxth	r0, r3
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	4a2b      	ldr	r2, [pc, #172]	; (8001ba4 <LCD_LOG_UpdateDisplay+0x100>)
 8001af8:	8812      	ldrh	r2, [r2, #0]
 8001afa:	441a      	add	r2, r3
 8001afc:	4613      	mov	r3, r2
 8001afe:	015b      	lsls	r3, r3, #5
 8001b00:	4413      	add	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4a29      	ldr	r2, [pc, #164]	; (8001bac <LCD_LOG_UpdateDisplay+0x108>)
 8001b06:	4413      	add	r3, r2
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f003 fa8b 	bl	8005024 <BSP_LCD_DisplayStringAtLine>
 8001b0e:	e044      	b.n	8001b9a <LCD_LOG_UpdateDisplay+0xf6>
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 8001b10:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <LCD_LOG_UpdateDisplay+0x100>)
 8001b12:	881a      	ldrh	r2, [r3, #0]
 8001b14:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <LCD_LOG_UpdateDisplay+0x104>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d204      	bcs.n	8001b26 <LCD_LOG_UpdateDisplay+0x82>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 8001b1c:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <LCD_LOG_UpdateDisplay+0x100>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	3375      	adds	r3, #117	; 0x75
 8001b22:	80bb      	strh	r3, [r7, #4]
 8001b24:	e002      	b.n	8001b2c <LCD_LOG_UpdateDisplay+0x88>
    }
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
 8001b26:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <LCD_LOG_UpdateDisplay+0x100>)
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	80bb      	strh	r3, [r7, #4]
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 8001b2c:	88bb      	ldrh	r3, [r7, #4]
 8001b2e:	3b10      	subs	r3, #16
 8001b30:	807b      	strh	r3, [r7, #2]
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	71fb      	strb	r3, [r7, #7]
 8001b36:	e02c      	b.n	8001b92 <LCD_LOG_UpdateDisplay+0xee>
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8001b38:	79fa      	ldrb	r2, [r7, #7]
 8001b3a:	887b      	ldrh	r3, [r7, #2]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <LCD_LOG_UpdateDisplay+0x10c>)
 8001b40:	fb82 1203 	smull	r1, r2, r2, r3
 8001b44:	441a      	add	r2, r3
 8001b46:	1191      	asrs	r1, r2, #6
 8001b48:	17da      	asrs	r2, r3, #31
 8001b4a:	1a8a      	subs	r2, r1, r2
 8001b4c:	2175      	movs	r1, #117	; 0x75
 8001b4e:	fb01 f202 	mul.w	r2, r1, r2
 8001b52:	1a9a      	subs	r2, r3, r2
 8001b54:	4613      	mov	r3, r2
 8001b56:	803b      	strh	r3, [r7, #0]
      
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8001b58:	883a      	ldrh	r2, [r7, #0]
 8001b5a:	4914      	ldr	r1, [pc, #80]	; (8001bac <LCD_LOG_UpdateDisplay+0x108>)
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	015b      	lsls	r3, r3, #5
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	3380      	adds	r3, #128	; 0x80
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 f8c4 	bl	8004cf8 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3304      	adds	r3, #4
 8001b76:	b298      	uxth	r0, r3
                             (uint8_t *)(LCD_CacheBuffer[index].line));
 8001b78:	883a      	ldrh	r2, [r7, #0]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	015b      	lsls	r3, r3, #5
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <LCD_LOG_UpdateDisplay+0x108>)
 8001b84:	4413      	add	r3, r2
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8001b86:	4619      	mov	r1, r3
 8001b88:	f003 fa4c 	bl	8005024 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	71fb      	strb	r3, [r7, #7]
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2b10      	cmp	r3, #16
 8001b96:	d9cf      	bls.n	8001b38 <LCD_LOG_UpdateDisplay+0x94>
      
    }
  }
  
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20004024 	.word	0x20004024
 8001ba8:	20004022 	.word	0x20004022
 8001bac:	200003c8 	.word	0x200003c8
 8001bb0:	8c08c08d 	.word	0x8c08c08d

08001bb4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b09a      	sub	sp, #104	; 0x68
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001bba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bbe:	2234      	movs	r2, #52	; 0x34
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f010 fd1d 	bl	8012602 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001bc8:	463b      	mov	r3, r7
 8001bca:	2234      	movs	r2, #52	; 0x34
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f010 fd17 	bl	8012602 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001bd4:	4b4e      	ldr	r3, [pc, #312]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001bd6:	4a4f      	ldr	r2, [pc, #316]	; (8001d14 <MX_LTDC_Init+0x160>)
 8001bd8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001bda:	4b4d      	ldr	r3, [pc, #308]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001be0:	4b4b      	ldr	r3, [pc, #300]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001be6:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001bec:	4b48      	ldr	r3, [pc, #288]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001bf8:	4b45      	ldr	r3, [pc, #276]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001bfe:	4b44      	ldr	r3, [pc, #272]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001c00:	220e      	movs	r2, #14
 8001c02:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001c04:	4b42      	ldr	r3, [pc, #264]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001c06:	2205      	movs	r2, #5
 8001c08:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001c0a:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001c0c:	f240 228e 	movw	r2, #654	; 0x28e
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001c12:	4b3f      	ldr	r3, [pc, #252]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001c14:	f240 12e5 	movw	r2, #485	; 0x1e5
 8001c18:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001c1c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8001c20:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001c22:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001c24:	f240 12e7 	movw	r2, #487	; 0x1e7
 8001c28:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001c2a:	4b39      	ldr	r3, [pc, #228]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001c32:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001c3a:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001c42:	4833      	ldr	r0, [pc, #204]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001c44:	f007 fbb2 	bl	80093ac <HAL_LTDC_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001c4e:	f001 fd89 	bl	8003764 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001c62:	2300      	movs	r3, #0
 8001c64:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c72:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001c74:	2305      	movs	r3, #5
 8001c76:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001c96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	481c      	ldr	r0, [pc, #112]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001ca0:	f007 fc54 	bl	800954c <HAL_LTDC_ConfigLayer>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001caa:	f001 fd5b 	bl	8003764 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cce:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001cd0:	2305      	movs	r3, #5
 8001cd2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_LTDC_Init+0x15c>)
 8001cfa:	f007 fc27 	bl	800954c <HAL_LTDC_ConfigLayer>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001d04:	f001 fd2e 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	3768      	adds	r7, #104	; 0x68
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20004030 	.word	0x20004030
 8001d14:	40016800 	.word	0x40016800

08001d18 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b0b0      	sub	sp, #192	; 0xc0
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d34:	2284      	movs	r2, #132	; 0x84
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f010 fc62 	bl	8012602 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a96      	ldr	r2, [pc, #600]	; (8001f9c <HAL_LTDC_MspInit+0x284>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	f040 8125 	bne.w	8001f94 <HAL_LTDC_MspInit+0x27c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001d52:	2302      	movs	r3, #2
 8001d54:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001d56:	2302      	movs	r3, #2
 8001d58:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001d62:	2300      	movs	r3, #0
 8001d64:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f008 faae 	bl	800a2cc <HAL_RCCEx_PeriphCLKConfig>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 8001d76:	f001 fcf5 	bl	8003764 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d7a:	4b89      	ldr	r3, [pc, #548]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	4a88      	ldr	r2, [pc, #544]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001d80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d84:	6453      	str	r3, [r2, #68]	; 0x44
 8001d86:	4b86      	ldr	r3, [pc, #536]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d92:	4b83      	ldr	r3, [pc, #524]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a82      	ldr	r2, [pc, #520]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b80      	ldr	r3, [pc, #512]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da6:	623b      	str	r3, [r7, #32]
 8001da8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	4b7d      	ldr	r3, [pc, #500]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a7c      	ldr	r2, [pc, #496]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b7a      	ldr	r3, [pc, #488]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001dc2:	4b77      	ldr	r3, [pc, #476]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a76      	ldr	r2, [pc, #472]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b74      	ldr	r3, [pc, #464]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001dda:	4b71      	ldr	r3, [pc, #452]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a70      	ldr	r2, [pc, #448]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001de0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b6e      	ldr	r3, [pc, #440]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001df2:	4b6b      	ldr	r3, [pc, #428]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a6a      	ldr	r2, [pc, #424]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001df8:	f043 0308 	orr.w	r3, r3, #8
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b68      	ldr	r3, [pc, #416]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e0a:	4b65      	ldr	r3, [pc, #404]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a64      	ldr	r2, [pc, #400]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b62      	ldr	r3, [pc, #392]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e22:	4b5f      	ldr	r3, [pc, #380]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a5e      	ldr	r2, [pc, #376]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001e28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b5c      	ldr	r3, [pc, #368]	; (8001fa0 <HAL_LTDC_MspInit+0x288>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
    PI14     ------> LTDC_CLK
    PG6     ------> LTDC_R7
    PJ5     ------> LTDC_R6
    PJ2     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 8001e3a:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8001e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e54:	230e      	movs	r3, #14
 8001e56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e5a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4850      	ldr	r0, [pc, #320]	; (8001fa4 <HAL_LTDC_MspInit+0x28c>)
 8001e62:	f006 f959 	bl	8008118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001e66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e80:	230e      	movs	r3, #14
 8001e82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e86:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4846      	ldr	r0, [pc, #280]	; (8001fa8 <HAL_LTDC_MspInit+0x290>)
 8001e8e:	f006 f943 	bl	8008118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_9
 8001e92:	f244 6331 	movw	r3, #17969	; 0x4631
 8001e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_0|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eac:	230e      	movs	r3, #14
 8001eae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001eb2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	483c      	ldr	r0, [pc, #240]	; (8001fac <HAL_LTDC_MspInit+0x294>)
 8001eba:	f006 f92d 	bl	8008118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_1;
 8001ebe:	23e2      	movs	r3, #226	; 0xe2
 8001ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ed6:	230e      	movs	r3, #14
 8001ed8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001edc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4833      	ldr	r0, [pc, #204]	; (8001fb0 <HAL_LTDC_MspInit+0x298>)
 8001ee4:	f006 f918 	bl	8008118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f02:	2309      	movs	r3, #9
 8001f04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f08:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4825      	ldr	r0, [pc, #148]	; (8001fa4 <HAL_LTDC_MspInit+0x28c>)
 8001f10:	f006 f902 	bl	8008118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f14:	2308      	movs	r3, #8
 8001f16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f2c:	230e      	movs	r3, #14
 8001f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f32:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f36:	4619      	mov	r1, r3
 8001f38:	481e      	ldr	r0, [pc, #120]	; (8001fb4 <HAL_LTDC_MspInit+0x29c>)
 8001f3a:	f006 f8ed 	bl	8008118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8001f3e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001f42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f58:	230e      	movs	r3, #14
 8001f5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f5e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f62:	4619      	mov	r1, r3
 8001f64:	4814      	ldr	r0, [pc, #80]	; (8001fb8 <HAL_LTDC_MspInit+0x2a0>)
 8001f66:	f006 f8d7 	bl	8008118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_2;
 8001f6a:	2324      	movs	r3, #36	; 0x24
 8001f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f82:	230e      	movs	r3, #14
 8001f84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f88:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480b      	ldr	r0, [pc, #44]	; (8001fbc <HAL_LTDC_MspInit+0x2a4>)
 8001f90:	f006 f8c2 	bl	8008118 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001f94:	bf00      	nop
 8001f96:	37c0      	adds	r7, #192	; 0xc0
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40016800 	.word	0x40016800
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40021800 	.word	0x40021800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40022800 	.word	0x40022800
 8001fb4:	40020c00 	.word	0x40020c00
 8001fb8:	40021c00 	.word	0x40021c00
 8001fbc:	40022400 	.word	0x40022400

08001fc0 <linear_interpolation>:
  float x1;
  float y1;
} lin_t;

float linear_interpolation(lin_t *lin, int16_t x)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
  return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	ed93 7a03 	vldr	s14, [r3, #12]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001fe0:	ee07 3a90 	vmov	s15, r3
 8001fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ff8:	ee66 6aa7 	vmul.f32	s13, s13, s15
                                     (lin->x0 * lin->y1)))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	ed93 6a00 	vldr	s12, [r3]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	edd3 7a03 	vldr	s15, [r3, #12]
 8002008:	ee66 7a27 	vmul.f32	s15, s12, s15
  return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 800200c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002010:	ee37 7a27 	vadd.f32	s14, s14, s15
         / (lin->x1 - lin->x0);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	edd3 6a02 	vldr	s13, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	edd3 7a00 	vldr	s15, [r3]
 8002020:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002024:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002028:	eef0 7a66 	vmov.f32	s15, s13
}
 800202c:	eeb0 0a67 	vmov.f32	s0, s15
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <isPointInsideButton1>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Bouton 1 Home */

int isPointInsideButton1(uint16_t x, uint16_t y) {
 800203a:	b590      	push	{r4, r7, lr}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	460a      	mov	r2, r1
 8002044:	80fb      	strh	r3, [r7, #6]
 8002046:	4613      	mov	r3, r2
 8002048:	80bb      	strh	r3, [r7, #4]
    int dx = x - BUTTON_X;
 800204a:	88fc      	ldrh	r4, [r7, #6]
 800204c:	f002 fd7e 	bl	8004b4c <BSP_LCD_GetXSize>
 8002050:	4603      	mov	r3, r0
 8002052:	085b      	lsrs	r3, r3, #1
 8002054:	1ae3      	subs	r3, r4, r3
 8002056:	60fb      	str	r3, [r7, #12]
    int dy = y - BUTTON_Y;
 8002058:	88bc      	ldrh	r4, [r7, #4]
 800205a:	f002 fd8b 	bl	8004b74 <BSP_LCD_GetYSize>
 800205e:	4603      	mov	r3, r0
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	1ae3      	subs	r3, r4, r3
 8002064:	60bb      	str	r3, [r7, #8]
    return (dx * dx + dy * dy) <= (BUTTON_RADIUS * BUTTON_RADIUS);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	fb03 f203 	mul.w	r2, r3, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	fb03 f303 	mul.w	r3, r3, r3
 8002072:	4413      	add	r3, r2
 8002074:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002078:	4293      	cmp	r3, r2
 800207a:	bfd4      	ite	le
 800207c:	2301      	movle	r3, #1
 800207e:	2300      	movgt	r3, #0
 8002080:	b2db      	uxtb	r3, r3
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	bd90      	pop	{r4, r7, pc}

0800208a <isPointInsideButton2>:
/* Bouton NEXT ' page1 + page2 ' */

int isPointInsideButton2(uint16_t x, uint16_t y) {
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	460a      	mov	r2, r1
 8002094:	80fb      	strh	r3, [r7, #6]
 8002096:	4613      	mov	r3, r2
 8002098:	80bb      	strh	r3, [r7, #4]
	if (x >= BUTTON_X2 && x <= (BUTTON_X2 + width) && y >= BUTTON_Y2 && y <= (BUTTON_Y2 + Height))
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80020a0:	d30c      	bcc.n	80020bc <isPointInsideButton2+0x32>
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80020a8:	d808      	bhi.n	80020bc <isPointInsideButton2+0x32>
 80020aa:	88bb      	ldrh	r3, [r7, #4]
 80020ac:	2b0a      	cmp	r3, #10
 80020ae:	d905      	bls.n	80020bc <isPointInsideButton2+0x32>
 80020b0:	88bb      	ldrh	r3, [r7, #4]
 80020b2:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80020b6:	d201      	bcs.n	80020bc <isPointInsideButton2+0x32>
		return 1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <isPointInsideButton2+0x34>
	 else
		return 0;
 80020bc:	2300      	movs	r3, #0

}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <isPointInsideButton3>:
/* Bouton Increment page 0 */

int isPointInsideButton3(uint16_t x, uint16_t y) {
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	460a      	mov	r2, r1
 80020d4:	80fb      	strh	r3, [r7, #6]
 80020d6:	4613      	mov	r3, r2
 80020d8:	80bb      	strh	r3, [r7, #4]
	if (x >= BUTTON_X3 && x <= (BUTTON_X3 + width3) && y >= BUTTON_Y3 && y <= (BUTTON_Y3 + Height3))
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	2b09      	cmp	r3, #9
 80020de:	d90a      	bls.n	80020f6 <isPointInsideButton3+0x2c>
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	2b32      	cmp	r3, #50	; 0x32
 80020e4:	d807      	bhi.n	80020f6 <isPointInsideButton3+0x2c>
 80020e6:	88bb      	ldrh	r3, [r7, #4]
 80020e8:	2b77      	cmp	r3, #119	; 0x77
 80020ea:	d904      	bls.n	80020f6 <isPointInsideButton3+0x2c>
 80020ec:	88bb      	ldrh	r3, [r7, #4]
 80020ee:	2ba0      	cmp	r3, #160	; 0xa0
 80020f0:	d801      	bhi.n	80020f6 <isPointInsideButton3+0x2c>
		return 1;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <isPointInsideButton3+0x2e>
	 else
		return 0;
 80020f6:	2300      	movs	r3, #0

}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <isPointInsideButton4>:

/* Bouton Decrement page 0 */

int isPointInsideButton4(uint16_t x, uint16_t y) {
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	460a      	mov	r2, r1
 800210e:	80fb      	strh	r3, [r7, #6]
 8002110:	4613      	mov	r3, r2
 8002112:	80bb      	strh	r3, [r7, #4]
	if (x >= BUTTON_X4 && x <= (BUTTON_X4 + width4) && y >= BUTTON_Y4 && y <= (BUTTON_Y4 + Height4))
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	2b09      	cmp	r3, #9
 8002118:	d90a      	bls.n	8002130 <isPointInsideButton4+0x2c>
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	2b32      	cmp	r3, #50	; 0x32
 800211e:	d807      	bhi.n	8002130 <isPointInsideButton4+0x2c>
 8002120:	88bb      	ldrh	r3, [r7, #4]
 8002122:	2bb3      	cmp	r3, #179	; 0xb3
 8002124:	d904      	bls.n	8002130 <isPointInsideButton4+0x2c>
 8002126:	88bb      	ldrh	r3, [r7, #4]
 8002128:	2bdc      	cmp	r3, #220	; 0xdc
 800212a:	d801      	bhi.n	8002130 <isPointInsideButton4+0x2c>
		return 1;
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <isPointInsideButton4+0x2e>
	 else
		return 0;
 8002130:	2300      	movs	r3, #0

}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <isPointInsideButton5>:
/* Bouton Switch to Second page 0 */

int isPointInsideButton5(uint16_t x, uint16_t y) {
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	460a      	mov	r2, r1
 8002148:	80fb      	strh	r3, [r7, #6]
 800214a:	4613      	mov	r3, r2
 800214c:	80bb      	strh	r3, [r7, #4]
	if (x >= BUTTON_X5 && x <= (BUTTON_X5 + width5) && y >= BUTTON_Y5 && y <= (BUTTON_Y5 + Height5))
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	2b45      	cmp	r3, #69	; 0x45
 8002152:	d90a      	bls.n	800216a <isPointInsideButton5+0x2c>
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	2b6e      	cmp	r3, #110	; 0x6e
 8002158:	d807      	bhi.n	800216a <isPointInsideButton5+0x2c>
 800215a:	88bb      	ldrh	r3, [r7, #4]
 800215c:	2b77      	cmp	r3, #119	; 0x77
 800215e:	d904      	bls.n	800216a <isPointInsideButton5+0x2c>
 8002160:	88bb      	ldrh	r3, [r7, #4]
 8002162:	2ba0      	cmp	r3, #160	; 0xa0
 8002164:	d801      	bhi.n	800216a <isPointInsideButton5+0x2c>
		return 1;
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <isPointInsideButton5+0x2e>
	 else
		return 0;
 800216a:	2300      	movs	r3, #0

}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <isPointInsideButton6>:

/* Bouton Switch to Minutes page 0 */

int isPointInsideButton6(uint16_t x, uint16_t y) {
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	460a      	mov	r2, r1
 8002182:	80fb      	strh	r3, [r7, #6]
 8002184:	4613      	mov	r3, r2
 8002186:	80bb      	strh	r3, [r7, #4]
	if (x >= BUTTON_X6 && x <= (BUTTON_X6 + width6) && y >= BUTTON_Y6 && y <= (BUTTON_Y6 + Height6))
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	2b45      	cmp	r3, #69	; 0x45
 800218c:	d90a      	bls.n	80021a4 <isPointInsideButton6+0x2c>
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	2b6e      	cmp	r3, #110	; 0x6e
 8002192:	d807      	bhi.n	80021a4 <isPointInsideButton6+0x2c>
 8002194:	88bb      	ldrh	r3, [r7, #4]
 8002196:	2bb3      	cmp	r3, #179	; 0xb3
 8002198:	d904      	bls.n	80021a4 <isPointInsideButton6+0x2c>
 800219a:	88bb      	ldrh	r3, [r7, #4]
 800219c:	2bdc      	cmp	r3, #220	; 0xdc
 800219e:	d801      	bhi.n	80021a4 <isPointInsideButton6+0x2c>
		return 1;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <isPointInsideButton6+0x2e>
	 else
		return 0;
 80021a4:	2300      	movs	r3, #0

}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <isPointInsideButton7>:

/* Bouton enter to Graph of temperature page 1 */

int isPointInsideButton7(uint16_t x, uint16_t y) {
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	460a      	mov	r2, r1
 80021bc:	80fb      	strh	r3, [r7, #6]
 80021be:	4613      	mov	r3, r2
 80021c0:	80bb      	strh	r3, [r7, #4]
	if (x >= BUTTON_X7 && x <= (BUTTON_X7 + width7) && y >= BUTTON_Y7 && y <= (BUTTON_Y7 + Height7))
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	2b17      	cmp	r3, #23
 80021c6:	d90a      	bls.n	80021de <isPointInsideButton7+0x2c>
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	2bae      	cmp	r3, #174	; 0xae
 80021cc:	d807      	bhi.n	80021de <isPointInsideButton7+0x2c>
 80021ce:	88bb      	ldrh	r3, [r7, #4]
 80021d0:	2b84      	cmp	r3, #132	; 0x84
 80021d2:	d904      	bls.n	80021de <isPointInsideButton7+0x2c>
 80021d4:	88bb      	ldrh	r3, [r7, #4]
 80021d6:	2bad      	cmp	r3, #173	; 0xad
 80021d8:	d801      	bhi.n	80021de <isPointInsideButton7+0x2c>
		return 1;
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <isPointInsideButton7+0x2e>
	 else
		return 0;
 80021de:	2300      	movs	r3, #0

}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	0000      	movs	r0, r0
	...

080021f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021f0:	b5b0      	push	{r4, r5, r7, lr}
 80021f2:	b090      	sub	sp, #64	; 0x40
 80021f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021f6:	f004 fb69 	bl	80068cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021fa:	f000 fe97 	bl	8002f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021fe:	f7ff f8a3 	bl	8001348 <MX_GPIO_Init>
  MX_DMA_Init();
 8002202:	f7fe ff51 	bl	80010a8 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8002206:	f001 fb3b 	bl	8003880 <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 800220a:	f001 ff0d 	bl	8004028 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800220e:	f00c fbed 	bl	800e9ec <MX_FATFS_Init>
  MX_I2C1_Init();
 8002212:	f7ff fa1d 	bl	8001650 <MX_I2C1_Init>
  MX_ADC3_Init();
 8002216:	f7fe feb5 	bl	8000f84 <MX_ADC3_Init>
  MX_DMA2D_Init();
 800221a:	f7fe ff6b 	bl	80010f4 <MX_DMA2D_Init>
  MX_FMC_Init();
 800221e:	f7fe ffbb 	bl	8001198 <MX_FMC_Init>
  MX_LTDC_Init();
 8002222:	f7ff fcc7 	bl	8001bb4 <MX_LTDC_Init>
  MX_RTC_Init();
 8002226:	f001 faa3 	bl	8003770 <MX_RTC_Init>
  MX_TIM1_Init();
 800222a:	f001 fdbb 	bl	8003da4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800222e:	f001 fe13 	bl	8003e58 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Initialiser les timers 1 en mode capture (avec Interruption) et timer 2 en mode interruption */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8002232:	2100      	movs	r1, #0
 8002234:	48ac      	ldr	r0, [pc, #688]	; (80024e8 <main+0x2f8>)
 8002236:	f00a fa29 	bl	800c68c <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800223a:	48ac      	ldr	r0, [pc, #688]	; (80024ec <main+0x2fc>)
 800223c:	f00a f956 	bl	800c4ec <HAL_TIM_Base_Start_IT>

  //********************************************** BSP *****************************************

  BSP_LCD_Init();
 8002240:	f002 fc14 	bl	8004a6c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, SDRAM_DEVICE_ADDR);
 8002244:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002248:	2001      	movs	r0, #1
 800224a:	f002 fca7 	bl	8004b9c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SetLayerVisible(LTDC_ACTIVE_LAYER, ENABLE);
 800224e:	2101      	movs	r1, #1
 8002250:	2001      	movs	r0, #1
 8002252:	f002 fd13 	bl	8004c7c <BSP_LCD_SetLayerVisible>
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8002256:	2001      	movs	r0, #1
 8002258:	f002 fd00 	bl	8004c5c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	f002 fdac 	bl	8004dbc <BSP_LCD_Clear>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8002264:	f002 fc72 	bl	8004b4c <BSP_LCD_GetXSize>
 8002268:	4603      	mov	r3, r0
 800226a:	b29c      	uxth	r4, r3
 800226c:	f002 fc82 	bl	8004b74 <BSP_LCD_GetYSize>
 8002270:	4603      	mov	r3, r0
 8002272:	b29b      	uxth	r3, r3
 8002274:	4619      	mov	r1, r3
 8002276:	4620      	mov	r0, r4
 8002278:	f003 fd50 	bl	8005d1c <BSP_TS_Init>
  BSP_TS_ITConfig();
 800227c:	f003 fd8e 	bl	8005d9c <BSP_TS_ITConfig>
  BSP_TS_ITClear();
 8002280:	f003 fff6 	bl	8006270 <BSP_TS_ITClear>
  LCD_LOG_Init();
 8002284:	f7ff faa8 	bl	80017d8 <LCD_LOG_Init>


  BSP_TS_ResetTouchData(TS_State);
 8002288:	4b99      	ldr	r3, [pc, #612]	; (80024f0 <main+0x300>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f003 ffff 	bl	8006290 <BSP_TS_ResetTouchData>
  BSP_LCD_SetFont(&Font12);
 8002292:	4898      	ldr	r0, [pc, #608]	; (80024f4 <main+0x304>)
 8002294:	f002 fd62 	bl	8004d5c <BSP_LCD_SetFont>

  /* Ajouter l'image pour la page 0 */

  BSP_LCD_DrawBitmap(0, 0, (uint8_t *)file3);
 8002298:	4a97      	ldr	r2, [pc, #604]	; (80024f8 <main+0x308>)
 800229a:	2100      	movs	r1, #0
 800229c:	2000      	movs	r0, #0
 800229e:	f002 ffe1 	bl	8005264 <BSP_LCD_DrawBitmap>

  /* Afficher le texte */

  BSP_LCD_DisplayStringAt(15, 83,(uint8_t *) " CHoose your time acquisition ", CENTER_MODE);
 80022a2:	2301      	movs	r3, #1
 80022a4:	4a95      	ldr	r2, [pc, #596]	; (80024fc <main+0x30c>)
 80022a6:	2153      	movs	r1, #83	; 0x53
 80022a8:	200f      	movs	r0, #15
 80022aa:	f002 fdf3 	bl	8004e94 <BSP_LCD_DisplayStringAt>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Initialiser le temps */

	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80022ae:	2200      	movs	r2, #0
 80022b0:	4993      	ldr	r1, [pc, #588]	; (8002500 <main+0x310>)
 80022b2:	4894      	ldr	r0, [pc, #592]	; (8002504 <main+0x314>)
 80022b4:	f008 fdfa 	bl	800aeac <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80022b8:	2200      	movs	r2, #0
 80022ba:	4993      	ldr	r1, [pc, #588]	; (8002508 <main+0x318>)
 80022bc:	4891      	ldr	r0, [pc, #580]	; (8002504 <main+0x314>)
 80022be:	f008 fd13 	bl	800ace8 <HAL_RTC_GetTime>

	  /* Convertir la date et le temps en chaine de caracteres */

	  sprintf(buff2, "%02d-%02d-%02d   \t  \t  \t  \t         %02d : %02d : %02d",sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds);
 80022c2:	4b8f      	ldr	r3, [pc, #572]	; (8002500 <main+0x310>)
 80022c4:	789b      	ldrb	r3, [r3, #2]
 80022c6:	461c      	mov	r4, r3
 80022c8:	4b8d      	ldr	r3, [pc, #564]	; (8002500 <main+0x310>)
 80022ca:	785b      	ldrb	r3, [r3, #1]
 80022cc:	461d      	mov	r5, r3
 80022ce:	4b8c      	ldr	r3, [pc, #560]	; (8002500 <main+0x310>)
 80022d0:	78db      	ldrb	r3, [r3, #3]
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b8c      	ldr	r3, [pc, #560]	; (8002508 <main+0x318>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	4619      	mov	r1, r3
 80022da:	4b8b      	ldr	r3, [pc, #556]	; (8002508 <main+0x318>)
 80022dc:	785b      	ldrb	r3, [r3, #1]
 80022de:	4618      	mov	r0, r3
 80022e0:	4b89      	ldr	r3, [pc, #548]	; (8002508 <main+0x318>)
 80022e2:	789b      	ldrb	r3, [r3, #2]
 80022e4:	9303      	str	r3, [sp, #12]
 80022e6:	9002      	str	r0, [sp, #8]
 80022e8:	9101      	str	r1, [sp, #4]
 80022ea:	9200      	str	r2, [sp, #0]
 80022ec:	462b      	mov	r3, r5
 80022ee:	4622      	mov	r2, r4
 80022f0:	4986      	ldr	r1, [pc, #536]	; (800250c <main+0x31c>)
 80022f2:	4887      	ldr	r0, [pc, #540]	; (8002510 <main+0x320>)
 80022f4:	f010 f922 	bl	801253c <siprintf>

	  /* Convertir le temps en secondes et en minutes */

	  uint32_t currentSeconds = sTime.Hours * 3600 + sTime.Minutes * 60 + sTime.Seconds;
 80022f8:	4b83      	ldr	r3, [pc, #524]	; (8002508 <main+0x318>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002302:	fb03 f202 	mul.w	r2, r3, r2
 8002306:	4b80      	ldr	r3, [pc, #512]	; (8002508 <main+0x318>)
 8002308:	785b      	ldrb	r3, [r3, #1]
 800230a:	4619      	mov	r1, r3
 800230c:	460b      	mov	r3, r1
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a5b      	subs	r3, r3, r1
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	4a7c      	ldr	r2, [pc, #496]	; (8002508 <main+0x318>)
 8002318:	7892      	ldrb	r2, [r2, #2]
 800231a:	4413      	add	r3, r2
 800231c:	617b      	str	r3, [r7, #20]
	  uint32_t currentMinutes = sTime.Hours * 60 + sTime.Minutes;
 800231e:	4b7a      	ldr	r3, [pc, #488]	; (8002508 <main+0x318>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	461a      	mov	r2, r3
 800232e:	4b76      	ldr	r3, [pc, #472]	; (8002508 <main+0x318>)
 8002330:	785b      	ldrb	r3, [r3, #1]
 8002332:	4413      	add	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
	  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  /* Si la pluie est détecté */

	  if (pluieDetected == 1) {
 8002336:	4b77      	ldr	r3, [pc, #476]	; (8002514 <main+0x324>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d107      	bne.n	8002350 <main+0x160>
			impulseCountP++;
 8002340:	4b75      	ldr	r3, [pc, #468]	; (8002518 <main+0x328>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3301      	adds	r3, #1
 8002346:	4a74      	ldr	r2, [pc, #464]	; (8002518 <main+0x328>)
 8002348:	6013      	str	r3, [r2, #0]

			pluieDetected = 0;
 800234a:	4b72      	ldr	r3, [pc, #456]	; (8002514 <main+0x324>)
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
	  }

	  /* Si la vitesse est détecté */

	  if (vitesseDetected == 1) {
 8002350:	4b72      	ldr	r3, [pc, #456]	; (800251c <main+0x32c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d107      	bne.n	800236a <main+0x17a>

				impulseCount++;
 800235a:	4b71      	ldr	r3, [pc, #452]	; (8002520 <main+0x330>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3301      	adds	r3, #1
 8002360:	4a6f      	ldr	r2, [pc, #444]	; (8002520 <main+0x330>)
 8002362:	6013      	str	r3, [r2, #0]
			  vitesseDetected = 0;
 8002364:	4b6d      	ldr	r3, [pc, #436]	; (800251c <main+0x32c>)
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
	  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  /* Chaque 30 secondes en etteint l'ecran  */

	  	  if (DisplayState==0 && (currentSeconds - previousSecondsX) >= 1) {
 800236a:	4b6e      	ldr	r3, [pc, #440]	; (8002524 <main+0x334>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d119      	bne.n	80023a6 <main+0x1b6>
 8002372:	4b6d      	ldr	r3, [pc, #436]	; (8002528 <main+0x338>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	429a      	cmp	r2, r3
 800237a:	d014      	beq.n	80023a6 <main+0x1b6>
	  			q++;
 800237c:	4b6b      	ldr	r3, [pc, #428]	; (800252c <main+0x33c>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b69      	ldr	r3, [pc, #420]	; (800252c <main+0x33c>)
 8002386:	701a      	strb	r2, [r3, #0]
	  			if(q==30){
 8002388:	4b68      	ldr	r3, [pc, #416]	; (800252c <main+0x33c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b1e      	cmp	r3, #30
 800238e:	d107      	bne.n	80023a0 <main+0x1b0>
	  				BSP_LCD_DisplayOff();
 8002390:	f003 f8b2 	bl	80054f8 <BSP_LCD_DisplayOff>
	  				DisplayState=1;
 8002394:	4b63      	ldr	r3, [pc, #396]	; (8002524 <main+0x334>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
	  				q=0;
 800239a:	4b64      	ldr	r3, [pc, #400]	; (800252c <main+0x33c>)
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
	  			}

	  			previousSecondsX = currentSeconds; // Mettre à jour le temps précédent
 80023a0:	4a61      	ldr	r2, [pc, #388]	; (8002528 <main+0x338>)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	6013      	str	r3, [r2, #0]
	  	  }

	  /* Chaque minute en calcule la quantité de pluie  */

	  if ((currentMinutes - previousMinutes2) >= 1) {
 80023a6:	4b62      	ldr	r3, [pc, #392]	; (8002530 <main+0x340>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d018      	beq.n	80023e2 <main+0x1f2>
			quantPluie = impulseCountP * 0.279;
 80023b0:	4b59      	ldr	r3, [pc, #356]	; (8002518 <main+0x328>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe f8c5 	bl	8000544 <__aeabi_ui2d>
 80023ba:	a347      	add	r3, pc, #284	; (adr r3, 80024d8 <main+0x2e8>)
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	f7fe f93a 	bl	8000638 <__aeabi_dmul>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7fe fc0c 	bl	8000be8 <__aeabi_d2f>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4a58      	ldr	r2, [pc, #352]	; (8002534 <main+0x344>)
 80023d4:	6013      	str	r3, [r2, #0]

			impulseCountP=0;
 80023d6:	4b50      	ldr	r3, [pc, #320]	; (8002518 <main+0x328>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

			previousMinutes2 = currentMinutes; // Mettre à jour le temps précédent
 80023dc:	4a54      	ldr	r2, [pc, #336]	; (8002530 <main+0x340>)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	6013      	str	r3, [r2, #0]
	  }

	  /* On calcule la vitesse dans une seconde en km/h */

	  if ((currentSeconds - previousSeconds3) >= 1) {
 80023e2:	4b55      	ldr	r3, [pc, #340]	; (8002538 <main+0x348>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d027      	beq.n	800243c <main+0x24c>
			  vitesse+= impulseCount * 2.4;
 80023ec:	4b4c      	ldr	r3, [pc, #304]	; (8002520 <main+0x330>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe f8a7 	bl	8000544 <__aeabi_ui2d>
 80023f6:	a33a      	add	r3, pc, #232	; (adr r3, 80024e0 <main+0x2f0>)
 80023f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fc:	f7fe f91c 	bl	8000638 <__aeabi_dmul>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4614      	mov	r4, r2
 8002406:	461d      	mov	r5, r3
 8002408:	4b4c      	ldr	r3, [pc, #304]	; (800253c <main+0x34c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe f8bb 	bl	8000588 <__aeabi_f2d>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4620      	mov	r0, r4
 8002418:	4629      	mov	r1, r5
 800241a:	f7fd ff57 	bl	80002cc <__adddf3>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f7fe fbdf 	bl	8000be8 <__aeabi_d2f>
 800242a:	4603      	mov	r3, r0
 800242c:	4a43      	ldr	r2, [pc, #268]	; (800253c <main+0x34c>)
 800242e:	6013      	str	r3, [r2, #0]
			  impulseCount=0;
 8002430:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <main+0x330>)
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]

		  previousSeconds3 = currentSeconds; // Mettre à jour le temps précédent
 8002436:	4a40      	ldr	r2, [pc, #256]	; (8002538 <main+0x348>)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	6013      	str	r3, [r2, #0]
	  }


	  /* On stock chaque 60 minute en réel mais la en test en stock chaque 4 minutes */

	  if ((currentMinutes - previousMinutes4) >= 4) {
 800243c:	4b40      	ldr	r3, [pc, #256]	; (8002540 <main+0x350>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b03      	cmp	r3, #3
 8002446:	f240 81ef 	bls.w	8002828 <main+0x638>

	    BSP_LCD_Clear(LCD_COLOR_WHITE);
 800244a:	f04f 30ff 	mov.w	r0, #4294967295
 800244e:	f002 fcb5 	bl	8004dbc <BSP_LCD_Clear>
		  sprintf(buff2, " STOCKING ! ! ! wait for it ");
 8002452:	493c      	ldr	r1, [pc, #240]	; (8002544 <main+0x354>)
 8002454:	482e      	ldr	r0, [pc, #184]	; (8002510 <main+0x320>)
 8002456:	f010 f871 	bl	801253c <siprintf>
	  	  LCD_LOG_SetHeader((uint8_t *) buff2);
 800245a:	482d      	ldr	r0, [pc, #180]	; (8002510 <main+0x320>)
 800245c:	f7ff fa06 	bl	800186c <LCD_LOG_SetHeader>


		if(k==0)
 8002460:	4b39      	ldr	r3, [pc, #228]	; (8002548 <main+0x358>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d109      	bne.n	800247c <main+0x28c>
			ack=  4*60/acquisition;
 8002468:	4b38      	ldr	r3, [pc, #224]	; (800254c <main+0x35c>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	23f0      	movs	r3, #240	; 0xf0
 8002470:	fb93 f3f2 	sdiv	r3, r3, r2
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b36      	ldr	r3, [pc, #216]	; (8002550 <main+0x360>)
 8002478:	701a      	strb	r2, [r3, #0]
 800247a:	e008      	b.n	800248e <main+0x29e>
		else
			ack=  4 / acquisition;
 800247c:	4b33      	ldr	r3, [pc, #204]	; (800254c <main+0x35c>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	2304      	movs	r3, #4
 8002484:	fb93 f3f2 	sdiv	r3, r3, r2
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4b31      	ldr	r3, [pc, #196]	; (8002550 <main+0x360>)
 800248c:	701a      	strb	r2, [r3, #0]

		/*##-2- Register the file system object to the FatFs module ##############*/
		 if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800248e:	2200      	movs	r2, #0
 8002490:	4930      	ldr	r1, [pc, #192]	; (8002554 <main+0x364>)
 8002492:	4831      	ldr	r0, [pc, #196]	; (8002558 <main+0x368>)
 8002494:	f00e fa3a 	bl	801090c <f_mount>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <main+0x2b4>
		 {
		   /* FatFs Initialization Error */
		   Error_Handler();
 800249e:	f001 f961 	bl	8003764 <Error_Handler>
 80024a2:	e16e      	b.n	8002782 <main+0x592>
		 }
		 else
		 {
		   /*##-3- Create a FAT file system (format) on the logical drive #########*/
		   /* WARNING: Formatting the uSD card will delete all content on the device */
		   if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer)) != FR_OK)
 80024a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	4b2c      	ldr	r3, [pc, #176]	; (800255c <main+0x36c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	2107      	movs	r1, #7
 80024b0:	4828      	ldr	r0, [pc, #160]	; (8002554 <main+0x364>)
 80024b2:	f00e fe4d 	bl	8011150 <f_mkfs>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <main+0x2d2>
		   {
			 /* FatFs Format Error */
			 Error_Handler();
 80024bc:	f001 f952 	bl	8003764 <Error_Handler>
 80024c0:	e15f      	b.n	8002782 <main+0x592>
		   }
		   else
		   {
			 /*##-4- Create and Open a new text file object with write access #####*/
			 if(f_open(&SDFile, "Stck.CSV", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80024c2:	220a      	movs	r2, #10
 80024c4:	4926      	ldr	r1, [pc, #152]	; (8002560 <main+0x370>)
 80024c6:	4827      	ldr	r0, [pc, #156]	; (8002564 <main+0x374>)
 80024c8:	f00e fa66 	bl	8010998 <f_open>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d04a      	beq.n	8002568 <main+0x378>
			 {
			   /* 'STM32.TXT' file Open for write Error */
			   Error_Handler();
 80024d2:	f001 f947 	bl	8003764 <Error_Handler>
 80024d6:	e154      	b.n	8002782 <main+0x592>
 80024d8:	d0e56042 	.word	0xd0e56042
 80024dc:	3fd1db22 	.word	0x3fd1db22
 80024e0:	33333333 	.word	0x33333333
 80024e4:	40033333 	.word	0x40033333
 80024e8:	20037884 	.word	0x20037884
 80024ec:	200378d0 	.word	0x200378d0
 80024f0:	200040d8 	.word	0x200040d8
 80024f4:	200000bc 	.word	0x200000bc
 80024f8:	080149d4 	.word	0x080149d4
 80024fc:	08014810 	.word	0x08014810
 8002500:	20004efc 	.word	0x20004efc
 8002504:	2003771c 	.word	0x2003771c
 8002508:	20004ee8 	.word	0x20004ee8
 800250c:	08014830 	.word	0x08014830
 8002510:	20004f1c 	.word	0x20004f1c
 8002514:	2000503c 	.word	0x2000503c
 8002518:	20005038 	.word	0x20005038
 800251c:	20005820 	.word	0x20005820
 8002520:	2000582c 	.word	0x2000582c
 8002524:	200040e3 	.word	0x200040e3
 8002528:	20004f0c 	.word	0x20004f0c
 800252c:	20004f9e 	.word	0x20004f9e
 8002530:	20004f14 	.word	0x20004f14
 8002534:	20005040 	.word	0x20005040
 8002538:	20004f08 	.word	0x20004f08
 800253c:	20005824 	.word	0x20005824
 8002540:	20004f18 	.word	0x20004f18
 8002544:	08014868 	.word	0x08014868
 8002548:	20005037 	.word	0x20005037
 800254c:	20000000 	.word	0x20000000
 8002550:	20005036 	.word	0x20005036
 8002554:	20037c84 	.word	0x20037c84
 8002558:	20037c88 	.word	0x20037c88
 800255c:	200067d8 	.word	0x200067d8
 8002560:	08014888 	.word	0x08014888
 8002564:	20037eb8 	.word	0x20037eb8
			 }
			 else
			 {
				 /* stocker la date et l'heure */

				 res = f_write(&SDFile, buff2, sizeof(buff2), (void *)&byteswritten);
 8002568:	4b93      	ldr	r3, [pc, #588]	; (80027b8 <main+0x5c8>)
 800256a:	2282      	movs	r2, #130	; 0x82
 800256c:	4993      	ldr	r1, [pc, #588]	; (80027bc <main+0x5cc>)
 800256e:	4894      	ldr	r0, [pc, #592]	; (80027c0 <main+0x5d0>)
 8002570:	f00e fbd0 	bl	8010d14 <f_write>
 8002574:	4603      	mov	r3, r0
 8002576:	461a      	mov	r2, r3
 8002578:	4b92      	ldr	r3, [pc, #584]	; (80027c4 <main+0x5d4>)
 800257a:	701a      	strb	r2, [r3, #0]

				 /* stocker la chaine de caractères " température " */

				 res = f_write(&SDFile, wtextT, sizeof(wtextT), (void *)&byteswritten);
 800257c:	4b8e      	ldr	r3, [pc, #568]	; (80027b8 <main+0x5c8>)
 800257e:	221c      	movs	r2, #28
 8002580:	4991      	ldr	r1, [pc, #580]	; (80027c8 <main+0x5d8>)
 8002582:	488f      	ldr	r0, [pc, #572]	; (80027c0 <main+0x5d0>)
 8002584:	f00e fbc6 	bl	8010d14 <f_write>
 8002588:	4603      	mov	r3, r0
 800258a:	461a      	mov	r2, r3
 800258c:	4b8d      	ldr	r3, [pc, #564]	; (80027c4 <main+0x5d4>)
 800258e:	701a      	strb	r2, [r3, #0]

				 /* Convertir les valeurs de température et les stocker dans la carte µSD */

				 for(int j=0;j<ack;j++){
 8002590:	2300      	movs	r3, #0
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002594:	e01d      	b.n	80025d2 <main+0x3e2>
					 sprintf(tab, "%.2f\n", tab_temp[j]);
 8002596:	4a8d      	ldr	r2, [pc, #564]	; (80027cc <main+0x5dc>)
 8002598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd fff1 	bl	8000588 <__aeabi_f2d>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4989      	ldr	r1, [pc, #548]	; (80027d0 <main+0x5e0>)
 80025ac:	4889      	ldr	r0, [pc, #548]	; (80027d4 <main+0x5e4>)
 80025ae:	f00f ffc5 	bl	801253c <siprintf>
					 res = f_write(&SDFile, tab, strlen(tab), (void *)&byteswritten);
 80025b2:	4888      	ldr	r0, [pc, #544]	; (80027d4 <main+0x5e4>)
 80025b4:	f7fd fe7c 	bl	80002b0 <strlen>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b7f      	ldr	r3, [pc, #508]	; (80027b8 <main+0x5c8>)
 80025bc:	4985      	ldr	r1, [pc, #532]	; (80027d4 <main+0x5e4>)
 80025be:	4880      	ldr	r0, [pc, #512]	; (80027c0 <main+0x5d0>)
 80025c0:	f00e fba8 	bl	8010d14 <f_write>
 80025c4:	4603      	mov	r3, r0
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b7e      	ldr	r3, [pc, #504]	; (80027c4 <main+0x5d4>)
 80025ca:	701a      	strb	r2, [r3, #0]
				 for(int j=0;j<ack;j++){
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ce:	3301      	adds	r3, #1
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025d2:	4b81      	ldr	r3, [pc, #516]	; (80027d8 <main+0x5e8>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	4293      	cmp	r3, r2
 80025dc:	dbdb      	blt.n	8002596 <main+0x3a6>

				 }

				 /* stocker la chaine de caractères " Humidité " */

				 res = f_write(&SDFile, wtextH, sizeof(wtextH), (void *)&byteswritten);
 80025de:	4b76      	ldr	r3, [pc, #472]	; (80027b8 <main+0x5c8>)
 80025e0:	2218      	movs	r2, #24
 80025e2:	497e      	ldr	r1, [pc, #504]	; (80027dc <main+0x5ec>)
 80025e4:	4876      	ldr	r0, [pc, #472]	; (80027c0 <main+0x5d0>)
 80025e6:	f00e fb95 	bl	8010d14 <f_write>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b75      	ldr	r3, [pc, #468]	; (80027c4 <main+0x5d4>)
 80025f0:	701a      	strb	r2, [r3, #0]

				 /* Convertir les valeurs de l'humidité et les stocker dans la carte µSD */

				for(int j=0;j<ack;j++){
 80025f2:	2300      	movs	r3, #0
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025f6:	e01d      	b.n	8002634 <main+0x444>
					 sprintf(tab, "%.2f\n", tab_humid[j]);
 80025f8:	4a79      	ldr	r2, [pc, #484]	; (80027e0 <main+0x5f0>)
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd ffc0 	bl	8000588 <__aeabi_f2d>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4970      	ldr	r1, [pc, #448]	; (80027d0 <main+0x5e0>)
 800260e:	4871      	ldr	r0, [pc, #452]	; (80027d4 <main+0x5e4>)
 8002610:	f00f ff94 	bl	801253c <siprintf>
					 res = f_write(&SDFile, tab, strlen(tab), (void *)&byteswritten);
 8002614:	486f      	ldr	r0, [pc, #444]	; (80027d4 <main+0x5e4>)
 8002616:	f7fd fe4b 	bl	80002b0 <strlen>
 800261a:	4602      	mov	r2, r0
 800261c:	4b66      	ldr	r3, [pc, #408]	; (80027b8 <main+0x5c8>)
 800261e:	496d      	ldr	r1, [pc, #436]	; (80027d4 <main+0x5e4>)
 8002620:	4867      	ldr	r0, [pc, #412]	; (80027c0 <main+0x5d0>)
 8002622:	f00e fb77 	bl	8010d14 <f_write>
 8002626:	4603      	mov	r3, r0
 8002628:	461a      	mov	r2, r3
 800262a:	4b66      	ldr	r3, [pc, #408]	; (80027c4 <main+0x5d4>)
 800262c:	701a      	strb	r2, [r3, #0]
				for(int j=0;j<ack;j++){
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	3301      	adds	r3, #1
 8002632:	62bb      	str	r3, [r7, #40]	; 0x28
 8002634:	4b68      	ldr	r3, [pc, #416]	; (80027d8 <main+0x5e8>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	4293      	cmp	r3, r2
 800263e:	dbdb      	blt.n	80025f8 <main+0x408>
				 }

				/* stocker la chaine de caractères " Pression " */

				res = f_write(&SDFile, wtextPr, sizeof(wtextPr), (void *)&byteswritten);
 8002640:	4b5d      	ldr	r3, [pc, #372]	; (80027b8 <main+0x5c8>)
 8002642:	2218      	movs	r2, #24
 8002644:	4967      	ldr	r1, [pc, #412]	; (80027e4 <main+0x5f4>)
 8002646:	485e      	ldr	r0, [pc, #376]	; (80027c0 <main+0x5d0>)
 8002648:	f00e fb64 	bl	8010d14 <f_write>
 800264c:	4603      	mov	r3, r0
 800264e:	461a      	mov	r2, r3
 8002650:	4b5c      	ldr	r3, [pc, #368]	; (80027c4 <main+0x5d4>)
 8002652:	701a      	strb	r2, [r3, #0]

				/* Convertir les valeurs de Pression et les stocker dans la carte µSD */

				for(int j=0;j<ack;j++){
 8002654:	2300      	movs	r3, #0
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
 8002658:	e01d      	b.n	8002696 <main+0x4a6>
					 sprintf(tab, "%.2f\n", tab_pres[j]);
 800265a:	4a63      	ldr	r2, [pc, #396]	; (80027e8 <main+0x5f8>)
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7fd ff8f 	bl	8000588 <__aeabi_f2d>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4958      	ldr	r1, [pc, #352]	; (80027d0 <main+0x5e0>)
 8002670:	4858      	ldr	r0, [pc, #352]	; (80027d4 <main+0x5e4>)
 8002672:	f00f ff63 	bl	801253c <siprintf>
					 res = f_write(&SDFile, tab, strlen(tab), (void *)&byteswritten);
 8002676:	4857      	ldr	r0, [pc, #348]	; (80027d4 <main+0x5e4>)
 8002678:	f7fd fe1a 	bl	80002b0 <strlen>
 800267c:	4602      	mov	r2, r0
 800267e:	4b4e      	ldr	r3, [pc, #312]	; (80027b8 <main+0x5c8>)
 8002680:	4954      	ldr	r1, [pc, #336]	; (80027d4 <main+0x5e4>)
 8002682:	484f      	ldr	r0, [pc, #316]	; (80027c0 <main+0x5d0>)
 8002684:	f00e fb46 	bl	8010d14 <f_write>
 8002688:	4603      	mov	r3, r0
 800268a:	461a      	mov	r2, r3
 800268c:	4b4d      	ldr	r3, [pc, #308]	; (80027c4 <main+0x5d4>)
 800268e:	701a      	strb	r2, [r3, #0]
				for(int j=0;j<ack;j++){
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	3301      	adds	r3, #1
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
 8002696:	4b50      	ldr	r3, [pc, #320]	; (80027d8 <main+0x5e8>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	4293      	cmp	r3, r2
 80026a0:	dbdb      	blt.n	800265a <main+0x46a>
				 }

				/* stocker la chaine de caractères " Vitesse " */

				res = f_write(&SDFile, wtextV, sizeof(wtextV), (void *)&byteswritten);
 80026a2:	4b45      	ldr	r3, [pc, #276]	; (80027b8 <main+0x5c8>)
 80026a4:	2217      	movs	r2, #23
 80026a6:	4951      	ldr	r1, [pc, #324]	; (80027ec <main+0x5fc>)
 80026a8:	4845      	ldr	r0, [pc, #276]	; (80027c0 <main+0x5d0>)
 80026aa:	f00e fb33 	bl	8010d14 <f_write>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b44      	ldr	r3, [pc, #272]	; (80027c4 <main+0x5d4>)
 80026b4:	701a      	strb	r2, [r3, #0]

				/* Convertir les valeurs de Vitesse et les stocker dans la carte µSD */

				for(int j=0;j<ack;j++){
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	e01d      	b.n	80026f8 <main+0x508>
					 sprintf(tab, "%.2f\n", tab_wind[j]);
 80026bc:	4a4c      	ldr	r2, [pc, #304]	; (80027f0 <main+0x600>)
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fd ff5e 	bl	8000588 <__aeabi_f2d>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	493f      	ldr	r1, [pc, #252]	; (80027d0 <main+0x5e0>)
 80026d2:	4840      	ldr	r0, [pc, #256]	; (80027d4 <main+0x5e4>)
 80026d4:	f00f ff32 	bl	801253c <siprintf>
					 res = f_write(&SDFile, tab, strlen(tab), (void *)&byteswritten);
 80026d8:	483e      	ldr	r0, [pc, #248]	; (80027d4 <main+0x5e4>)
 80026da:	f7fd fde9 	bl	80002b0 <strlen>
 80026de:	4602      	mov	r2, r0
 80026e0:	4b35      	ldr	r3, [pc, #212]	; (80027b8 <main+0x5c8>)
 80026e2:	493c      	ldr	r1, [pc, #240]	; (80027d4 <main+0x5e4>)
 80026e4:	4836      	ldr	r0, [pc, #216]	; (80027c0 <main+0x5d0>)
 80026e6:	f00e fb15 	bl	8010d14 <f_write>
 80026ea:	4603      	mov	r3, r0
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b35      	ldr	r3, [pc, #212]	; (80027c4 <main+0x5d4>)
 80026f0:	701a      	strb	r2, [r3, #0]
				for(int j=0;j<ack;j++){
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	3301      	adds	r3, #1
 80026f6:	623b      	str	r3, [r7, #32]
 80026f8:	4b37      	ldr	r3, [pc, #220]	; (80027d8 <main+0x5e8>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	4293      	cmp	r3, r2
 8002702:	dbdb      	blt.n	80026bc <main+0x4cc>
				 }

				/* stocker la chaine de caractères " Pluie " */

				res = f_write(&SDFile, wtextP, sizeof(wtextP), (void *)&byteswritten);
 8002704:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <main+0x5c8>)
 8002706:	2215      	movs	r2, #21
 8002708:	493a      	ldr	r1, [pc, #232]	; (80027f4 <main+0x604>)
 800270a:	482d      	ldr	r0, [pc, #180]	; (80027c0 <main+0x5d0>)
 800270c:	f00e fb02 	bl	8010d14 <f_write>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <main+0x5d4>)
 8002716:	701a      	strb	r2, [r3, #0]

				/* Convertir les valeurs de Pluie et les stocker dans la carte µSD */

				for(int j=0;j<ack;j++){
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	e01d      	b.n	800275a <main+0x56a>
					 sprintf(tab, "%.2f\n", tab_run[j]);
 800271e:	4a36      	ldr	r2, [pc, #216]	; (80027f8 <main+0x608>)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd ff2d 	bl	8000588 <__aeabi_f2d>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4927      	ldr	r1, [pc, #156]	; (80027d0 <main+0x5e0>)
 8002734:	4827      	ldr	r0, [pc, #156]	; (80027d4 <main+0x5e4>)
 8002736:	f00f ff01 	bl	801253c <siprintf>
					 res = f_write(&SDFile, tab, strlen(tab), (void *)&byteswritten);
 800273a:	4826      	ldr	r0, [pc, #152]	; (80027d4 <main+0x5e4>)
 800273c:	f7fd fdb8 	bl	80002b0 <strlen>
 8002740:	4602      	mov	r2, r0
 8002742:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <main+0x5c8>)
 8002744:	4923      	ldr	r1, [pc, #140]	; (80027d4 <main+0x5e4>)
 8002746:	481e      	ldr	r0, [pc, #120]	; (80027c0 <main+0x5d0>)
 8002748:	f00e fae4 	bl	8010d14 <f_write>
 800274c:	4603      	mov	r3, r0
 800274e:	461a      	mov	r2, r3
 8002750:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <main+0x5d4>)
 8002752:	701a      	strb	r2, [r3, #0]
				for(int j=0;j<ack;j++){
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	3301      	adds	r3, #1
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <main+0x5e8>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	4293      	cmp	r3, r2
 8002764:	dbdb      	blt.n	800271e <main+0x52e>
				}

			   if((byteswritten == 0) || (res != FR_OK))
 8002766:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <main+0x5c8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <main+0x586>
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <main+0x5d4>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <main+0x58c>
			   {
				 /* 'STM32.TXT' file Write or EOF Error */
				 Error_Handler();
 8002776:	f000 fff5 	bl	8003764 <Error_Handler>
 800277a:	e002      	b.n	8002782 <main+0x592>
			   }
			   else
			   {
				 /*##-6- Close the open text file #################################*/
				 f_close(&SDFile);
 800277c:	4810      	ldr	r0, [pc, #64]	; (80027c0 <main+0x5d0>)
 800277e:	f00e fcbc 	bl	80110fa <f_close>
			 }
		   }
		 }

	   /*##-11- Unlink the micro SD disk I/O driver ###############################*/
	   FATFS_UnLinkDriver(SDPath);
 8002782:	481e      	ldr	r0, [pc, #120]	; (80027fc <main+0x60c>)
 8002784:	f00f f9a4 	bl	8011ad0 <FATFS_UnLinkDriver>

	   /* Réinitialiser à 0 à la fin de stockage */

	   s=0;
 8002788:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <main+0x610>)
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]

	   /* Revenir à une des pages aprés que le sotckage termine */

	   if(page==0)
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <main+0x614>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d105      	bne.n	80027a2 <main+0x5b2>
		   BSP_LCD_DrawBitmap(0, 0, (uint8_t *)file3);
 8002796:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <main+0x618>)
 8002798:	2100      	movs	r1, #0
 800279a:	2000      	movs	r0, #0
 800279c:	f002 fd62 	bl	8005264 <BSP_LCD_DrawBitmap>
 80027a0:	e03f      	b.n	8002822 <main+0x632>
	   else if(page==1)
 80027a2:	4b18      	ldr	r3, [pc, #96]	; (8002804 <main+0x614>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d132      	bne.n	8002810 <main+0x620>
		   BSP_LCD_DrawBitmap(0, 0, (uint8_t *)file2);
 80027aa:	4a18      	ldr	r2, [pc, #96]	; (800280c <main+0x61c>)
 80027ac:	2100      	movs	r1, #0
 80027ae:	2000      	movs	r0, #0
 80027b0:	f002 fd58 	bl	8005264 <BSP_LCD_DrawBitmap>
 80027b4:	e035      	b.n	8002822 <main+0x632>
 80027b6:	bf00      	nop
 80027b8:	200067d4 	.word	0x200067d4
 80027bc:	20004f1c 	.word	0x20004f1c
 80027c0:	20037eb8 	.word	0x20037eb8
 80027c4:	200067d0 	.word	0x200067d0
 80027c8:	20000004 	.word	0x20000004
 80027cc:	200069d8 	.word	0x200069d8
 80027d0:	08014894 	.word	0x08014894
 80027d4:	20004e4c 	.word	0x20004e4c
 80027d8:	20005036 	.word	0x20005036
 80027dc:	20000020 	.word	0x20000020
 80027e0:	20010618 	.word	0x20010618
 80027e4:	20000050 	.word	0x20000050
 80027e8:	2001a258 	.word	0x2001a258
 80027ec:	20000068 	.word	0x20000068
 80027f0:	2002dad8 	.word	0x2002dad8
 80027f4:	20000038 	.word	0x20000038
 80027f8:	20023e98 	.word	0x20023e98
 80027fc:	20037c84 	.word	0x20037c84
 8002800:	20037718 	.word	0x20037718
 8002804:	200040e2 	.word	0x200040e2
 8002808:	080149d4 	.word	0x080149d4
 800280c:	08094244 	.word	0x08094244
	   else if(page==2)
 8002810:	4b92      	ldr	r3, [pc, #584]	; (8002a5c <main+0x86c>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d104      	bne.n	8002822 <main+0x632>
		   BSP_LCD_DrawBitmap(0, 0, (uint8_t *)file1);
 8002818:	4a91      	ldr	r2, [pc, #580]	; (8002a60 <main+0x870>)
 800281a:	2100      	movs	r1, #0
 800281c:	2000      	movs	r0, #0
 800281e:	f002 fd21 	bl	8005264 <BSP_LCD_DrawBitmap>
	   else{}



		previousMinutes4 = currentMinutes; // Mettre à jour le temps précédent
 8002822:	4a90      	ldr	r2, [pc, #576]	; (8002a64 <main+0x874>)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	6013      	str	r3, [r2, #0]
	}


	  /* Si l'utilisateur a choisi le  mode Secondes */

	  if(k==0) {
 8002828:	4b8f      	ldr	r3, [pc, #572]	; (8002a68 <main+0x878>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d150      	bne.n	80028d2 <main+0x6e2>
		  if ((currentSeconds - previousSeconds2) >= acquisition) {
 8002830:	4b8e      	ldr	r3, [pc, #568]	; (8002a6c <main+0x87c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	4a8d      	ldr	r2, [pc, #564]	; (8002a70 <main+0x880>)
 800283a:	7812      	ldrb	r2, [r2, #0]
 800283c:	4293      	cmp	r3, r2
 800283e:	f0c0 8097 	bcc.w	8002970 <main+0x780>
			  fonc_pour_synchroniser_capteurs();
 8002842:	f000 fbe3 	bl	800300c <fonc_pour_synchroniser_capteurs>
			  direction_wind();
 8002846:	f000 fdeb 	bl	8003420 <direction_wind>
			  calcul_vitesse();
 800284a:	f000 ff4d 	bl	80036e8 <calcul_vitesse>
			  tab_temp[s]= temperature_degC;
 800284e:	4b89      	ldr	r3, [pc, #548]	; (8002a74 <main+0x884>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a89      	ldr	r2, [pc, #548]	; (8002a78 <main+0x888>)
 8002854:	6812      	ldr	r2, [r2, #0]
 8002856:	4989      	ldr	r1, [pc, #548]	; (8002a7c <main+0x88c>)
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	601a      	str	r2, [r3, #0]
			  tab_humid[s]= humidity_perc;
 800285e:	4b85      	ldr	r3, [pc, #532]	; (8002a74 <main+0x884>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a87      	ldr	r2, [pc, #540]	; (8002a80 <main+0x890>)
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	4987      	ldr	r1, [pc, #540]	; (8002a84 <main+0x894>)
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	601a      	str	r2, [r3, #0]
			  tab_pres[s]= pressure_hPa;
 800286e:	4b81      	ldr	r3, [pc, #516]	; (8002a74 <main+0x884>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a85      	ldr	r2, [pc, #532]	; (8002a88 <main+0x898>)
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	4985      	ldr	r1, [pc, #532]	; (8002a8c <main+0x89c>)
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	601a      	str	r2, [r3, #0]
			  tab_wind[s]= vitesse_total;
 800287e:	4b7d      	ldr	r3, [pc, #500]	; (8002a74 <main+0x884>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a83      	ldr	r2, [pc, #524]	; (8002a90 <main+0x8a0>)
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	4983      	ldr	r1, [pc, #524]	; (8002a94 <main+0x8a4>)
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	601a      	str	r2, [r3, #0]
			  tab_run[s]= quantPluie;
 800288e:	4b79      	ldr	r3, [pc, #484]	; (8002a74 <main+0x884>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a81      	ldr	r2, [pc, #516]	; (8002a98 <main+0x8a8>)
 8002894:	6812      	ldr	r2, [r2, #0]
 8002896:	4981      	ldr	r1, [pc, #516]	; (8002a9c <main+0x8ac>)
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	601a      	str	r2, [r3, #0]

			  s++;
 800289e:	4b75      	ldr	r3, [pc, #468]	; (8002a74 <main+0x884>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3301      	adds	r3, #1
 80028a4:	4a73      	ldr	r2, [pc, #460]	; (8002a74 <main+0x884>)
 80028a6:	6013      	str	r3, [r2, #0]

			  HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_10);
 80028a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028ac:	487c      	ldr	r0, [pc, #496]	; (8002aa0 <main+0x8b0>)
 80028ae:	f005 ff1c 	bl	80086ea <HAL_GPIO_TogglePin>
			  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_9, 0);
 80028b2:	2200      	movs	r2, #0
 80028b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028b8:	4879      	ldr	r0, [pc, #484]	; (8002aa0 <main+0x8b0>)
 80028ba:	f005 fefd 	bl	80086b8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, 1);
 80028be:	2201      	movs	r2, #1
 80028c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028c4:	4876      	ldr	r0, [pc, #472]	; (8002aa0 <main+0x8b0>)
 80028c6:	f005 fef7 	bl	80086b8 <HAL_GPIO_WritePin>

			  previousSeconds2 = currentSeconds; // Mettre à jour le temps précédent
 80028ca:	4a68      	ldr	r2, [pc, #416]	; (8002a6c <main+0x87c>)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	e04e      	b.n	8002970 <main+0x780>
		  }

	  /* Si l'utilisateur a choisi le mode Minutes */

	  }else {
		  if ((currentMinutes - previousMinutes) >= acquisition) {
 80028d2:	4b74      	ldr	r3, [pc, #464]	; (8002aa4 <main+0x8b4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	4a65      	ldr	r2, [pc, #404]	; (8002a70 <main+0x880>)
 80028dc:	7812      	ldrb	r2, [r2, #0]
 80028de:	4293      	cmp	r3, r2
 80028e0:	d346      	bcc.n	8002970 <main+0x780>

			  fonc_pour_synchroniser_capteurs();
 80028e2:	f000 fb93 	bl	800300c <fonc_pour_synchroniser_capteurs>
			  direction_wind();
 80028e6:	f000 fd9b 	bl	8003420 <direction_wind>
			  calcul_vitesse();
 80028ea:	f000 fefd 	bl	80036e8 <calcul_vitesse>

			  tab_temp[s]= temperature_degC;
 80028ee:	4b61      	ldr	r3, [pc, #388]	; (8002a74 <main+0x884>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a61      	ldr	r2, [pc, #388]	; (8002a78 <main+0x888>)
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	4961      	ldr	r1, [pc, #388]	; (8002a7c <main+0x88c>)
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	601a      	str	r2, [r3, #0]
			  tab_humid[s]= humidity_perc;
 80028fe:	4b5d      	ldr	r3, [pc, #372]	; (8002a74 <main+0x884>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a5f      	ldr	r2, [pc, #380]	; (8002a80 <main+0x890>)
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	495f      	ldr	r1, [pc, #380]	; (8002a84 <main+0x894>)
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	601a      	str	r2, [r3, #0]
			  tab_pres[s]= pressure_hPa;
 800290e:	4b59      	ldr	r3, [pc, #356]	; (8002a74 <main+0x884>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a5d      	ldr	r2, [pc, #372]	; (8002a88 <main+0x898>)
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	495d      	ldr	r1, [pc, #372]	; (8002a8c <main+0x89c>)
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	601a      	str	r2, [r3, #0]
			  tab_run[s]= quantPluie;
 800291e:	4b55      	ldr	r3, [pc, #340]	; (8002a74 <main+0x884>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a5d      	ldr	r2, [pc, #372]	; (8002a98 <main+0x8a8>)
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	495d      	ldr	r1, [pc, #372]	; (8002a9c <main+0x8ac>)
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	601a      	str	r2, [r3, #0]
			  tab_wind[s]= vitesse_total;
 800292e:	4b51      	ldr	r3, [pc, #324]	; (8002a74 <main+0x884>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a57      	ldr	r2, [pc, #348]	; (8002a90 <main+0x8a0>)
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	4957      	ldr	r1, [pc, #348]	; (8002a94 <main+0x8a4>)
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	601a      	str	r2, [r3, #0]
			  s++;
 800293e:	4b4d      	ldr	r3, [pc, #308]	; (8002a74 <main+0x884>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	4a4b      	ldr	r2, [pc, #300]	; (8002a74 <main+0x884>)
 8002946:	6013      	str	r3, [r2, #0]

			  HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_10);
 8002948:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800294c:	4854      	ldr	r0, [pc, #336]	; (8002aa0 <main+0x8b0>)
 800294e:	f005 fecc 	bl	80086ea <HAL_GPIO_TogglePin>
			  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_9, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002958:	4851      	ldr	r0, [pc, #324]	; (8002aa0 <main+0x8b0>)
 800295a:	f005 fead 	bl	80086b8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, 1);
 800295e:	2201      	movs	r2, #1
 8002960:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002964:	484e      	ldr	r0, [pc, #312]	; (8002aa0 <main+0x8b0>)
 8002966:	f005 fea7 	bl	80086b8 <HAL_GPIO_WritePin>

			  previousMinutes = currentMinutes; // Mettre à jour le temps précédent
 800296a:	4a4e      	ldr	r2, [pc, #312]	; (8002aa4 <main+0x8b4>)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	6013      	str	r3, [r2, #0]
		  }
	  }

//***************************************************   PAGES   *****************************************************

	  if(page==0){
 8002970:	4b3a      	ldr	r3, [pc, #232]	; (8002a5c <main+0x86c>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d11d      	bne.n	80029b4 <main+0x7c4>
		  if ((currentSeconds - previousSeconds1) >= 1) {
 8002978:	4b4b      	ldr	r3, [pc, #300]	; (8002aa8 <main+0x8b8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	429a      	cmp	r2, r3
 8002980:	d005      	beq.n	800298e <main+0x79e>

			  	  /*  Afficher le Header plus l'heure et la date exacte  */

			  	  LCD_LOG_SetHeader((uint8_t *) buff2);
 8002982:	484a      	ldr	r0, [pc, #296]	; (8002aac <main+0x8bc>)
 8002984:	f7fe ff72 	bl	800186c <LCD_LOG_SetHeader>
				  previousSeconds1 = currentSeconds; // Mettre à jour le temps précédent
 8002988:	4a47      	ldr	r2, [pc, #284]	; (8002aa8 <main+0x8b8>)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	6013      	str	r3, [r2, #0]
		  }

		  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_9, 0);
 800298e:	2200      	movs	r2, #0
 8002990:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002994:	4842      	ldr	r0, [pc, #264]	; (8002aa0 <main+0x8b0>)
 8002996:	f005 fe8f 	bl	80086b8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, 1);
 800299a:	2201      	movs	r2, #1
 800299c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029a0:	483f      	ldr	r0, [pc, #252]	; (8002aa0 <main+0x8b0>)
 80029a2:	f005 fe89 	bl	80086b8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029ac:	483c      	ldr	r0, [pc, #240]	; (8002aa0 <main+0x8b0>)
 80029ae:	f005 fe83 	bl	80086b8 <HAL_GPIO_WritePin>
 80029b2:	e15d      	b.n	8002c70 <main+0xa80>


	  }else if (page == 1) {
 80029b4:	4b29      	ldr	r3, [pc, #164]	; (8002a5c <main+0x86c>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	f040 8087 	bne.w	8002acc <main+0x8dc>

		  	  	  	   /* Afficher les valeurs des 3 capteurs Humidité-Pression-Température sur la page 1 */

					   sprintf((char *)tx_buffer_lps22hh, "Temperature is %.2fC\r\n", temperature_degC);
 80029be:	4b2e      	ldr	r3, [pc, #184]	; (8002a78 <main+0x888>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fd fde0 	bl	8000588 <__aeabi_f2d>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4938      	ldr	r1, [pc, #224]	; (8002ab0 <main+0x8c0>)
 80029ce:	4839      	ldr	r0, [pc, #228]	; (8002ab4 <main+0x8c4>)
 80029d0:	f00f fdb4 	bl	801253c <siprintf>
					   BSP_LCD_SetTextColor(LCD_COLOR_BLUE); // Couleur du texte
 80029d4:	4838      	ldr	r0, [pc, #224]	; (8002ab8 <main+0x8c8>)
 80029d6:	f002 f98f 	bl	8004cf8 <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(28, 133, (uint8_t *)tx_buffer_lps22hh, LEFT_MODE);
 80029da:	2303      	movs	r3, #3
 80029dc:	4a35      	ldr	r2, [pc, #212]	; (8002ab4 <main+0x8c4>)
 80029de:	2185      	movs	r1, #133	; 0x85
 80029e0:	201c      	movs	r0, #28
 80029e2:	f002 fa57 	bl	8004e94 <BSP_LCD_DisplayStringAt>

					   sprintf((char *)tx_buffer_lps22hh2, "Pressure is %.2f hPa\r\n", pressure_hPa);
 80029e6:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <main+0x898>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fd fdcc 	bl	8000588 <__aeabi_f2d>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4931      	ldr	r1, [pc, #196]	; (8002abc <main+0x8cc>)
 80029f6:	4832      	ldr	r0, [pc, #200]	; (8002ac0 <main+0x8d0>)
 80029f8:	f00f fda0 	bl	801253c <siprintf>
					   BSP_LCD_SetTextColor(LCD_COLOR_BLUE); // Couleur du texte
 80029fc:	482e      	ldr	r0, [pc, #184]	; (8002ab8 <main+0x8c8>)
 80029fe:	f002 f97b 	bl	8004cf8 <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(10, 230, (uint8_t *)tx_buffer_lps22hh2, CENTER_MODE);
 8002a02:	2301      	movs	r3, #1
 8002a04:	4a2e      	ldr	r2, [pc, #184]	; (8002ac0 <main+0x8d0>)
 8002a06:	21e6      	movs	r1, #230	; 0xe6
 8002a08:	200a      	movs	r0, #10
 8002a0a:	f002 fa43 	bl	8004e94 <BSP_LCD_DisplayStringAt>

					   sprintf((char *)tx_buffer_hts221, "Humidity is %.2f\r\n", humidity_perc);
 8002a0e:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <main+0x890>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fd fdb8 	bl	8000588 <__aeabi_f2d>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4929      	ldr	r1, [pc, #164]	; (8002ac4 <main+0x8d4>)
 8002a1e:	482a      	ldr	r0, [pc, #168]	; (8002ac8 <main+0x8d8>)
 8002a20:	f00f fd8c 	bl	801253c <siprintf>
					   BSP_LCD_SetTextColor(LCD_COLOR_BLUE); // Couleur du texte
 8002a24:	4824      	ldr	r0, [pc, #144]	; (8002ab8 <main+0x8c8>)
 8002a26:	f002 f967 	bl	8004cf8 <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(89, 133, (uint8_t *)tx_buffer_hts221, RIGHT_MODE);
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	4a26      	ldr	r2, [pc, #152]	; (8002ac8 <main+0x8d8>)
 8002a2e:	2185      	movs	r1, #133	; 0x85
 8002a30:	2059      	movs	r0, #89	; 0x59
 8002a32:	f002 fa2f 	bl	8004e94 <BSP_LCD_DisplayStringAt>

					  HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_9);
 8002a36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a3a:	4819      	ldr	r0, [pc, #100]	; (8002aa0 <main+0x8b0>)
 8002a3c:	f005 fe55 	bl	80086ea <HAL_GPIO_TogglePin>
					  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, 0);
 8002a40:	2200      	movs	r2, #0
 8002a42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a46:	4816      	ldr	r0, [pc, #88]	; (8002aa0 <main+0x8b0>)
 8002a48:	f005 fe36 	bl	80086b8 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a52:	4813      	ldr	r0, [pc, #76]	; (8002aa0 <main+0x8b0>)
 8002a54:	f005 fe30 	bl	80086b8 <HAL_GPIO_WritePin>
 8002a58:	e10a      	b.n	8002c70 <main+0xa80>
 8002a5a:	bf00      	nop
 8002a5c:	200040e2 	.word	0x200040e2
 8002a60:	0805460c 	.word	0x0805460c
 8002a64:	20004f18 	.word	0x20004f18
 8002a68:	20005037 	.word	0x20005037
 8002a6c:	20004f04 	.word	0x20004f04
 8002a70:	20000000 	.word	0x20000000
 8002a74:	20037718 	.word	0x20037718
 8002a78:	200040f0 	.word	0x200040f0
 8002a7c:	200069d8 	.word	0x200069d8
 8002a80:	200048cc 	.word	0x200048cc
 8002a84:	20010618 	.word	0x20010618
 8002a88:	200040ec 	.word	0x200040ec
 8002a8c:	2001a258 	.word	0x2001a258
 8002a90:	20005828 	.word	0x20005828
 8002a94:	2002dad8 	.word	0x2002dad8
 8002a98:	20005040 	.word	0x20005040
 8002a9c:	20023e98 	.word	0x20023e98
 8002aa0:	40021c00 	.word	0x40021c00
 8002aa4:	20004f10 	.word	0x20004f10
 8002aa8:	20004f00 	.word	0x20004f00
 8002aac:	20004f1c 	.word	0x20004f1c
 8002ab0:	0801489c 	.word	0x0801489c
 8002ab4:	200040f8 	.word	0x200040f8
 8002ab8:	ff0000ff 	.word	0xff0000ff
 8002abc:	080148b4 	.word	0x080148b4
 8002ac0:	200044e0 	.word	0x200044e0
 8002ac4:	080148cc 	.word	0x080148cc
 8002ac8:	200048d4 	.word	0x200048d4
		}
		else if (page == 2) {
 8002acc:	4bab      	ldr	r3, [pc, #684]	; (8002d7c <main+0xb8c>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d149      	bne.n	8002b68 <main+0x978>

						/* Afficher les valeurs des 3 capteurs Pluie-vitesse-direction sur la page 2 */

						sprintf((char *)tab_pluie, "Rain is %.2f mm\r\n", quantPluie);
 8002ad4:	4baa      	ldr	r3, [pc, #680]	; (8002d80 <main+0xb90>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd fd55 	bl	8000588 <__aeabi_f2d>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	49a8      	ldr	r1, [pc, #672]	; (8002d84 <main+0xb94>)
 8002ae4:	48a8      	ldr	r0, [pc, #672]	; (8002d88 <main+0xb98>)
 8002ae6:	f00f fd29 	bl	801253c <siprintf>
						BSP_LCD_SetTextColor(LCD_COLOR_BLUE); // Couleur du texte
 8002aea:	48a8      	ldr	r0, [pc, #672]	; (8002d8c <main+0xb9c>)
 8002aec:	f002 f904 	bl	8004cf8 <BSP_LCD_SetTextColor>
						BSP_LCD_DisplayStringAt(55, 133, (uint8_t *)tab_pluie, LEFT_MODE);
 8002af0:	2303      	movs	r3, #3
 8002af2:	4aa5      	ldr	r2, [pc, #660]	; (8002d88 <main+0xb98>)
 8002af4:	2185      	movs	r1, #133	; 0x85
 8002af6:	2037      	movs	r0, #55	; 0x37
 8002af8:	f002 f9cc 	bl	8004e94 <BSP_LCD_DisplayStringAt>

						sprintf((char *)tab_vitesse, "Wind is %.2f km/h\r\n", vitesse_total);
 8002afc:	4ba4      	ldr	r3, [pc, #656]	; (8002d90 <main+0xba0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fd fd41 	bl	8000588 <__aeabi_f2d>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	49a2      	ldr	r1, [pc, #648]	; (8002d94 <main+0xba4>)
 8002b0c:	48a2      	ldr	r0, [pc, #648]	; (8002d98 <main+0xba8>)
 8002b0e:	f00f fd15 	bl	801253c <siprintf>
						BSP_LCD_SetTextColor(LCD_COLOR_BLUE); // Couleur du texte
 8002b12:	489e      	ldr	r0, [pc, #632]	; (8002d8c <main+0xb9c>)
 8002b14:	f002 f8f0 	bl	8004cf8 <BSP_LCD_SetTextColor>
						BSP_LCD_DisplayStringAt(22, 230, (uint8_t *)tab_vitesse, CENTER_MODE);
 8002b18:	2301      	movs	r3, #1
 8002b1a:	4a9f      	ldr	r2, [pc, #636]	; (8002d98 <main+0xba8>)
 8002b1c:	21e6      	movs	r1, #230	; 0xe6
 8002b1e:	2016      	movs	r0, #22
 8002b20:	f002 f9b8 	bl	8004e94 <BSP_LCD_DisplayStringAt>

						sprintf((char *)tab_direction, " %s\r\n", direction);
 8002b24:	4b9d      	ldr	r3, [pc, #628]	; (8002d9c <main+0xbac>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	499d      	ldr	r1, [pc, #628]	; (8002da0 <main+0xbb0>)
 8002b2c:	489d      	ldr	r0, [pc, #628]	; (8002da4 <main+0xbb4>)
 8002b2e:	f00f fd05 	bl	801253c <siprintf>
						BSP_LCD_SetTextColor(LCD_COLOR_BLUE); // Couleur du texte
 8002b32:	4896      	ldr	r0, [pc, #600]	; (8002d8c <main+0xb9c>)
 8002b34:	f002 f8e0 	bl	8004cf8 <BSP_LCD_SetTextColor>
						BSP_LCD_DisplayStringAt(130, 133, (uint8_t *)tab_direction, RIGHT_MODE);
 8002b38:	2302      	movs	r3, #2
 8002b3a:	4a9a      	ldr	r2, [pc, #616]	; (8002da4 <main+0xbb4>)
 8002b3c:	2185      	movs	r1, #133	; 0x85
 8002b3e:	2082      	movs	r0, #130	; 0x82
 8002b40:	f002 f9a8 	bl	8004e94 <BSP_LCD_DisplayStringAt>


						HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_9);
 8002b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b48:	4897      	ldr	r0, [pc, #604]	; (8002da8 <main+0xbb8>)
 8002b4a:	f005 fdce 	bl	80086ea <HAL_GPIO_TogglePin>
						HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b54:	4894      	ldr	r0, [pc, #592]	; (8002da8 <main+0xbb8>)
 8002b56:	f005 fdaf 	bl	80086b8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b60:	4891      	ldr	r0, [pc, #580]	; (8002da8 <main+0xbb8>)
 8002b62:	f005 fda9 	bl	80086b8 <HAL_GPIO_WritePin>
 8002b66:	e083      	b.n	8002c70 <main+0xa80>
		}
		else if (page == 3){
 8002b68:	4b84      	ldr	r3, [pc, #528]	; (8002d7c <main+0xb8c>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d17f      	bne.n	8002c70 <main+0xa80>

						/* Synchronisation des capteurs + allumage de la led */

						fonc_pour_synchroniser_capteurs();
 8002b70:	f000 fa4c 	bl	800300c <fonc_pour_synchroniser_capteurs>

					  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_9, 0);
 8002b74:	2200      	movs	r2, #0
 8002b76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b7a:	488b      	ldr	r0, [pc, #556]	; (8002da8 <main+0xbb8>)
 8002b7c:	f005 fd9c 	bl	80086b8 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, 1);
 8002b80:	2201      	movs	r2, #1
 8002b82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b86:	4888      	ldr	r0, [pc, #544]	; (8002da8 <main+0xbb8>)
 8002b88:	f005 fd96 	bl	80086b8 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b92:	4885      	ldr	r0, [pc, #532]	; (8002da8 <main+0xbb8>)
 8002b94:	f005 fd90 	bl	80086b8 <HAL_GPIO_WritePin>

					/* Acquisition et dessinage d'une courbe chaque une seconde donc courbe en temps réel */

					if ((currentSeconds - previousSeconds1) >= 1) {
 8002b98:	4b84      	ldr	r3, [pc, #528]	; (8002dac <main+0xbbc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d066      	beq.n	8002c70 <main+0xa80>

						temperature_data[data_index] = temperature_degC;
 8002ba2:	4b83      	ldr	r3, [pc, #524]	; (8002db0 <main+0xbc0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a83      	ldr	r2, [pc, #524]	; (8002db4 <main+0xbc4>)
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	4983      	ldr	r1, [pc, #524]	; (8002db8 <main+0xbc8>)
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	601a      	str	r2, [r3, #0]

						  data_index = (data_index + 1) % MAX_DATA_POINTS;
 8002bb2:	4b7f      	ldr	r3, [pc, #508]	; (8002db0 <main+0xbc0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	4b80      	ldr	r3, [pc, #512]	; (8002dbc <main+0xbcc>)
 8002bba:	fb83 1302 	smull	r1, r3, r3, r2
 8002bbe:	1159      	asrs	r1, r3, #5
 8002bc0:	17d3      	asrs	r3, r2, #31
 8002bc2:	1acb      	subs	r3, r1, r3
 8002bc4:	2164      	movs	r1, #100	; 0x64
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	4a78      	ldr	r2, [pc, #480]	; (8002db0 <main+0xbc0>)
 8002bce:	6013      	str	r3, [r2, #0]

						  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8002bd0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002bd4:	f002 f8f2 	bl	8004dbc <BSP_LCD_Clear>
						  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002bd8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002bdc:	f002 f88c 	bl	8004cf8 <BSP_LCD_SetTextColor>
						  BSP_LCD_FillRect(70, 50, 320, 200);
 8002be0:	23c8      	movs	r3, #200	; 0xc8
 8002be2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002be6:	2132      	movs	r1, #50	; 0x32
 8002be8:	2046      	movs	r0, #70	; 0x46
 8002bea:	f002 fbed 	bl	80053c8 <BSP_LCD_FillRect>

						  BSP_LCD_SetTextColor(LCD_COLOR_GRAY);
 8002bee:	4874      	ldr	r0, [pc, #464]	; (8002dc0 <main+0xbd0>)
 8002bf0:	f002 f882 	bl	8004cf8 <BSP_LCD_SetTextColor>
						  BSP_LCD_DrawVLine(70, 50, 200);
 8002bf4:	22c8      	movs	r2, #200	; 0xc8
 8002bf6:	2132      	movs	r1, #50	; 0x32
 8002bf8:	2046      	movs	r0, #70	; 0x46
 8002bfa:	f002 fa89 	bl	8005110 <BSP_LCD_DrawVLine>
						  BSP_LCD_DrawHLine(70, 250, 350);
 8002bfe:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8002c02:	21fa      	movs	r1, #250	; 0xfa
 8002c04:	2046      	movs	r0, #70	; 0x46
 8002c06:	f002 fa25 	bl	8005054 <BSP_LCD_DrawHLine>

						  float scale_factor1 = 121 / 40.0;
 8002c0a:	4b6e      	ldr	r3, [pc, #440]	; (8002dc4 <main+0xbd4>)
 8002c0c:	60fb      	str	r3, [r7, #12]
						  int i;

						  /* Draw the temperature points (par point) on the graph */

						  for ( i = 0; i < data_index && i < MAX_DATA_POINTS; i++) {
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	e022      	b.n	8002c5a <main+0xa6a>

							  int x1 = 80 + i * (320 / MAX_DATA_POINTS);
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3350      	adds	r3, #80	; 0x50
 8002c1e:	60bb      	str	r3, [r7, #8]
							  int y1 = 50 + 200 - (int)(temperature_data[i] * scale_factor1);
 8002c20:	4a65      	ldr	r2, [pc, #404]	; (8002db8 <main+0xbc8>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	ed93 7a00 	vldr	s14, [r3]
 8002c2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c38:	ee17 3a90 	vmov	r3, s15
 8002c3c:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8002c40:	607b      	str	r3, [r7, #4]

							  /* Draw a point on the LCD at (x1, y1) */

							  BSP_LCD_DrawPixel(x1, y1, LCD_COLOR_GREEN);
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	b291      	uxth	r1, r2
 8002c4a:	f04f 22ff 	mov.w	r2, #4278255360	; 0xff00ff00
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f002 fac0 	bl	80051d4 <BSP_LCD_DrawPixel>
						  for ( i = 0; i < data_index && i < MAX_DATA_POINTS; i++) {
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	3301      	adds	r3, #1
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	4b55      	ldr	r3, [pc, #340]	; (8002db0 <main+0xbc0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	da02      	bge.n	8002c6a <main+0xa7a>
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2b63      	cmp	r3, #99	; 0x63
 8002c68:	ddd4      	ble.n	8002c14 <main+0xa24>
						  }

						  previousSeconds1 = currentSeconds; // Mettre à jour le temps précédent
 8002c6a:	4a50      	ldr	r2, [pc, #320]	; (8002dac <main+0xbbc>)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	6013      	str	r3, [r2, #0]

		}

	  /* Si l'utilisateur a touché l'écran */

	   if (ts_int == 1) {
 8002c70:	4b55      	ldr	r3, [pc, #340]	; (8002dc8 <main+0xbd8>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	f47f ab1a 	bne.w	80022ae <main+0xbe>
		   q=0;
 8002c7a:	4b54      	ldr	r3, [pc, #336]	; (8002dcc <main+0xbdc>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
		   /* Si le click vient de la page 0 */

		   if(page==0 && (isPointInsideButton3(x, y) || isPointInsideButton4(x, y) || isPointInsideButton5(x, y) || isPointInsideButton6(x, y)) ){
 8002c80:	4b3e      	ldr	r3, [pc, #248]	; (8002d7c <main+0xb8c>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f040 80dd 	bne.w	8002e44 <main+0xc54>
 8002c8a:	4b51      	ldr	r3, [pc, #324]	; (8002dd0 <main+0xbe0>)
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	4a51      	ldr	r2, [pc, #324]	; (8002dd4 <main+0xbe4>)
 8002c90:	8812      	ldrh	r2, [r2, #0]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fa18 	bl	80020ca <isPointInsideButton3>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d121      	bne.n	8002ce4 <main+0xaf4>
 8002ca0:	4b4b      	ldr	r3, [pc, #300]	; (8002dd0 <main+0xbe0>)
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	4a4b      	ldr	r2, [pc, #300]	; (8002dd4 <main+0xbe4>)
 8002ca6:	8812      	ldrh	r2, [r2, #0]
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fa2a 	bl	8002104 <isPointInsideButton4>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d116      	bne.n	8002ce4 <main+0xaf4>
 8002cb6:	4b46      	ldr	r3, [pc, #280]	; (8002dd0 <main+0xbe0>)
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	4a46      	ldr	r2, [pc, #280]	; (8002dd4 <main+0xbe4>)
 8002cbc:	8812      	ldrh	r2, [r2, #0]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fa3c 	bl	800213e <isPointInsideButton5>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <main+0xaf4>
 8002ccc:	4b40      	ldr	r3, [pc, #256]	; (8002dd0 <main+0xbe0>)
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	4a40      	ldr	r2, [pc, #256]	; (8002dd4 <main+0xbe4>)
 8002cd2:	8812      	ldrh	r2, [r2, #0]
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fa4e 	bl	8002178 <isPointInsideButton6>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 80b0 	beq.w	8002e44 <main+0xc54>

			   	   /* Si le click vient de coté ou en incrémente */

				   if (isPointInsideButton3(x, y)) {
 8002ce4:	4b3a      	ldr	r3, [pc, #232]	; (8002dd0 <main+0xbe0>)
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	4a3a      	ldr	r2, [pc, #232]	; (8002dd4 <main+0xbe4>)
 8002cea:	8812      	ldrh	r2, [r2, #0]
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff f9eb 	bl	80020ca <isPointInsideButton3>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d01a      	beq.n	8002d30 <main+0xb40>
						 if (acquisition < 60) {
 8002cfa:	4b37      	ldr	r3, [pc, #220]	; (8002dd8 <main+0xbe8>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b3b      	cmp	r3, #59	; 0x3b
 8002d00:	d805      	bhi.n	8002d0e <main+0xb1e>
							 acquisition++;
 8002d02:	4b35      	ldr	r3, [pc, #212]	; (8002dd8 <main+0xbe8>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	3301      	adds	r3, #1
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	4b33      	ldr	r3, [pc, #204]	; (8002dd8 <main+0xbe8>)
 8002d0c:	701a      	strb	r2, [r3, #0]

						 }

						   /* Affichage de la valeur d'acquisition choisi par l'utilisateur */

						   sprintf((char *)acq, " %d \r\n", acquisition);
 8002d0e:	4b32      	ldr	r3, [pc, #200]	; (8002dd8 <main+0xbe8>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	4931      	ldr	r1, [pc, #196]	; (8002ddc <main+0xbec>)
 8002d16:	4832      	ldr	r0, [pc, #200]	; (8002de0 <main+0xbf0>)
 8002d18:	f00f fc10 	bl	801253c <siprintf>
						   BSP_LCD_SetTextColor(LCD_COLOR_BLUE); // Couleur du texte
 8002d1c:	481b      	ldr	r0, [pc, #108]	; (8002d8c <main+0xb9c>)
 8002d1e:	f001 ffeb 	bl	8004cf8 <BSP_LCD_SetTextColor>
						   BSP_LCD_DisplayStringAt(37, 170, (uint8_t *)acq, RIGHT_MODE);
 8002d22:	2302      	movs	r3, #2
 8002d24:	4a2e      	ldr	r2, [pc, #184]	; (8002de0 <main+0xbf0>)
 8002d26:	21aa      	movs	r1, #170	; 0xaa
 8002d28:	2025      	movs	r0, #37	; 0x25
 8002d2a:	f002 f8b3 	bl	8004e94 <BSP_LCD_DisplayStringAt>
				   if (isPointInsideButton3(x, y)) {
 8002d2e:	e0e3      	b.n	8002ef8 <main+0xd08>
					 }

				     /* Si le click vient de coté ou en décrémente */

					 else if (isPointInsideButton4(x, y)) {
 8002d30:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <main+0xbe0>)
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	4a27      	ldr	r2, [pc, #156]	; (8002dd4 <main+0xbe4>)
 8002d36:	8812      	ldrh	r2, [r2, #0]
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff f9e2 	bl	8002104 <isPointInsideButton4>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d04e      	beq.n	8002de4 <main+0xbf4>

						 if (acquisition > 1) {
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <main+0xbe8>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d905      	bls.n	8002d5a <main+0xb6a>
							 acquisition--;
 8002d4e:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <main+0xbe8>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <main+0xbe8>)
 8002d58:	701a      	strb	r2, [r3, #0]
						 }
							 sprintf((char *)acq, " %d \r\n", acquisition);
 8002d5a:	4b1f      	ldr	r3, [pc, #124]	; (8002dd8 <main+0xbe8>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	491e      	ldr	r1, [pc, #120]	; (8002ddc <main+0xbec>)
 8002d62:	481f      	ldr	r0, [pc, #124]	; (8002de0 <main+0xbf0>)
 8002d64:	f00f fbea 	bl	801253c <siprintf>
							BSP_LCD_SetTextColor(LCD_COLOR_BLUE); // Couleur du texte
 8002d68:	4808      	ldr	r0, [pc, #32]	; (8002d8c <main+0xb9c>)
 8002d6a:	f001 ffc5 	bl	8004cf8 <BSP_LCD_SetTextColor>
							BSP_LCD_DisplayStringAt(34, 170, (uint8_t *)acq, RIGHT_MODE);
 8002d6e:	2302      	movs	r3, #2
 8002d70:	4a1b      	ldr	r2, [pc, #108]	; (8002de0 <main+0xbf0>)
 8002d72:	21aa      	movs	r1, #170	; 0xaa
 8002d74:	2022      	movs	r0, #34	; 0x22
 8002d76:	f002 f88d 	bl	8004e94 <BSP_LCD_DisplayStringAt>
				   if (isPointInsideButton3(x, y)) {
 8002d7a:	e0bd      	b.n	8002ef8 <main+0xd08>
 8002d7c:	200040e2 	.word	0x200040e2
 8002d80:	20005040 	.word	0x20005040
 8002d84:	080148e0 	.word	0x080148e0
 8002d88:	20005044 	.word	0x20005044
 8002d8c:	ff0000ff 	.word	0xff0000ff
 8002d90:	20005828 	.word	0x20005828
 8002d94:	080148f4 	.word	0x080148f4
 8002d98:	20005830 	.word	0x20005830
 8002d9c:	20005434 	.word	0x20005434
 8002da0:	08014908 	.word	0x08014908
 8002da4:	20005438 	.word	0x20005438
 8002da8:	40021c00 	.word	0x40021c00
 8002dac:	20004f00 	.word	0x20004f00
 8002db0:	20004ee4 	.word	0x20004ee4
 8002db4:	200040f0 	.word	0x200040f0
 8002db8:	20004cbc 	.word	0x20004cbc
 8002dbc:	51eb851f 	.word	0x51eb851f
 8002dc0:	ff808080 	.word	0xff808080
 8002dc4:	4041999a 	.word	0x4041999a
 8002dc8:	200040dc 	.word	0x200040dc
 8002dcc:	20004f9e 	.word	0x20004f9e
 8002dd0:	200040de 	.word	0x200040de
 8002dd4:	200040e0 	.word	0x200040e0
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	08014910 	.word	0x08014910
 8002de0:	20004fa0 	.word	0x20004fa0

					 }

				     /* Si le click vient de coté ou en choisi le mode SECONDEs */

					 else if (isPointInsideButton5(x, y)) {
 8002de4:	4b49      	ldr	r3, [pc, #292]	; (8002f0c <main+0xd1c>)
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	4a49      	ldr	r2, [pc, #292]	; (8002f10 <main+0xd20>)
 8002dea:	8812      	ldrh	r2, [r2, #0]
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff f9a5 	bl	800213e <isPointInsideButton5>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00c      	beq.n	8002e14 <main+0xc24>
						   BSP_LCD_SetTextColor(LCD_COLOR_BLUE); // Couleur du texte
 8002dfa:	4846      	ldr	r0, [pc, #280]	; (8002f14 <main+0xd24>)
 8002dfc:	f001 ff7c 	bl	8004cf8 <BSP_LCD_SetTextColor>
						   BSP_LCD_DisplayStringAt(03, 209, (uint8_t *)" SECONDE(S) MODE ", RIGHT_MODE);
 8002e00:	2302      	movs	r3, #2
 8002e02:	4a45      	ldr	r2, [pc, #276]	; (8002f18 <main+0xd28>)
 8002e04:	21d1      	movs	r1, #209	; 0xd1
 8002e06:	2003      	movs	r0, #3
 8002e08:	f002 f844 	bl	8004e94 <BSP_LCD_DisplayStringAt>
						   k=0;
 8002e0c:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <main+0xd2c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
				   if (isPointInsideButton3(x, y)) {
 8002e12:	e071      	b.n	8002ef8 <main+0xd08>
					 }

				     /* Si le click vient de coté ou en choisi le mode MINUTEs */

					 else if (isPointInsideButton6(x, y)) {
 8002e14:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <main+0xd1c>)
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	4a3d      	ldr	r2, [pc, #244]	; (8002f10 <main+0xd20>)
 8002e1a:	8812      	ldrh	r2, [r2, #0]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff f9aa 	bl	8002178 <isPointInsideButton6>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d066      	beq.n	8002ef8 <main+0xd08>
						   BSP_LCD_SetTextColor(LCD_COLOR_BLUE); // Couleur du texte
 8002e2a:	483a      	ldr	r0, [pc, #232]	; (8002f14 <main+0xd24>)
 8002e2c:	f001 ff64 	bl	8004cf8 <BSP_LCD_SetTextColor>
						   BSP_LCD_DisplayStringAt(03, 209, (uint8_t *)" MINUTE(S) MODE ", RIGHT_MODE);
 8002e30:	2302      	movs	r3, #2
 8002e32:	4a3b      	ldr	r2, [pc, #236]	; (8002f20 <main+0xd30>)
 8002e34:	21d1      	movs	r1, #209	; 0xd1
 8002e36:	2003      	movs	r0, #3
 8002e38:	f002 f82c 	bl	8004e94 <BSP_LCD_DisplayStringAt>
						   k=1;
 8002e3c:	4b37      	ldr	r3, [pc, #220]	; (8002f1c <main+0xd2c>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
				   if (isPointInsideButton3(x, y)) {
 8002e42:	e059      	b.n	8002ef8 <main+0xd08>
					 }
		   }

		   /* Si le click vient de bouton HOME */

		   else if(page==0 && isPointInsideButton1(x, y))
 8002e44:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <main+0xd34>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10d      	bne.n	8002e68 <main+0xc78>
 8002e4c:	4b2f      	ldr	r3, [pc, #188]	; (8002f0c <main+0xd1c>)
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	4a2f      	ldr	r2, [pc, #188]	; (8002f10 <main+0xd20>)
 8002e52:	8812      	ldrh	r2, [r2, #0]
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f8ef 	bl	800203a <isPointInsideButton1>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <main+0xc78>
			   interface0();
 8002e62:	f000 f9db 	bl	800321c <interface0>
 8002e66:	e048      	b.n	8002efa <main+0xd0a>

		   /* Si le click vient de la page 1 et bouton NEXT */

		   else if(page == 1 && isPointInsideButton2(x, y))
 8002e68:	4b2e      	ldr	r3, [pc, #184]	; (8002f24 <main+0xd34>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d10d      	bne.n	8002e8c <main+0xc9c>
 8002e70:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <main+0xd1c>)
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <main+0xd20>)
 8002e76:	8812      	ldrh	r2, [r2, #0]
 8002e78:	4611      	mov	r1, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff f905 	bl	800208a <isPointInsideButton2>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <main+0xc9c>
			   interface1();
 8002e86:	f000 f9d9 	bl	800323c <interface1>
 8002e8a:	e036      	b.n	8002efa <main+0xd0a>

		   /* Si le click vient de la page 2 et bouton NEXT */

		   else if(page == 2 && isPointInsideButton2(x, y))
 8002e8c:	4b25      	ldr	r3, [pc, #148]	; (8002f24 <main+0xd34>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d10d      	bne.n	8002eb0 <main+0xcc0>
 8002e94:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <main+0xd1c>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	4a1d      	ldr	r2, [pc, #116]	; (8002f10 <main+0xd20>)
 8002e9a:	8812      	ldrh	r2, [r2, #0]
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff f8f3 	bl	800208a <isPointInsideButton2>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <main+0xcc0>
			   interface0();
 8002eaa:	f000 f9b7 	bl	800321c <interface0>
 8002eae:	e024      	b.n	8002efa <main+0xd0a>

		   /* Si le click vient de la page 1 et bouton TEMPERATURE */

		   else if(page == 1 && isPointInsideButton7(x, y))
 8002eb0:	4b1c      	ldr	r3, [pc, #112]	; (8002f24 <main+0xd34>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d10d      	bne.n	8002ed4 <main+0xce4>
 8002eb8:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <main+0xd1c>)
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <main+0xd20>)
 8002ebe:	8812      	ldrh	r2, [r2, #0]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff f975 	bl	80021b2 <isPointInsideButton7>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <main+0xce4>
			   interfaceGRAPH();
 8002ece:	f000 f9c5 	bl	800325c <interfaceGRAPH>
 8002ed2:	e012      	b.n	8002efa <main+0xd0a>

		   /* Si le click vient de la page 3 et bouton CENTRAL */

		   else if(page==3 && isPointInsideButton1(x, y))
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <main+0xd34>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d10e      	bne.n	8002efa <main+0xd0a>
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <main+0xd1c>)
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	4a0b      	ldr	r2, [pc, #44]	; (8002f10 <main+0xd20>)
 8002ee2:	8812      	ldrh	r2, [r2, #0]
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff f8a7 	bl	800203a <isPointInsideButton1>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <main+0xd0a>
			   interface0();
 8002ef2:	f000 f993 	bl	800321c <interface0>
 8002ef6:	e000      	b.n	8002efa <main+0xd0a>
				   if (isPointInsideButton3(x, y)) {
 8002ef8:	bf00      	nop

		   HAL_Delay(80);
 8002efa:	2050      	movs	r0, #80	; 0x50
 8002efc:	f003 fd4c 	bl	8006998 <HAL_Delay>
		   ts_int=0;
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <main+0xd38>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
  {
 8002f06:	f7ff b9d2 	b.w	80022ae <main+0xbe>
 8002f0a:	bf00      	nop
 8002f0c:	200040de 	.word	0x200040de
 8002f10:	200040e0 	.word	0x200040e0
 8002f14:	ff0000ff 	.word	0xff0000ff
 8002f18:	08014918 	.word	0x08014918
 8002f1c:	20005037 	.word	0x20005037
 8002f20:	0801492c 	.word	0x0801492c
 8002f24:	200040e2 	.word	0x200040e2
 8002f28:	200040dc 	.word	0x200040dc

08002f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b094      	sub	sp, #80	; 0x50
 8002f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f32:	f107 0320 	add.w	r3, r7, #32
 8002f36:	2230      	movs	r2, #48	; 0x30
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f00f fb61 	bl	8012602 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f40:	f107 030c 	add.w	r3, r7, #12
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f50:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <SystemClock_Config+0xd8>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	4a2b      	ldr	r2, [pc, #172]	; (8003004 <SystemClock_Config+0xd8>)
 8002f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5c:	4b29      	ldr	r3, [pc, #164]	; (8003004 <SystemClock_Config+0xd8>)
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f68:	4b27      	ldr	r3, [pc, #156]	; (8003008 <SystemClock_Config+0xdc>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a26      	ldr	r2, [pc, #152]	; (8003008 <SystemClock_Config+0xdc>)
 8002f6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	4b24      	ldr	r3, [pc, #144]	; (8003008 <SystemClock_Config+0xdc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f7c:	607b      	str	r3, [r7, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002f80:	2309      	movs	r3, #9
 8002f82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002f98:	2319      	movs	r3, #25
 8002f9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002f9c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002fa0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002fa6:	2309      	movs	r3, #9
 8002fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002faa:	f107 0320 	add.w	r3, r7, #32
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f006 fd02 	bl	80099b8 <HAL_RCC_OscConfig>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002fba:	f000 fbd3 	bl	8003764 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002fbe:	f006 fcab 	bl	8009918 <HAL_PWREx_EnableOverDrive>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002fc8:	f000 fbcc 	bl	8003764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fcc:	230f      	movs	r3, #15
 8002fce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002fd8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fe2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002fe4:	f107 030c 	add.w	r3, r7, #12
 8002fe8:	2107      	movs	r1, #7
 8002fea:	4618      	mov	r0, r3
 8002fec:	f006 ff88 	bl	8009f00 <HAL_RCC_ClockConfig>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002ff6:	f000 fbb5 	bl	8003764 <Error_Handler>
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	3750      	adds	r7, #80	; 0x50
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40023800 	.word	0x40023800
 8003008:	40007000 	.word	0x40007000

0800300c <fonc_pour_synchroniser_capteurs>:

/* USER CODE BEGIN 4 */

/* Fonction pour synchroniser les 3 capteurs d'himidité de température et de pression */

void fonc_pour_synchroniser_capteurs(){
 800300c:	b580      	push	{r7, lr}
 800300e:	b08e      	sub	sp, #56	; 0x38
 8003010:	af00      	add	r7, sp, #0
		/* LPS22HH */

		/* Initialize mems driver interface */

		  stmdev_ctx_t dev_ctx_lps22hh;
		  dev_ctx_lps22hh.write_reg = platform_write_lps22hh;
 8003012:	4b72      	ldr	r3, [pc, #456]	; (80031dc <fonc_pour_synchroniser_capteurs+0x1d0>)
 8003014:	62bb      	str	r3, [r7, #40]	; 0x28
		  dev_ctx_lps22hh.read_reg = platform_read_lps22hh;
 8003016:	4b72      	ldr	r3, [pc, #456]	; (80031e0 <fonc_pour_synchroniser_capteurs+0x1d4>)
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
		  dev_ctx_lps22hh.handle = &hi2c1;
 800301a:	4b72      	ldr	r3, [pc, #456]	; (80031e4 <fonc_pour_synchroniser_capteurs+0x1d8>)
 800301c:	637b      	str	r3, [r7, #52]	; 0x34
		  /* HTS221 */

		  /* Initialize mems driver interface */

		  stmdev_ctx_t dev_ctx_hts221;
		  dev_ctx_hts221.write_reg = platform_write_hts221;
 800301e:	4b72      	ldr	r3, [pc, #456]	; (80031e8 <fonc_pour_synchroniser_capteurs+0x1dc>)
 8003020:	61bb      	str	r3, [r7, #24]
		  dev_ctx_hts221.read_reg = platform_read_hts221;
 8003022:	4b72      	ldr	r3, [pc, #456]	; (80031ec <fonc_pour_synchroniser_capteurs+0x1e0>)
 8003024:	61fb      	str	r3, [r7, #28]
		  dev_ctx_hts221.handle = &hi2c1;
 8003026:	4b6f      	ldr	r3, [pc, #444]	; (80031e4 <fonc_pour_synchroniser_capteurs+0x1d8>)
 8003028:	627b      	str	r3, [r7, #36]	; 0x24

	  /* LPS22HH ******************************************************************************************/

				  /* Check device ID */
	  	  	  	  whoamI_lps22hh = 0;
 800302a:	4b71      	ldr	r3, [pc, #452]	; (80031f0 <fonc_pour_synchroniser_capteurs+0x1e4>)
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
				  lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 8003030:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003034:	496e      	ldr	r1, [pc, #440]	; (80031f0 <fonc_pour_synchroniser_capteurs+0x1e4>)
 8003036:	4618      	mov	r0, r3
 8003038:	f003 fbf8 	bl	800682c <lps22hh_device_id_get>
				  if ( whoamI_lps22hh != LPS22HH_ID ){/*manage here device not found */
 800303c:	4b6c      	ldr	r3, [pc, #432]	; (80031f0 <fonc_pour_synchroniser_capteurs+0x1e4>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2bb3      	cmp	r3, #179	; 0xb3
 8003042:	d000      	beq.n	8003046 <fonc_pour_synchroniser_capteurs+0x3a>
					while (1);
 8003044:	e7fe      	b.n	8003044 <fonc_pour_synchroniser_capteurs+0x38>
				  }
				  /* Restore default configuration */
				  lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8003046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800304a:	2101      	movs	r1, #1
 800304c:	4618      	mov	r0, r3
 800304e:	f003 fbfe 	bl	800684e <lps22hh_reset_set>

				  do {
					lps22hh_reset_get(&dev_ctx_lps22hh, &rst);
 8003052:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003056:	4967      	ldr	r1, [pc, #412]	; (80031f4 <fonc_pour_synchroniser_capteurs+0x1e8>)
 8003058:	4618      	mov	r0, r3
 800305a:	f003 fc1e 	bl	800689a <lps22hh_reset_get>
				  } while (rst);
 800305e:	4b65      	ldr	r3, [pc, #404]	; (80031f4 <fonc_pour_synchroniser_capteurs+0x1e8>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f5      	bne.n	8003052 <fonc_pour_synchroniser_capteurs+0x46>

				  /* Enable Block Data Update */
				  lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8003066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800306a:	2101      	movs	r1, #1
 800306c:	4618      	mov	r0, r3
 800306e:	f003 fb1d 	bl	80066ac <lps22hh_block_data_update_set>
				  /* Set Output Data Rate */
				  lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_10_Hz_LOW_NOISE);
 8003072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003076:	2112      	movs	r1, #18
 8003078:	4618      	mov	r0, r3
 800307a:	f003 fb3d 	bl	80066f8 <lps22hh_data_rate_set>


	  /* HTS221 *******************************************************************************************/

				  /* Check device ID */
				  whoamI_hts221 = 0;
 800307e:	4b5e      	ldr	r3, [pc, #376]	; (80031f8 <fonc_pour_synchroniser_capteurs+0x1ec>)
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
				  hts221_device_id_get(&dev_ctx_hts221, &whoamI_hts221);
 8003084:	f107 0318 	add.w	r3, r7, #24
 8003088:	495b      	ldr	r1, [pc, #364]	; (80031f8 <fonc_pour_synchroniser_capteurs+0x1ec>)
 800308a:	4618      	mov	r0, r3
 800308c:	f003 f9df 	bl	800644e <hts221_device_id_get>
				  if ( whoamI_hts221 != HTS221_ID ){
 8003090:	4b59      	ldr	r3, [pc, #356]	; (80031f8 <fonc_pour_synchroniser_capteurs+0x1ec>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2bbc      	cmp	r3, #188	; 0xbc
 8003096:	d000      	beq.n	800309a <fonc_pour_synchroniser_capteurs+0x8e>
					while (1); /*manage here device not found */
 8003098:	e7fe      	b.n	8003098 <fonc_pour_synchroniser_capteurs+0x8c>
				  }

				  /* Read humidity calibration coefficient */
				  lin_t lin_hum;
				  hts221_hum_adc_point_0_get(&dev_ctx_hts221, &lin_hum.x0);
 800309a:	f107 0208 	add.w	r2, r7, #8
 800309e:	f107 0318 	add.w	r3, r7, #24
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f003 fa56 	bl	8006556 <hts221_hum_adc_point_0_get>
				  hts221_hum_rh_point_0_get(&dev_ctx_hts221, &lin_hum.y0);
 80030aa:	f107 0308 	add.w	r3, r7, #8
 80030ae:	1d1a      	adds	r2, r3, #4
 80030b0:	f107 0318 	add.w	r3, r7, #24
 80030b4:	4611      	mov	r1, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f003 fa11 	bl	80064de <hts221_hum_rh_point_0_get>
				  hts221_hum_adc_point_1_get(&dev_ctx_hts221, &lin_hum.x1);
 80030bc:	f107 0308 	add.w	r3, r7, #8
 80030c0:	f103 0208 	add.w	r2, r3, #8
 80030c4:	f107 0318 	add.w	r3, r7, #24
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f003 fa67 	bl	800659e <hts221_hum_adc_point_1_get>
				  hts221_hum_rh_point_1_get(&dev_ctx_hts221, &lin_hum.y1);
 80030d0:	f107 0308 	add.w	r3, r7, #8
 80030d4:	f103 020c 	add.w	r2, r3, #12
 80030d8:	f107 0318 	add.w	r3, r7, #24
 80030dc:	4611      	mov	r1, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	f003 fa1b 	bl	800651a <hts221_hum_rh_point_1_get>
				  /* Enable Block Data Update */
				  hts221_block_data_update_set(&dev_ctx_hts221, PROPERTY_ENABLE);
 80030e4:	f107 0318 	add.w	r3, r7, #24
 80030e8:	2101      	movs	r1, #1
 80030ea:	4618      	mov	r0, r3
 80030ec:	f003 f966 	bl	80063bc <hts221_block_data_update_set>
				  /* Set Output Data Rate */
				  hts221_data_rate_set(&dev_ctx_hts221, HTS221_ODR_1Hz);
 80030f0:	f107 0318 	add.w	r3, r7, #24
 80030f4:	2101      	movs	r1, #1
 80030f6:	4618      	mov	r0, r3
 80030f8:	f003 f93a 	bl	8006370 <hts221_data_rate_set>
				  /* Device power on */
				  hts221_power_on_set(&dev_ctx_hts221, PROPERTY_ENABLE);
 80030fc:	f107 0318 	add.w	r3, r7, #24
 8003100:	2101      	movs	r1, #1
 8003102:	4618      	mov	r0, r3
 8003104:	f003 f9b4 	bl	8006470 <hts221_power_on_set>
 8003108:	4b3c      	ldr	r3, [pc, #240]	; (80031fc <fonc_pour_synchroniser_capteurs+0x1f0>)
 800310a:	2200      	movs	r2, #0
 800310c:	801a      	strh	r2, [r3, #0]
		     /* LPS22HH ************************************************************************************************************/

			  /************** Read temperature data ***********************/

			  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
			  lps22hh_temperature_raw_get(&dev_ctx_lps22hh, &data_raw_temperature);
 800310e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003112:	493a      	ldr	r1, [pc, #232]	; (80031fc <fonc_pour_synchroniser_capteurs+0x1f0>)
 8003114:	4618      	mov	r0, r3
 8003116:	f003 fb66 	bl	80067e6 <lps22hh_temperature_raw_get>
			  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature );
 800311a:	4b38      	ldr	r3, [pc, #224]	; (80031fc <fonc_pour_synchroniser_capteurs+0x1f0>)
 800311c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003120:	4618      	mov	r0, r3
 8003122:	f003 faa9 	bl	8006678 <lps22hh_from_lsb_to_celsius>
 8003126:	eef0 7a40 	vmov.f32	s15, s0
 800312a:	4b35      	ldr	r3, [pc, #212]	; (8003200 <fonc_pour_synchroniser_capteurs+0x1f4>)
 800312c:	edc3 7a00 	vstr	s15, [r3]
 8003130:	4b34      	ldr	r3, [pc, #208]	; (8003204 <fonc_pour_synchroniser_capteurs+0x1f8>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]

			  /************** Read pressure data ****************************/

			  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
			  lps22hh_pressure_raw_get(&dev_ctx_lps22hh, &data_raw_pressure);
 8003136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800313a:	4932      	ldr	r1, [pc, #200]	; (8003204 <fonc_pour_synchroniser_capteurs+0x1f8>)
 800313c:	4618      	mov	r0, r3
 800313e:	f003 fb29 	bl	8006794 <lps22hh_pressure_raw_get>
			  pressure_hPa = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 8003142:	4b30      	ldr	r3, [pc, #192]	; (8003204 <fonc_pour_synchroniser_capteurs+0x1f8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f003 fa7e 	bl	8006648 <lps22hh_from_lsb_to_hpa>
 800314c:	eef0 7a40 	vmov.f32	s15, s0
 8003150:	4b2d      	ldr	r3, [pc, #180]	; (8003208 <fonc_pour_synchroniser_capteurs+0x1fc>)
 8003152:	edc3 7a00 	vstr	s15, [r3]
		    /* HTS221 *************************************************************************************************************/

			/****************** Read humidity data ***************/

			  hts221_reg_t reg;
			  hts221_status_get(&dev_ctx_hts221, &reg.status_reg);
 8003156:	1d3a      	adds	r2, r7, #4
 8003158:	f107 0318 	add.w	r3, r7, #24
 800315c:	4611      	mov	r1, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f003 f9ac 	bl	80064bc <hts221_status_get>
			  if (reg.status_reg.h_da) {
 8003164:	793b      	ldrb	r3, [r7, #4]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d030      	beq.n	80031d2 <fonc_pour_synchroniser_capteurs+0x1c6>
 8003170:	4b26      	ldr	r3, [pc, #152]	; (800320c <fonc_pour_synchroniser_capteurs+0x200>)
 8003172:	2200      	movs	r2, #0
 8003174:	801a      	strh	r2, [r3, #0]
				  memset(&data_raw_humidity, 0x00, sizeof(int16_t));
				  hts221_humidity_raw_get(&dev_ctx_hts221, &data_raw_humidity);
 8003176:	f107 0318 	add.w	r3, r7, #24
 800317a:	4924      	ldr	r1, [pc, #144]	; (800320c <fonc_pour_synchroniser_capteurs+0x200>)
 800317c:	4618      	mov	r0, r3
 800317e:	f003 f943 	bl	8006408 <hts221_humidity_raw_get>
				  humidity_perc = linear_interpolation(&lin_hum, data_raw_humidity);
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <fonc_pour_synchroniser_capteurs+0x200>)
 8003184:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003188:	f107 0308 	add.w	r3, r7, #8
 800318c:	4611      	mov	r1, r2
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe ff16 	bl	8001fc0 <linear_interpolation>
 8003194:	eef0 7a40 	vmov.f32	s15, s0
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <fonc_pour_synchroniser_capteurs+0x204>)
 800319a:	edc3 7a00 	vstr	s15, [r3]

				  if (humidity_perc < 0) {
 800319e:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <fonc_pour_synchroniser_capteurs+0x204>)
 80031a0:	edd3 7a00 	vldr	s15, [r3]
 80031a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ac:	d503      	bpl.n	80031b6 <fonc_pour_synchroniser_capteurs+0x1aa>
				  humidity_perc = 0;
 80031ae:	4b18      	ldr	r3, [pc, #96]	; (8003210 <fonc_pour_synchroniser_capteurs+0x204>)
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
				  }
				  if (humidity_perc > 100) {
 80031b6:	4b16      	ldr	r3, [pc, #88]	; (8003210 <fonc_pour_synchroniser_capteurs+0x204>)
 80031b8:	edd3 7a00 	vldr	s15, [r3]
 80031bc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003214 <fonc_pour_synchroniser_capteurs+0x208>
 80031c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c8:	dc00      	bgt.n	80031cc <fonc_pour_synchroniser_capteurs+0x1c0>
				  humidity_perc = 100;
				  }
			  }
}
 80031ca:	e002      	b.n	80031d2 <fonc_pour_synchroniser_capteurs+0x1c6>
				  humidity_perc = 100;
 80031cc:	4b10      	ldr	r3, [pc, #64]	; (8003210 <fonc_pour_synchroniser_capteurs+0x204>)
 80031ce:	4a12      	ldr	r2, [pc, #72]	; (8003218 <fonc_pour_synchroniser_capteurs+0x20c>)
 80031d0:	601a      	str	r2, [r3, #0]
}
 80031d2:	bf00      	nop
 80031d4:	3738      	adds	r7, #56	; 0x38
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	0800335d 	.word	0x0800335d
 80031e0:	08003397 	.word	0x08003397
 80031e4:	20000374 	.word	0x20000374
 80031e8:	080032d9 	.word	0x080032d9
 80031ec:	0800331b 	.word	0x0800331b
 80031f0:	200040f4 	.word	0x200040f4
 80031f4:	200040f5 	.word	0x200040f5
 80031f8:	200048d0 	.word	0x200048d0
 80031fc:	200040e8 	.word	0x200040e8
 8003200:	200040f0 	.word	0x200040f0
 8003204:	200040e4 	.word	0x200040e4
 8003208:	200040ec 	.word	0x200040ec
 800320c:	200048c8 	.word	0x200048c8
 8003210:	200048cc 	.word	0x200048cc
 8003214:	42c80000 	.word	0x42c80000
 8003218:	42c80000 	.word	0x42c80000

0800321c <interface0>:

/* Switcher entre les interfaces et afficher une image a chaque interface */

void interface0(){
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
	BSP_LCD_DrawBitmap(0, 0, (uint8_t *)file2);
 8003220:	4a04      	ldr	r2, [pc, #16]	; (8003234 <interface0+0x18>)
 8003222:	2100      	movs	r1, #0
 8003224:	2000      	movs	r0, #0
 8003226:	f002 f81d 	bl	8005264 <BSP_LCD_DrawBitmap>

	page=1;
 800322a:	4b03      	ldr	r3, [pc, #12]	; (8003238 <interface0+0x1c>)
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}
 8003234:	08094244 	.word	0x08094244
 8003238:	200040e2 	.word	0x200040e2

0800323c <interface1>:

void interface1(){
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
	BSP_LCD_DrawBitmap(0, 0, (uint8_t *)file1);
 8003240:	4a04      	ldr	r2, [pc, #16]	; (8003254 <interface1+0x18>)
 8003242:	2100      	movs	r1, #0
 8003244:	2000      	movs	r0, #0
 8003246:	f002 f80d 	bl	8005264 <BSP_LCD_DrawBitmap>

	page=2;
 800324a:	4b03      	ldr	r3, [pc, #12]	; (8003258 <interface1+0x1c>)
 800324c:	2202      	movs	r2, #2
 800324e:	701a      	strb	r2, [r3, #0]

}
 8003250:	bf00      	nop
 8003252:	bd80      	pop	{r7, pc}
 8003254:	0805460c 	.word	0x0805460c
 8003258:	200040e2 	.word	0x200040e2

0800325c <interfaceGRAPH>:

void interfaceGRAPH(){
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0

	page=3;
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <interfaceGRAPH+0x14>)
 8003262:	2203      	movs	r2, #3
 8003264:	701a      	strb	r2, [r3, #0]

}
 8003266:	bf00      	nop
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	200040e2 	.word	0x200040e2

08003274 <HAL_GPIO_EXTI_Callback>:

/* Fonction d'interruption contients deux interruption soit de la touch screen soit de bouton pour allumer ou eteindre LCD */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_BTN_Pin){
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003284:	d104      	bne.n	8003290 <HAL_GPIO_EXTI_Callback+0x1c>
	        BSP_LCD_DisplayOn();
 8003286:	f002 f919 	bl	80054bc <BSP_LCD_DisplayOn>
	        DisplayState=0;
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <HAL_GPIO_EXTI_Callback+0x50>)
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]





	if (GPIO_Pin == TS_INT_Pin ) {
 8003290:	88fb      	ldrh	r3, [r7, #6]
 8003292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003296:	d111      	bne.n	80032bc <HAL_GPIO_EXTI_Callback+0x48>
		BSP_TS_GetState(TS_State);
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_GPIO_EXTI_Callback+0x54>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f002 fdab 	bl	8005df8 <BSP_TS_GetState>
		x = TS_State->touchX[0];
 80032a2:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <HAL_GPIO_EXTI_Callback+0x54>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	885a      	ldrh	r2, [r3, #2]
 80032a8:	4b08      	ldr	r3, [pc, #32]	; (80032cc <HAL_GPIO_EXTI_Callback+0x58>)
 80032aa:	801a      	strh	r2, [r3, #0]
		y = TS_State->touchY[0];
 80032ac:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_GPIO_EXTI_Callback+0x54>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	899a      	ldrh	r2, [r3, #12]
 80032b2:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <HAL_GPIO_EXTI_Callback+0x5c>)
 80032b4:	801a      	strh	r2, [r3, #0]

		ts_int = 1;
 80032b6:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <HAL_GPIO_EXTI_Callback+0x60>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	701a      	strb	r2, [r3, #0]
	}
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	200040e3 	.word	0x200040e3
 80032c8:	200040d8 	.word	0x200040d8
 80032cc:	200040de 	.word	0x200040de
 80032d0:	200040e0 	.word	0x200040e0
 80032d4:	200040dc 	.word	0x200040dc

080032d8 <platform_write_hts221>:

/* HTS221 */

static int32_t platform_write_hts221(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af04      	add	r7, sp, #16
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	607a      	str	r2, [r7, #4]
 80032e2:	461a      	mov	r2, r3
 80032e4:	460b      	mov	r3, r1
 80032e6:	72fb      	strb	r3, [r7, #11]
 80032e8:	4613      	mov	r3, r2
 80032ea:	813b      	strh	r3, [r7, #8]
	/* Write multiple command */
	  reg |= 0x80;
 80032ec:	7afb      	ldrb	r3, [r7, #11]
 80032ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032f2:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Write(handle, HTS221_I2C_ADDRESS, reg,
 80032f4:	7afb      	ldrb	r3, [r7, #11]
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032fc:	9302      	str	r3, [sp, #8]
 80032fe:	893b      	ldrh	r3, [r7, #8]
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2301      	movs	r3, #1
 8003308:	21bf      	movs	r1, #191	; 0xbf
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f005 fae0 	bl	80088d0 <HAL_I2C_Mem_Write>
	                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <platform_read_hts221>:

static int32_t platform_read_hts221(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b088      	sub	sp, #32
 800331e:	af04      	add	r7, sp, #16
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	461a      	mov	r2, r3
 8003326:	460b      	mov	r3, r1
 8003328:	72fb      	strb	r3, [r7, #11]
 800332a:	4613      	mov	r3, r2
 800332c:	813b      	strh	r3, [r7, #8]
	 /* Read multiple command */
	  reg |= 0x80;
 800332e:	7afb      	ldrb	r3, [r7, #11]
 8003330:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003334:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Read(handle, HTS221_I2C_ADDRESS, reg,
 8003336:	7afb      	ldrb	r3, [r7, #11]
 8003338:	b29a      	uxth	r2, r3
 800333a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800333e:	9302      	str	r3, [sp, #8]
 8003340:	893b      	ldrh	r3, [r7, #8]
 8003342:	9301      	str	r3, [sp, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	2301      	movs	r3, #1
 800334a:	21bf      	movs	r1, #191	; 0xbf
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f005 fbd3 	bl	8008af8 <HAL_I2C_Mem_Read>
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <platform_write_lps22hh>:


/* LPS22HH */

static int32_t platform_write_lps22hh(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af04      	add	r7, sp, #16
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	461a      	mov	r2, r3
 8003368:	460b      	mov	r3, r1
 800336a:	72fb      	strb	r3, [r7, #11]
 800336c:	4613      	mov	r3, r2
 800336e:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8003370:	7afb      	ldrb	r3, [r7, #11]
 8003372:	b29a      	uxth	r2, r3
 8003374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003378:	9302      	str	r3, [sp, #8]
 800337a:	893b      	ldrh	r3, [r7, #8]
 800337c:	9301      	str	r3, [sp, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	2301      	movs	r3, #1
 8003384:	21bb      	movs	r1, #187	; 0xbb
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f005 faa2 	bl	80088d0 <HAL_I2C_Mem_Write>
  return 0;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <platform_read_lps22hh>:

static int32_t platform_read_lps22hh(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b088      	sub	sp, #32
 800339a:	af04      	add	r7, sp, #16
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	461a      	mov	r2, r3
 80033a2:	460b      	mov	r3, r1
 80033a4:	72fb      	strb	r3, [r7, #11]
 80033a6:	4613      	mov	r3, r2
 80033a8:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80033aa:	7afb      	ldrb	r3, [r7, #11]
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033b2:	9302      	str	r3, [sp, #8]
 80033b4:	893b      	ldrh	r3, [r7, #8]
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	2301      	movs	r3, #1
 80033be:	21bb      	movs	r1, #187	; 0xbb
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f005 fb99 	bl	8008af8 <HAL_I2C_Mem_Read>

  return 0;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_TIM_IC_CaptureCallback>:

/* Fonction d'interruption pour le TIMER 1 qui prend en charche le capteur de vitesse (mode capture)  */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	7f1b      	ldrb	r3, [r3, #28]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d102      	bne.n	80033e6 <HAL_TIM_IC_CaptureCallback+0x16>

		vitesseDetected = 1;
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <HAL_TIM_IC_CaptureCallback+0x24>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]
	}
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20005820 	.word	0x20005820

080033f8 <HAL_TIM_PeriodElapsedCallback>:

/* Fonction d'interruption pour le TIMER 2 qui prend en charge le capteur de pluie  */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003408:	d102      	bne.n	8003410 <HAL_TIM_PeriodElapsedCallback+0x18>

		pluieDetected=1;
 800340a:	4b04      	ldr	r3, [pc, #16]	; (800341c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
	}
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	2000503c 	.word	0x2000503c

08003420 <direction_wind>:

/* Fonction pour séléctioner la direction du vent  */

char* direction_wind() {
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0


	  HAL_ADC_Start(&hadc3);
 8003424:	48a4      	ldr	r0, [pc, #656]	; (80036b8 <direction_wind+0x298>)
 8003426:	f003 fb1f 	bl	8006a68 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 800342a:	f04f 31ff 	mov.w	r1, #4294967295
 800342e:	48a2      	ldr	r0, [pc, #648]	; (80036b8 <direction_wind+0x298>)
 8003430:	f003 fbe8 	bl	8006c04 <HAL_ADC_PollForConversion>
	  val_analog = HAL_ADC_GetValue(&hadc3);
 8003434:	48a0      	ldr	r0, [pc, #640]	; (80036b8 <direction_wind+0x298>)
 8003436:	f003 fc70 	bl	8006d1a <HAL_ADC_GetValue>
 800343a:	4603      	mov	r3, r0
 800343c:	b29a      	uxth	r2, r3
 800343e:	4b9f      	ldr	r3, [pc, #636]	; (80036bc <direction_wind+0x29c>)
 8003440:	801a      	strh	r2, [r3, #0]
	  val_tension = val_analog * 3.3 / 4095;
 8003442:	4b9e      	ldr	r3, [pc, #632]	; (80036bc <direction_wind+0x29c>)
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd f88c 	bl	8000564 <__aeabi_i2d>
 800344c:	a384      	add	r3, pc, #528	; (adr r3, 8003660 <direction_wind+0x240>)
 800344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003452:	f7fd f8f1 	bl	8000638 <__aeabi_dmul>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4610      	mov	r0, r2
 800345c:	4619      	mov	r1, r3
 800345e:	a382      	add	r3, pc, #520	; (adr r3, 8003668 <direction_wind+0x248>)
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f7fd fa12 	bl	800088c <__aeabi_ddiv>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4610      	mov	r0, r2
 800346e:	4619      	mov	r1, r3
 8003470:	f7fd fbba 	bl	8000be8 <__aeabi_d2f>
 8003474:	4603      	mov	r3, r0
 8003476:	4a92      	ldr	r2, [pc, #584]	; (80036c0 <direction_wind+0x2a0>)
 8003478:	6013      	str	r3, [r2, #0]

	  if(val_tension > 3.075 && val_tension < 3.15)
 800347a:	4b91      	ldr	r3, [pc, #580]	; (80036c0 <direction_wind+0x2a0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd f882 	bl	8000588 <__aeabi_f2d>
 8003484:	a37a      	add	r3, pc, #488	; (adr r3, 8003670 <direction_wind+0x250>)
 8003486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348a:	f7fd fb65 	bl	8000b58 <__aeabi_dcmpgt>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d010      	beq.n	80034b6 <direction_wind+0x96>
 8003494:	4b8a      	ldr	r3, [pc, #552]	; (80036c0 <direction_wind+0x2a0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7fd f875 	bl	8000588 <__aeabi_f2d>
 800349e:	a376      	add	r3, pc, #472	; (adr r3, 8003678 <direction_wind+0x258>)
 80034a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a4:	f7fd fb3a 	bl	8000b1c <__aeabi_dcmplt>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <direction_wind+0x96>
		  direction = "west";
 80034ae:	4b85      	ldr	r3, [pc, #532]	; (80036c4 <direction_wind+0x2a4>)
 80034b0:	4a85      	ldr	r2, [pc, #532]	; (80036c8 <direction_wind+0x2a8>)
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e0d0      	b.n	8003658 <direction_wind+0x238>

	  else if(val_tension > 2.885 && val_tension < 3.075)
 80034b6:	4b82      	ldr	r3, [pc, #520]	; (80036c0 <direction_wind+0x2a0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd f864 	bl	8000588 <__aeabi_f2d>
 80034c0:	a36f      	add	r3, pc, #444	; (adr r3, 8003680 <direction_wind+0x260>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f7fd fb47 	bl	8000b58 <__aeabi_dcmpgt>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d010      	beq.n	80034f2 <direction_wind+0xd2>
 80034d0:	4b7b      	ldr	r3, [pc, #492]	; (80036c0 <direction_wind+0x2a0>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd f857 	bl	8000588 <__aeabi_f2d>
 80034da:	a365      	add	r3, pc, #404	; (adr r3, 8003670 <direction_wind+0x250>)
 80034dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e0:	f7fd fb1c 	bl	8000b1c <__aeabi_dcmplt>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <direction_wind+0xd2>
	  		  direction = "North-west";
 80034ea:	4b76      	ldr	r3, [pc, #472]	; (80036c4 <direction_wind+0x2a4>)
 80034ec:	4a77      	ldr	r2, [pc, #476]	; (80036cc <direction_wind+0x2ac>)
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e0b2      	b.n	8003658 <direction_wind+0x238>

	  else if(val_tension > 2.571 && val_tension < 2.885)
 80034f2:	4b73      	ldr	r3, [pc, #460]	; (80036c0 <direction_wind+0x2a0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fd f846 	bl	8000588 <__aeabi_f2d>
 80034fc:	a362      	add	r3, pc, #392	; (adr r3, 8003688 <direction_wind+0x268>)
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	f7fd fb29 	bl	8000b58 <__aeabi_dcmpgt>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d010      	beq.n	800352e <direction_wind+0x10e>
 800350c:	4b6c      	ldr	r3, [pc, #432]	; (80036c0 <direction_wind+0x2a0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7fd f839 	bl	8000588 <__aeabi_f2d>
 8003516:	a35a      	add	r3, pc, #360	; (adr r3, 8003680 <direction_wind+0x260>)
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f7fd fafe 	bl	8000b1c <__aeabi_dcmplt>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <direction_wind+0x10e>
	  		  direction = "North";
 8003526:	4b67      	ldr	r3, [pc, #412]	; (80036c4 <direction_wind+0x2a4>)
 8003528:	4a69      	ldr	r2, [pc, #420]	; (80036d0 <direction_wind+0x2b0>)
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e094      	b.n	8003658 <direction_wind+0x238>

	  else if(val_tension > 2.165 && val_tension < 2.571)
 800352e:	4b64      	ldr	r3, [pc, #400]	; (80036c0 <direction_wind+0x2a0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd f828 	bl	8000588 <__aeabi_f2d>
 8003538:	a355      	add	r3, pc, #340	; (adr r3, 8003690 <direction_wind+0x270>)
 800353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353e:	f7fd fb0b 	bl	8000b58 <__aeabi_dcmpgt>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d010      	beq.n	800356a <direction_wind+0x14a>
 8003548:	4b5d      	ldr	r3, [pc, #372]	; (80036c0 <direction_wind+0x2a0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fd f81b 	bl	8000588 <__aeabi_f2d>
 8003552:	a34d      	add	r3, pc, #308	; (adr r3, 8003688 <direction_wind+0x268>)
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f7fd fae0 	bl	8000b1c <__aeabi_dcmplt>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <direction_wind+0x14a>
	  		  direction = "South West";
 8003562:	4b58      	ldr	r3, [pc, #352]	; (80036c4 <direction_wind+0x2a4>)
 8003564:	4a5b      	ldr	r2, [pc, #364]	; (80036d4 <direction_wind+0x2b4>)
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	e076      	b.n	8003658 <direction_wind+0x238>

	  else if(val_tension > 1.7 && val_tension < 2.165)
 800356a:	4b55      	ldr	r3, [pc, #340]	; (80036c0 <direction_wind+0x2a0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7fd f80a 	bl	8000588 <__aeabi_f2d>
 8003574:	a348      	add	r3, pc, #288	; (adr r3, 8003698 <direction_wind+0x278>)
 8003576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357a:	f7fd faed 	bl	8000b58 <__aeabi_dcmpgt>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d010      	beq.n	80035a6 <direction_wind+0x186>
 8003584:	4b4e      	ldr	r3, [pc, #312]	; (80036c0 <direction_wind+0x2a0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f7fc fffd 	bl	8000588 <__aeabi_f2d>
 800358e:	a340      	add	r3, pc, #256	; (adr r3, 8003690 <direction_wind+0x270>)
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	f7fd fac2 	bl	8000b1c <__aeabi_dcmplt>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <direction_wind+0x186>
	  		  direction = "North east";
 800359e:	4b49      	ldr	r3, [pc, #292]	; (80036c4 <direction_wind+0x2a4>)
 80035a0:	4a4d      	ldr	r2, [pc, #308]	; (80036d8 <direction_wind+0x2b8>)
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	e058      	b.n	8003658 <direction_wind+0x238>

	  else if(val_tension > 1.295 && val_tension < 1.7)
 80035a6:	4b46      	ldr	r3, [pc, #280]	; (80036c0 <direction_wind+0x2a0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fc ffec 	bl	8000588 <__aeabi_f2d>
 80035b0:	a33b      	add	r3, pc, #236	; (adr r3, 80036a0 <direction_wind+0x280>)
 80035b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b6:	f7fd facf 	bl	8000b58 <__aeabi_dcmpgt>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d010      	beq.n	80035e2 <direction_wind+0x1c2>
 80035c0:	4b3f      	ldr	r3, [pc, #252]	; (80036c0 <direction_wind+0x2a0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fc ffdf 	bl	8000588 <__aeabi_f2d>
 80035ca:	a333      	add	r3, pc, #204	; (adr r3, 8003698 <direction_wind+0x278>)
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f7fd faa4 	bl	8000b1c <__aeabi_dcmplt>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <direction_wind+0x1c2>
	  		  direction = "South";
 80035da:	4b3a      	ldr	r3, [pc, #232]	; (80036c4 <direction_wind+0x2a4>)
 80035dc:	4a3f      	ldr	r2, [pc, #252]	; (80036dc <direction_wind+0x2bc>)
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e03a      	b.n	8003658 <direction_wind+0x238>

	  else if(val_tension > 1.01 && val_tension < 1.295)
 80035e2:	4b37      	ldr	r3, [pc, #220]	; (80036c0 <direction_wind+0x2a0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fc ffce 	bl	8000588 <__aeabi_f2d>
 80035ec:	a32e      	add	r3, pc, #184	; (adr r3, 80036a8 <direction_wind+0x288>)
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	f7fd fab1 	bl	8000b58 <__aeabi_dcmpgt>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d010      	beq.n	800361e <direction_wind+0x1fe>
 80035fc:	4b30      	ldr	r3, [pc, #192]	; (80036c0 <direction_wind+0x2a0>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f7fc ffc1 	bl	8000588 <__aeabi_f2d>
 8003606:	a326      	add	r3, pc, #152	; (adr r3, 80036a0 <direction_wind+0x280>)
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	f7fd fa86 	bl	8000b1c <__aeabi_dcmplt>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <direction_wind+0x1fe>
	  		  direction = "South EAst";
 8003616:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <direction_wind+0x2a4>)
 8003618:	4a31      	ldr	r2, [pc, #196]	; (80036e0 <direction_wind+0x2c0>)
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	e01c      	b.n	8003658 <direction_wind+0x238>

	  else if(val_tension > 0.835 && val_tension < 1.01)
 800361e:	4b28      	ldr	r3, [pc, #160]	; (80036c0 <direction_wind+0x2a0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fc ffb0 	bl	8000588 <__aeabi_f2d>
 8003628:	a321      	add	r3, pc, #132	; (adr r3, 80036b0 <direction_wind+0x290>)
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	f7fd fa93 	bl	8000b58 <__aeabi_dcmpgt>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00f      	beq.n	8003658 <direction_wind+0x238>
 8003638:	4b21      	ldr	r3, [pc, #132]	; (80036c0 <direction_wind+0x2a0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f7fc ffa3 	bl	8000588 <__aeabi_f2d>
 8003642:	a319      	add	r3, pc, #100	; (adr r3, 80036a8 <direction_wind+0x288>)
 8003644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003648:	f7fd fa68 	bl	8000b1c <__aeabi_dcmplt>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <direction_wind+0x238>
	  		  direction = "East";
 8003652:	4b1c      	ldr	r3, [pc, #112]	; (80036c4 <direction_wind+0x2a4>)
 8003654:	4a23      	ldr	r2, [pc, #140]	; (80036e4 <direction_wind+0x2c4>)
 8003656:	601a      	str	r2, [r3, #0]

	  return direction;
 8003658:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <direction_wind+0x2a4>)
 800365a:	681b      	ldr	r3, [r3, #0]
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	66666666 	.word	0x66666666
 8003664:	400a6666 	.word	0x400a6666
 8003668:	00000000 	.word	0x00000000
 800366c:	40affe00 	.word	0x40affe00
 8003670:	9999999a 	.word	0x9999999a
 8003674:	40089999 	.word	0x40089999
 8003678:	33333333 	.word	0x33333333
 800367c:	40093333 	.word	0x40093333
 8003680:	e147ae14 	.word	0xe147ae14
 8003684:	4007147a 	.word	0x4007147a
 8003688:	72b020c5 	.word	0x72b020c5
 800368c:	40049168 	.word	0x40049168
 8003690:	851eb852 	.word	0x851eb852
 8003694:	400151eb 	.word	0x400151eb
 8003698:	33333333 	.word	0x33333333
 800369c:	3ffb3333 	.word	0x3ffb3333
 80036a0:	eb851eb8 	.word	0xeb851eb8
 80036a4:	3ff4b851 	.word	0x3ff4b851
 80036a8:	c28f5c29 	.word	0xc28f5c29
 80036ac:	3ff028f5 	.word	0x3ff028f5
 80036b0:	eb851eb8 	.word	0xeb851eb8
 80036b4:	3feab851 	.word	0x3feab851
 80036b8:	200002b4 	.word	0x200002b4
 80036bc:	2000542c 	.word	0x2000542c
 80036c0:	20005430 	.word	0x20005430
 80036c4:	20005434 	.word	0x20005434
 80036c8:	08014940 	.word	0x08014940
 80036cc:	08014948 	.word	0x08014948
 80036d0:	08014954 	.word	0x08014954
 80036d4:	0801495c 	.word	0x0801495c
 80036d8:	08014968 	.word	0x08014968
 80036dc:	08014974 	.word	0x08014974
 80036e0:	0801497c 	.word	0x0801497c
 80036e4:	08014988 	.word	0x08014988

080036e8 <calcul_vitesse>:

/* Fonction pour calculer la vitesse total du vent en prenons en considération la vitesse du vent dans une seconde */

void calcul_vitesse(){
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0

	/* Si le temps d'acquision est en secondes */

	if(k==0){
 80036ec:	4b19      	ldr	r3, [pc, #100]	; (8003754 <calcul_vitesse+0x6c>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d112      	bne.n	800371a <calcul_vitesse+0x32>
		vitesse_total=vitesse/acquisition;
 80036f4:	4b18      	ldr	r3, [pc, #96]	; (8003758 <calcul_vitesse+0x70>)
 80036f6:	edd3 6a00 	vldr	s13, [r3]
 80036fa:	4b18      	ldr	r3, [pc, #96]	; (800375c <calcul_vitesse+0x74>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800370a:	4b15      	ldr	r3, [pc, #84]	; (8003760 <calcul_vitesse+0x78>)
 800370c:	edc3 7a00 	vstr	s15, [r3]
		vitesse=0;
 8003710:	4b11      	ldr	r3, [pc, #68]	; (8003758 <calcul_vitesse+0x70>)
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	601a      	str	r2, [r3, #0]

	}else{
		vitesse_total=vitesse/(acquisition*60);
		vitesse=0;
	}
}
 8003718:	e016      	b.n	8003748 <calcul_vitesse+0x60>
		vitesse_total=vitesse/(acquisition*60);
 800371a:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <calcul_vitesse+0x70>)
 800371c:	edd3 6a00 	vldr	s13, [r3]
 8003720:	4b0e      	ldr	r3, [pc, #56]	; (800375c <calcul_vitesse+0x74>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	4613      	mov	r3, r2
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <calcul_vitesse+0x78>)
 800373c:	edc3 7a00 	vstr	s15, [r3]
		vitesse=0;
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <calcul_vitesse+0x70>)
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20005037 	.word	0x20005037
 8003758:	20005824 	.word	0x20005824
 800375c:	20000000 	.word	0x20000000
 8003760:	20005828 	.word	0x20005828

08003764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003768:	b672      	cpsid	i
}
 800376a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800376c:	e7fe      	b.n	800376c <Error_Handler+0x8>
	...

08003770 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003776:	1d3b      	adds	r3, r7, #4
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	60da      	str	r2, [r3, #12]
 8003782:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003784:	2300      	movs	r3, #0
 8003786:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003788:	4b24      	ldr	r3, [pc, #144]	; (800381c <MX_RTC_Init+0xac>)
 800378a:	4a25      	ldr	r2, [pc, #148]	; (8003820 <MX_RTC_Init+0xb0>)
 800378c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800378e:	4b23      	ldr	r3, [pc, #140]	; (800381c <MX_RTC_Init+0xac>)
 8003790:	2200      	movs	r2, #0
 8003792:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003794:	4b21      	ldr	r3, [pc, #132]	; (800381c <MX_RTC_Init+0xac>)
 8003796:	227f      	movs	r2, #127	; 0x7f
 8003798:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800379a:	4b20      	ldr	r3, [pc, #128]	; (800381c <MX_RTC_Init+0xac>)
 800379c:	22ff      	movs	r2, #255	; 0xff
 800379e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80037a0:	4b1e      	ldr	r3, [pc, #120]	; (800381c <MX_RTC_Init+0xac>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80037a6:	4b1d      	ldr	r3, [pc, #116]	; (800381c <MX_RTC_Init+0xac>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80037ac:	4b1b      	ldr	r3, [pc, #108]	; (800381c <MX_RTC_Init+0xac>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80037b2:	481a      	ldr	r0, [pc, #104]	; (800381c <MX_RTC_Init+0xac>)
 80037b4:	f007 f97a 	bl	800aaac <HAL_RTC_Init>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80037be:	f7ff ffd1 	bl	8003764 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80037d6:	1d3b      	adds	r3, r7, #4
 80037d8:	2201      	movs	r2, #1
 80037da:	4619      	mov	r1, r3
 80037dc:	480f      	ldr	r0, [pc, #60]	; (800381c <MX_RTC_Init+0xac>)
 80037de:	f007 f9e9 	bl	800abb4 <HAL_RTC_SetTime>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80037e8:	f7ff ffbc 	bl	8003764 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80037ec:	2305      	movs	r3, #5
 80037ee:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 80037f0:	2311      	movs	r3, #17
 80037f2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x24;
 80037f4:	2324      	movs	r3, #36	; 0x24
 80037f6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 80037f8:	2323      	movs	r3, #35	; 0x23
 80037fa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80037fc:	463b      	mov	r3, r7
 80037fe:	2201      	movs	r2, #1
 8003800:	4619      	mov	r1, r3
 8003802:	4806      	ldr	r0, [pc, #24]	; (800381c <MX_RTC_Init+0xac>)
 8003804:	f007 face 	bl	800ada4 <HAL_RTC_SetDate>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800380e:	f7ff ffa9 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003812:	bf00      	nop
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	2003771c 	.word	0x2003771c
 8003820:	40002800 	.word	0x40002800

08003824 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b0a4      	sub	sp, #144	; 0x90
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800382c:	f107 030c 	add.w	r3, r7, #12
 8003830:	2284      	movs	r2, #132	; 0x84
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f00e fee4 	bl	8012602 <memset>
  if(rtcHandle->Instance==RTC)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a0e      	ldr	r2, [pc, #56]	; (8003878 <HAL_RTC_MspInit+0x54>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d114      	bne.n	800386e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003844:	2320      	movs	r3, #32
 8003846:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800384c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800384e:	f107 030c 	add.w	r3, r7, #12
 8003852:	4618      	mov	r0, r3
 8003854:	f006 fd3a 	bl	800a2cc <HAL_RCCEx_PeriphCLKConfig>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800385e:	f7ff ff81 	bl	8003764 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003862:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_RTC_MspInit+0x58>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	4a05      	ldr	r2, [pc, #20]	; (800387c <HAL_RTC_MspInit+0x58>)
 8003868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800386c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800386e:	bf00      	nop
 8003870:	3790      	adds	r7, #144	; 0x90
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40002800 	.word	0x40002800
 800387c:	40023800 	.word	0x40023800

08003880 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003884:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <MX_SDMMC1_SD_Init+0x38>)
 8003886:	4a0d      	ldr	r2, [pc, #52]	; (80038bc <MX_SDMMC1_SD_Init+0x3c>)
 8003888:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <MX_SDMMC1_SD_Init+0x38>)
 800388c:	2200      	movs	r2, #0
 800388e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003890:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <MX_SDMMC1_SD_Init+0x38>)
 8003892:	2200      	movs	r2, #0
 8003894:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003896:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <MX_SDMMC1_SD_Init+0x38>)
 8003898:	2200      	movs	r2, #0
 800389a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <MX_SDMMC1_SD_Init+0x38>)
 800389e:	2200      	movs	r2, #0
 80038a0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <MX_SDMMC1_SD_Init+0x38>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <MX_SDMMC1_SD_Init+0x38>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	2003773c 	.word	0x2003773c
 80038bc:	40012c00 	.word	0x40012c00

080038c0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b0ac      	sub	sp, #176	; 0xb0
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038d8:	f107 0318 	add.w	r3, r7, #24
 80038dc:	2284      	movs	r2, #132	; 0x84
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f00e fe8e 	bl	8012602 <memset>
  if(sdHandle->Instance==SDMMC1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a74      	ldr	r2, [pc, #464]	; (8003abc <HAL_SD_MspInit+0x1fc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	f040 80e0 	bne.w	8003ab2 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80038f2:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 80038f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80038fe:	2300      	movs	r3, #0
 8003900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003904:	f107 0318 	add.w	r3, r7, #24
 8003908:	4618      	mov	r0, r3
 800390a:	f006 fcdf 	bl	800a2cc <HAL_RCCEx_PeriphCLKConfig>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8003914:	f7ff ff26 	bl	8003764 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003918:	4b69      	ldr	r3, [pc, #420]	; (8003ac0 <HAL_SD_MspInit+0x200>)
 800391a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391c:	4a68      	ldr	r2, [pc, #416]	; (8003ac0 <HAL_SD_MspInit+0x200>)
 800391e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003922:	6453      	str	r3, [r2, #68]	; 0x44
 8003924:	4b66      	ldr	r3, [pc, #408]	; (8003ac0 <HAL_SD_MspInit+0x200>)
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003930:	4b63      	ldr	r3, [pc, #396]	; (8003ac0 <HAL_SD_MspInit+0x200>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	4a62      	ldr	r2, [pc, #392]	; (8003ac0 <HAL_SD_MspInit+0x200>)
 8003936:	f043 0304 	orr.w	r3, r3, #4
 800393a:	6313      	str	r3, [r2, #48]	; 0x30
 800393c:	4b60      	ldr	r3, [pc, #384]	; (8003ac0 <HAL_SD_MspInit+0x200>)
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003948:	4b5d      	ldr	r3, [pc, #372]	; (8003ac0 <HAL_SD_MspInit+0x200>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	4a5c      	ldr	r2, [pc, #368]	; (8003ac0 <HAL_SD_MspInit+0x200>)
 800394e:	f043 0308 	orr.w	r3, r3, #8
 8003952:	6313      	str	r3, [r2, #48]	; 0x30
 8003954:	4b5a      	ldr	r3, [pc, #360]	; (8003ac0 <HAL_SD_MspInit+0x200>)
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8003960:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8003964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003968:	2302      	movs	r3, #2
 800396a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396e:	2300      	movs	r3, #0
 8003970:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003974:	2303      	movs	r3, #3
 8003976:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800397a:	230c      	movs	r3, #12
 800397c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003980:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003984:	4619      	mov	r1, r3
 8003986:	484f      	ldr	r0, [pc, #316]	; (8003ac4 <HAL_SD_MspInit+0x204>)
 8003988:	f004 fbc6 	bl	8008118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800398c:	2304      	movs	r3, #4
 800398e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003992:	2302      	movs	r3, #2
 8003994:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
 800399a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399e:	2303      	movs	r3, #3
 80039a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80039a4:	230c      	movs	r3, #12
 80039a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80039ae:	4619      	mov	r1, r3
 80039b0:	4845      	ldr	r0, [pc, #276]	; (8003ac8 <HAL_SD_MspInit+0x208>)
 80039b2:	f004 fbb1 	bl	8008118 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80039b6:	4b45      	ldr	r3, [pc, #276]	; (8003acc <HAL_SD_MspInit+0x20c>)
 80039b8:	4a45      	ldr	r2, [pc, #276]	; (8003ad0 <HAL_SD_MspInit+0x210>)
 80039ba:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80039bc:	4b43      	ldr	r3, [pc, #268]	; (8003acc <HAL_SD_MspInit+0x20c>)
 80039be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039c2:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039c4:	4b41      	ldr	r3, [pc, #260]	; (8003acc <HAL_SD_MspInit+0x20c>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039ca:	4b40      	ldr	r3, [pc, #256]	; (8003acc <HAL_SD_MspInit+0x20c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039d0:	4b3e      	ldr	r3, [pc, #248]	; (8003acc <HAL_SD_MspInit+0x20c>)
 80039d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039d6:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80039d8:	4b3c      	ldr	r3, [pc, #240]	; (8003acc <HAL_SD_MspInit+0x20c>)
 80039da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039de:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80039e0:	4b3a      	ldr	r3, [pc, #232]	; (8003acc <HAL_SD_MspInit+0x20c>)
 80039e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039e6:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80039e8:	4b38      	ldr	r3, [pc, #224]	; (8003acc <HAL_SD_MspInit+0x20c>)
 80039ea:	2220      	movs	r2, #32
 80039ec:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039ee:	4b37      	ldr	r3, [pc, #220]	; (8003acc <HAL_SD_MspInit+0x20c>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80039f4:	4b35      	ldr	r3, [pc, #212]	; (8003acc <HAL_SD_MspInit+0x20c>)
 80039f6:	2204      	movs	r2, #4
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80039fa:	4b34      	ldr	r3, [pc, #208]	; (8003acc <HAL_SD_MspInit+0x20c>)
 80039fc:	2203      	movs	r2, #3
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003a00:	4b32      	ldr	r3, [pc, #200]	; (8003acc <HAL_SD_MspInit+0x20c>)
 8003a02:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003a06:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003a08:	4b30      	ldr	r3, [pc, #192]	; (8003acc <HAL_SD_MspInit+0x20c>)
 8003a0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8003a10:	482e      	ldr	r0, [pc, #184]	; (8003acc <HAL_SD_MspInit+0x20c>)
 8003a12:	f003 fcf1 	bl	80073f8 <HAL_DMA_Init>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8003a1c:	f7ff fea2 	bl	8003764 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a2a      	ldr	r2, [pc, #168]	; (8003acc <HAL_SD_MspInit+0x20c>)
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40
 8003a26:	4a29      	ldr	r2, [pc, #164]	; (8003acc <HAL_SD_MspInit+0x20c>)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8003a2c:	4b29      	ldr	r3, [pc, #164]	; (8003ad4 <HAL_SD_MspInit+0x214>)
 8003a2e:	4a2a      	ldr	r2, [pc, #168]	; (8003ad8 <HAL_SD_MspInit+0x218>)
 8003a30:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8003a32:	4b28      	ldr	r3, [pc, #160]	; (8003ad4 <HAL_SD_MspInit+0x214>)
 8003a34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a38:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a3a:	4b26      	ldr	r3, [pc, #152]	; (8003ad4 <HAL_SD_MspInit+0x214>)
 8003a3c:	2240      	movs	r2, #64	; 0x40
 8003a3e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a40:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <HAL_SD_MspInit+0x214>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a46:	4b23      	ldr	r3, [pc, #140]	; (8003ad4 <HAL_SD_MspInit+0x214>)
 8003a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a4c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a4e:	4b21      	ldr	r3, [pc, #132]	; (8003ad4 <HAL_SD_MspInit+0x214>)
 8003a50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a54:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a56:	4b1f      	ldr	r3, [pc, #124]	; (8003ad4 <HAL_SD_MspInit+0x214>)
 8003a58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a5c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <HAL_SD_MspInit+0x214>)
 8003a60:	2220      	movs	r2, #32
 8003a62:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a64:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <HAL_SD_MspInit+0x214>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003a6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <HAL_SD_MspInit+0x214>)
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003a70:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <HAL_SD_MspInit+0x214>)
 8003a72:	2203      	movs	r2, #3
 8003a74:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003a76:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <HAL_SD_MspInit+0x214>)
 8003a78:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003a7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <HAL_SD_MspInit+0x214>)
 8003a80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8003a86:	4813      	ldr	r0, [pc, #76]	; (8003ad4 <HAL_SD_MspInit+0x214>)
 8003a88:	f003 fcb6 	bl	80073f8 <HAL_DMA_Init>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8003a92:	f7ff fe67 	bl	8003764 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a0e      	ldr	r2, [pc, #56]	; (8003ad4 <HAL_SD_MspInit+0x214>)
 8003a9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a9c:	4a0d      	ldr	r2, [pc, #52]	; (8003ad4 <HAL_SD_MspInit+0x214>)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	2031      	movs	r0, #49	; 0x31
 8003aa8:	f003 fc6f 	bl	800738a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003aac:	2031      	movs	r0, #49	; 0x31
 8003aae:	f003 fc88 	bl	80073c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	37b0      	adds	r7, #176	; 0xb0
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40012c00 	.word	0x40012c00
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40020800 	.word	0x40020800
 8003ac8:	40020c00 	.word	0x40020c00
 8003acc:	200377c0 	.word	0x200377c0
 8003ad0:	40026458 	.word	0x40026458
 8003ad4:	20037820 	.word	0x20037820
 8003ad8:	400264a0 	.word	0x400264a0

08003adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ae2:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <HAL_MspInit+0x44>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	4a0e      	ldr	r2, [pc, #56]	; (8003b20 <HAL_MspInit+0x44>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <HAL_MspInit+0x44>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	607b      	str	r3, [r7, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003afa:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <HAL_MspInit+0x44>)
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	4a08      	ldr	r2, [pc, #32]	; (8003b20 <HAL_MspInit+0x44>)
 8003b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b04:	6453      	str	r3, [r2, #68]	; 0x44
 8003b06:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_MspInit+0x44>)
 8003b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b0e:	603b      	str	r3, [r7, #0]
 8003b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800

08003b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b28:	e7fe      	b.n	8003b28 <NMI_Handler+0x4>

08003b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b2e:	e7fe      	b.n	8003b2e <HardFault_Handler+0x4>

08003b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b34:	e7fe      	b.n	8003b34 <MemManage_Handler+0x4>

08003b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b36:	b480      	push	{r7}
 8003b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b3a:	e7fe      	b.n	8003b3a <BusFault_Handler+0x4>

08003b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b40:	e7fe      	b.n	8003b40 <UsageFault_Handler+0x4>

08003b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b42:	b480      	push	{r7}
 8003b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b70:	f002 fef2 	bl	8006958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b74:	bf00      	nop
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b7c:	4802      	ldr	r0, [pc, #8]	; (8003b88 <TIM1_CC_IRQHandler+0x10>)
 8003b7e:	f008 fed5 	bl	800c92c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20037884 	.word	0x20037884

08003b8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b90:	4802      	ldr	r0, [pc, #8]	; (8003b9c <TIM2_IRQHandler+0x10>)
 8003b92:	f008 fecb 	bl	800c92c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	200378d0 	.word	0x200378d0

08003ba0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8003ba4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003ba8:	f004 fdba 	bl	8008720 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TS_INT_Pin);
 8003bac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003bb0:	f004 fdb6 	bl	8008720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003bb4:	bf00      	nop
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003bbc:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <SDMMC1_IRQHandler+0x10>)
 8003bbe:	f007 fd05 	bl	800b5cc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	2003773c 	.word	0x2003773c

08003bcc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8003bd0:	4802      	ldr	r0, [pc, #8]	; (8003bdc <DMA2_Stream3_IRQHandler+0x10>)
 8003bd2:	f003 fd9f 	bl	8007714 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	200377c0 	.word	0x200377c0

08003be0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8003be4:	4802      	ldr	r0, [pc, #8]	; (8003bf0 <DMA2_Stream6_IRQHandler+0x10>)
 8003be6:	f003 fd95 	bl	8007714 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20037820 	.word	0x20037820

08003bf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return 1;
 8003bf8:	2301      	movs	r3, #1
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <_kill>:

int _kill(int pid, int sig)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c0e:	f00e fd4b 	bl	80126a8 <__errno>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2216      	movs	r2, #22
 8003c16:	601a      	str	r2, [r3, #0]
  return -1;
 8003c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <_exit>:

void _exit (int status)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff ffe7 	bl	8003c04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c36:	e7fe      	b.n	8003c36 <_exit+0x12>

08003c38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	e00a      	b.n	8003c60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c4a:	f3af 8000 	nop.w
 8003c4e:	4601      	mov	r1, r0
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	60ba      	str	r2, [r7, #8]
 8003c56:	b2ca      	uxtb	r2, r1
 8003c58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	dbf0      	blt.n	8003c4a <_read+0x12>
  }

  return len;
 8003c68:	687b      	ldr	r3, [r7, #4]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	e009      	b.n	8003c98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	60ba      	str	r2, [r7, #8]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fd fe29 	bl	80018e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	3301      	adds	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	dbf1      	blt.n	8003c84 <_write+0x12>
  }
  return len;
 8003ca0:	687b      	ldr	r3, [r7, #4]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <_close>:

int _close(int file)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cd2:	605a      	str	r2, [r3, #4]
  return 0;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <_isatty>:

int _isatty(int file)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cea:	2301      	movs	r3, #1
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d1c:	4a14      	ldr	r2, [pc, #80]	; (8003d70 <_sbrk+0x5c>)
 8003d1e:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <_sbrk+0x60>)
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d28:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <_sbrk+0x64>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d102      	bne.n	8003d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <_sbrk+0x64>)
 8003d32:	4a12      	ldr	r2, [pc, #72]	; (8003d7c <_sbrk+0x68>)
 8003d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <_sbrk+0x64>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d207      	bcs.n	8003d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d44:	f00e fcb0 	bl	80126a8 <__errno>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	220c      	movs	r2, #12
 8003d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d52:	e009      	b.n	8003d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d54:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <_sbrk+0x64>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <_sbrk+0x64>)
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4413      	add	r3, r2
 8003d62:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <_sbrk+0x64>)
 8003d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d66:	68fb      	ldr	r3, [r7, #12]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20050000 	.word	0x20050000
 8003d74:	00000400 	.word	0x00000400
 8003d78:	20037880 	.word	0x20037880
 8003d7c:	20038270 	.word	0x20038270

08003d80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <SystemInit+0x20>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8a:	4a05      	ldr	r2, [pc, #20]	; (8003da0 <SystemInit+0x20>)
 8003d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	e000ed00 	.word	0xe000ed00

08003da4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003daa:	f107 0314 	add.w	r3, r7, #20
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	605a      	str	r2, [r3, #4]
 8003db4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003db6:	1d3b      	adds	r3, r7, #4
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003dc2:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <MX_TIM1_Init+0xac>)
 8003dc4:	4a23      	ldr	r2, [pc, #140]	; (8003e54 <MX_TIM1_Init+0xb0>)
 8003dc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003dc8:	4b21      	ldr	r3, [pc, #132]	; (8003e50 <MX_TIM1_Init+0xac>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <MX_TIM1_Init+0xac>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003dd4:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <MX_TIM1_Init+0xac>)
 8003dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ddc:	4b1c      	ldr	r3, [pc, #112]	; (8003e50 <MX_TIM1_Init+0xac>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003de2:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <MX_TIM1_Init+0xac>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003de8:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <MX_TIM1_Init+0xac>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003dee:	4818      	ldr	r0, [pc, #96]	; (8003e50 <MX_TIM1_Init+0xac>)
 8003df0:	f008 fbf4 	bl	800c5dc <HAL_TIM_IC_Init>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003dfa:	f7ff fcb3 	bl	8003764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e0a:	f107 0314 	add.w	r3, r7, #20
 8003e0e:	4619      	mov	r1, r3
 8003e10:	480f      	ldr	r0, [pc, #60]	; (8003e50 <MX_TIM1_Init+0xac>)
 8003e12:	f009 fab9 	bl	800d388 <HAL_TIMEx_MasterConfigSynchronization>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003e1c:	f7ff fca2 	bl	8003764 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003e20:	2300      	movs	r3, #0
 8003e22:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e24:	2301      	movs	r3, #1
 8003e26:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003e30:	1d3b      	adds	r3, r7, #4
 8003e32:	2200      	movs	r2, #0
 8003e34:	4619      	mov	r1, r3
 8003e36:	4806      	ldr	r0, [pc, #24]	; (8003e50 <MX_TIM1_Init+0xac>)
 8003e38:	f008 fe97 	bl	800cb6a <HAL_TIM_IC_ConfigChannel>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8003e42:	f7ff fc8f 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003e46:	bf00      	nop
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20037884 	.word	0x20037884
 8003e54:	40010000 	.word	0x40010000

08003e58 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e5e:	f107 0310 	add.w	r3, r7, #16
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	609a      	str	r2, [r3, #8]
 8003e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e6c:	1d3b      	adds	r3, r7, #4
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	605a      	str	r2, [r3, #4]
 8003e74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e76:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <MX_TIM2_Init+0xa0>)
 8003e78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 8003e7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <MX_TIM2_Init+0xa0>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e84:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <MX_TIM2_Init+0xa0>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2-1;
 8003e8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ef8 <MX_TIM2_Init+0xa0>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e90:	4b19      	ldr	r3, [pc, #100]	; (8003ef8 <MX_TIM2_Init+0xa0>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e96:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <MX_TIM2_Init+0xa0>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e9c:	4816      	ldr	r0, [pc, #88]	; (8003ef8 <MX_TIM2_Init+0xa0>)
 8003e9e:	f008 face 	bl	800c43e <HAL_TIM_Base_Init>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003ea8:	f7ff fc5c 	bl	8003764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eb0:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ebe:	f107 0310 	add.w	r3, r7, #16
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	480c      	ldr	r0, [pc, #48]	; (8003ef8 <MX_TIM2_Init+0xa0>)
 8003ec6:	f008 feed 	bl	800cca4 <HAL_TIM_ConfigClockSource>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8003ed0:	f7ff fc48 	bl	8003764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003edc:	1d3b      	adds	r3, r7, #4
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4805      	ldr	r0, [pc, #20]	; (8003ef8 <MX_TIM2_Init+0xa0>)
 8003ee2:	f009 fa51 	bl	800d388 <HAL_TIMEx_MasterConfigSynchronization>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003eec:	f7ff fc3a 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ef0:	bf00      	nop
 8003ef2:	3720      	adds	r7, #32
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	200378d0 	.word	0x200378d0

08003efc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	; 0x28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f04:	f107 0314 	add.w	r3, r7, #20
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	609a      	str	r2, [r3, #8]
 8003f10:	60da      	str	r2, [r3, #12]
 8003f12:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <HAL_TIM_IC_MspInit+0x8c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d130      	bne.n	8003f80 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f1e:	4b1b      	ldr	r3, [pc, #108]	; (8003f8c <HAL_TIM_IC_MspInit+0x90>)
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	4a1a      	ldr	r2, [pc, #104]	; (8003f8c <HAL_TIM_IC_MspInit+0x90>)
 8003f24:	f043 0301 	orr.w	r3, r3, #1
 8003f28:	6453      	str	r3, [r2, #68]	; 0x44
 8003f2a:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <HAL_TIM_IC_MspInit+0x90>)
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <HAL_TIM_IC_MspInit+0x90>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	4a14      	ldr	r2, [pc, #80]	; (8003f8c <HAL_TIM_IC_MspInit+0x90>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	6313      	str	r3, [r2, #48]	; 0x30
 8003f42:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <HAL_TIM_IC_MspInit+0x90>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f54:	2302      	movs	r3, #2
 8003f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f60:	2301      	movs	r3, #1
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f64:	f107 0314 	add.w	r3, r7, #20
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4809      	ldr	r0, [pc, #36]	; (8003f90 <HAL_TIM_IC_MspInit+0x94>)
 8003f6c:	f004 f8d4 	bl	8008118 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8003f70:	2200      	movs	r2, #0
 8003f72:	2102      	movs	r1, #2
 8003f74:	201b      	movs	r0, #27
 8003f76:	f003 fa08 	bl	800738a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003f7a:	201b      	movs	r0, #27
 8003f7c:	f003 fa21 	bl	80073c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003f80:	bf00      	nop
 8003f82:	3728      	adds	r7, #40	; 0x28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	40020000 	.word	0x40020000

08003f94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	; 0x28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f9c:	f107 0314 	add.w	r3, r7, #20
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	60da      	str	r2, [r3, #12]
 8003faa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb4:	d130      	bne.n	8004018 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fb6:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <HAL_TIM_Base_MspInit+0x8c>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	4a19      	ldr	r2, [pc, #100]	; (8004020 <HAL_TIM_Base_MspInit+0x8c>)
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc2:	4b17      	ldr	r3, [pc, #92]	; (8004020 <HAL_TIM_Base_MspInit+0x8c>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fce:	4b14      	ldr	r3, [pc, #80]	; (8004020 <HAL_TIM_Base_MspInit+0x8c>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	4a13      	ldr	r2, [pc, #76]	; (8004020 <HAL_TIM_Base_MspInit+0x8c>)
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fda:	4b11      	ldr	r3, [pc, #68]	; (8004020 <HAL_TIM_Base_MspInit+0x8c>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fec:	2302      	movs	r3, #2
 8003fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ffc:	f107 0314 	add.w	r3, r7, #20
 8004000:	4619      	mov	r1, r3
 8004002:	4808      	ldr	r0, [pc, #32]	; (8004024 <HAL_TIM_Base_MspInit+0x90>)
 8004004:	f004 f888 	bl	8008118 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8004008:	2200      	movs	r2, #0
 800400a:	2103      	movs	r1, #3
 800400c:	201c      	movs	r0, #28
 800400e:	f003 f9bc 	bl	800738a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004012:	201c      	movs	r0, #28
 8004014:	f003 f9d5 	bl	80073c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004018:	bf00      	nop
 800401a:	3728      	adds	r7, #40	; 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40023800 	.word	0x40023800
 8004024:	40020000 	.word	0x40020000

08004028 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800402c:	4b14      	ldr	r3, [pc, #80]	; (8004080 <MX_USART1_UART_Init+0x58>)
 800402e:	4a15      	ldr	r2, [pc, #84]	; (8004084 <MX_USART1_UART_Init+0x5c>)
 8004030:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004032:	4b13      	ldr	r3, [pc, #76]	; (8004080 <MX_USART1_UART_Init+0x58>)
 8004034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004038:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800403a:	4b11      	ldr	r3, [pc, #68]	; (8004080 <MX_USART1_UART_Init+0x58>)
 800403c:	2200      	movs	r2, #0
 800403e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004040:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <MX_USART1_UART_Init+0x58>)
 8004042:	2200      	movs	r2, #0
 8004044:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004046:	4b0e      	ldr	r3, [pc, #56]	; (8004080 <MX_USART1_UART_Init+0x58>)
 8004048:	2200      	movs	r2, #0
 800404a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800404c:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <MX_USART1_UART_Init+0x58>)
 800404e:	220c      	movs	r2, #12
 8004050:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004052:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <MX_USART1_UART_Init+0x58>)
 8004054:	2200      	movs	r2, #0
 8004056:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004058:	4b09      	ldr	r3, [pc, #36]	; (8004080 <MX_USART1_UART_Init+0x58>)
 800405a:	2200      	movs	r2, #0
 800405c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800405e:	4b08      	ldr	r3, [pc, #32]	; (8004080 <MX_USART1_UART_Init+0x58>)
 8004060:	2200      	movs	r2, #0
 8004062:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004064:	4b06      	ldr	r3, [pc, #24]	; (8004080 <MX_USART1_UART_Init+0x58>)
 8004066:	2200      	movs	r2, #0
 8004068:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800406a:	4805      	ldr	r0, [pc, #20]	; (8004080 <MX_USART1_UART_Init+0x58>)
 800406c:	f009 fa38 	bl	800d4e0 <HAL_UART_Init>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004076:	f7ff fb75 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	2003791c 	.word	0x2003791c
 8004084:	40011000 	.word	0x40011000

08004088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b0ac      	sub	sp, #176	; 0xb0
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004090:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040a0:	f107 0318 	add.w	r3, r7, #24
 80040a4:	2284      	movs	r2, #132	; 0x84
 80040a6:	2100      	movs	r1, #0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f00e faaa 	bl	8012602 <memset>
  if(uartHandle->Instance==USART1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a32      	ldr	r2, [pc, #200]	; (800417c <HAL_UART_MspInit+0xf4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d15c      	bne.n	8004172 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80040b8:	2340      	movs	r3, #64	; 0x40
 80040ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80040bc:	2300      	movs	r3, #0
 80040be:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040c0:	f107 0318 	add.w	r3, r7, #24
 80040c4:	4618      	mov	r0, r3
 80040c6:	f006 f901 	bl	800a2cc <HAL_RCCEx_PeriphCLKConfig>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80040d0:	f7ff fb48 	bl	8003764 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040d4:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <HAL_UART_MspInit+0xf8>)
 80040d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d8:	4a29      	ldr	r2, [pc, #164]	; (8004180 <HAL_UART_MspInit+0xf8>)
 80040da:	f043 0310 	orr.w	r3, r3, #16
 80040de:	6453      	str	r3, [r2, #68]	; 0x44
 80040e0:	4b27      	ldr	r3, [pc, #156]	; (8004180 <HAL_UART_MspInit+0xf8>)
 80040e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ec:	4b24      	ldr	r3, [pc, #144]	; (8004180 <HAL_UART_MspInit+0xf8>)
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	4a23      	ldr	r2, [pc, #140]	; (8004180 <HAL_UART_MspInit+0xf8>)
 80040f2:	f043 0302 	orr.w	r3, r3, #2
 80040f6:	6313      	str	r3, [r2, #48]	; 0x30
 80040f8:	4b21      	ldr	r3, [pc, #132]	; (8004180 <HAL_UART_MspInit+0xf8>)
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004104:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <HAL_UART_MspInit+0xf8>)
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <HAL_UART_MspInit+0xf8>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6313      	str	r3, [r2, #48]	; 0x30
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <HAL_UART_MspInit+0xf8>)
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800411c:	2380      	movs	r3, #128	; 0x80
 800411e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004122:	2302      	movs	r3, #2
 8004124:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004128:	2300      	movs	r3, #0
 800412a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800412e:	2303      	movs	r3, #3
 8004130:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004134:	2307      	movs	r3, #7
 8004136:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800413a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800413e:	4619      	mov	r1, r3
 8004140:	4810      	ldr	r0, [pc, #64]	; (8004184 <HAL_UART_MspInit+0xfc>)
 8004142:	f003 ffe9 	bl	8008118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800414a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414e:	2302      	movs	r3, #2
 8004150:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004154:	2300      	movs	r3, #0
 8004156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800415a:	2303      	movs	r3, #3
 800415c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004160:	2307      	movs	r3, #7
 8004162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004166:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800416a:	4619      	mov	r1, r3
 800416c:	4806      	ldr	r0, [pc, #24]	; (8004188 <HAL_UART_MspInit+0x100>)
 800416e:	f003 ffd3 	bl	8008118 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004172:	bf00      	nop
 8004174:	37b0      	adds	r7, #176	; 0xb0
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40011000 	.word	0x40011000
 8004180:	40023800 	.word	0x40023800
 8004184:	40020400 	.word	0x40020400
 8004188:	40020000 	.word	0x40020000

0800418c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800418c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004190:	480d      	ldr	r0, [pc, #52]	; (80041c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004192:	490e      	ldr	r1, [pc, #56]	; (80041cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004194:	4a0e      	ldr	r2, [pc, #56]	; (80041d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004198:	e002      	b.n	80041a0 <LoopCopyDataInit>

0800419a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800419a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800419c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800419e:	3304      	adds	r3, #4

080041a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041a4:	d3f9      	bcc.n	800419a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041a6:	4a0b      	ldr	r2, [pc, #44]	; (80041d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041a8:	4c0b      	ldr	r4, [pc, #44]	; (80041d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80041aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041ac:	e001      	b.n	80041b2 <LoopFillZerobss>

080041ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041b0:	3204      	adds	r2, #4

080041b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041b4:	d3fb      	bcc.n	80041ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80041b6:	f7ff fde3 	bl	8003d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041ba:	f00e fa7b 	bl	80126b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041be:	f7fe f817 	bl	80021f0 <main>
  bx  lr    
 80041c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041c4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80041c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041cc:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 80041d0:	080d6ddc 	.word	0x080d6ddc
  ldr r2, =_sbss
 80041d4:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 80041d8:	20038270 	.word	0x20038270

080041dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041dc:	e7fe      	b.n	80041dc <ADC_IRQHandler>

080041de <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	4603      	mov	r3, r0
 80041e6:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80041e8:	20c8      	movs	r0, #200	; 0xc8
 80041ea:	f000 fc33 	bl	8004a54 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80041ee:	f000 fa7b 	bl	80046e8 <ft5336_I2C_InitializeIfRequired>
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	4603      	mov	r3, r0
 8004202:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8004222:	2300      	movs	r3, #0
 8004224:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8004226:	f000 fa5f 	bl	80046e8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
 800422e:	e010      	b.n	8004252 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	21a8      	movs	r1, #168	; 0xa8
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fbee 	bl	8004a18 <TS_IO_Read>
 800423c:	4603      	mov	r3, r0
 800423e:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8004240:	7b7b      	ldrb	r3, [r7, #13]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b51      	cmp	r3, #81	; 0x51
 8004246:	d101      	bne.n	800424c <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8004248:	2301      	movs	r3, #1
 800424a:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	3301      	adds	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d802      	bhi.n	800425e <ft5336_ReadID+0x4e>
 8004258:	7bbb      	ldrb	r3, [r7, #14]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0e8      	beq.n	8004230 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 800425e:	7b7b      	ldrb	r3, [r7, #13]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	b29b      	uxth	r3, r3
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8004276:	88fb      	ldrh	r3, [r7, #6]
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fa45 	bl	8004708 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	4618      	mov	r0, r3
 8004282:	f000 f933 	bl	80044ec <ft5336_TS_DisableIT>
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800429a:	2300      	movs	r3, #0
 800429c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2102      	movs	r1, #2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fbb7 	bl	8004a18 <TS_IO_Read>
 80042aa:	4603      	mov	r3, r0
 80042ac:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b05      	cmp	r3, #5
 80042c0:	d901      	bls.n	80042c6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <ft5336_TS_DetectTouch+0x50>)
 80042cc:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80042ce:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <ft5336_TS_DetectTouch+0x50>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	b2db      	uxtb	r3, r3
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	200379a4 	.word	0x200379a4

080042e4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004306:	4b6d      	ldr	r3, [pc, #436]	; (80044bc <ft5336_TS_GetXY+0x1d8>)
 8004308:	789a      	ldrb	r2, [r3, #2]
 800430a:	4b6c      	ldr	r3, [pc, #432]	; (80044bc <ft5336_TS_GetXY+0x1d8>)
 800430c:	785b      	ldrb	r3, [r3, #1]
 800430e:	429a      	cmp	r2, r3
 8004310:	f080 80cf 	bcs.w	80044b2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8004314:	4b69      	ldr	r3, [pc, #420]	; (80044bc <ft5336_TS_GetXY+0x1d8>)
 8004316:	789b      	ldrb	r3, [r3, #2]
 8004318:	2b09      	cmp	r3, #9
 800431a:	d871      	bhi.n	8004400 <ft5336_TS_GetXY+0x11c>
 800431c:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <ft5336_TS_GetXY+0x40>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	0800434d 	.word	0x0800434d
 8004328:	0800435f 	.word	0x0800435f
 800432c:	08004371 	.word	0x08004371
 8004330:	08004383 	.word	0x08004383
 8004334:	08004395 	.word	0x08004395
 8004338:	080043a7 	.word	0x080043a7
 800433c:	080043b9 	.word	0x080043b9
 8004340:	080043cb 	.word	0x080043cb
 8004344:	080043dd 	.word	0x080043dd
 8004348:	080043ef 	.word	0x080043ef
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800434c:	2304      	movs	r3, #4
 800434e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8004350:	2303      	movs	r3, #3
 8004352:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8004354:	2306      	movs	r3, #6
 8004356:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8004358:	2305      	movs	r3, #5
 800435a:	753b      	strb	r3, [r7, #20]
      break;
 800435c:	e051      	b.n	8004402 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800435e:	230a      	movs	r3, #10
 8004360:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8004362:	2309      	movs	r3, #9
 8004364:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8004366:	230c      	movs	r3, #12
 8004368:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800436a:	230b      	movs	r3, #11
 800436c:	753b      	strb	r3, [r7, #20]
      break;
 800436e:	e048      	b.n	8004402 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8004370:	2310      	movs	r3, #16
 8004372:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8004374:	230f      	movs	r3, #15
 8004376:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8004378:	2312      	movs	r3, #18
 800437a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800437c:	2311      	movs	r3, #17
 800437e:	753b      	strb	r3, [r7, #20]
      break;
 8004380:	e03f      	b.n	8004402 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8004382:	2316      	movs	r3, #22
 8004384:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8004386:	2315      	movs	r3, #21
 8004388:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800438a:	2318      	movs	r3, #24
 800438c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800438e:	2317      	movs	r3, #23
 8004390:	753b      	strb	r3, [r7, #20]
      break;
 8004392:	e036      	b.n	8004402 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8004394:	231c      	movs	r3, #28
 8004396:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8004398:	231b      	movs	r3, #27
 800439a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800439c:	231e      	movs	r3, #30
 800439e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80043a0:	231d      	movs	r3, #29
 80043a2:	753b      	strb	r3, [r7, #20]
      break;
 80043a4:	e02d      	b.n	8004402 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80043a6:	2322      	movs	r3, #34	; 0x22
 80043a8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80043aa:	2321      	movs	r3, #33	; 0x21
 80043ac:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80043ae:	2324      	movs	r3, #36	; 0x24
 80043b0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80043b2:	2323      	movs	r3, #35	; 0x23
 80043b4:	753b      	strb	r3, [r7, #20]
      break;
 80043b6:	e024      	b.n	8004402 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80043b8:	2328      	movs	r3, #40	; 0x28
 80043ba:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80043bc:	2327      	movs	r3, #39	; 0x27
 80043be:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80043c0:	232a      	movs	r3, #42	; 0x2a
 80043c2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80043c4:	2329      	movs	r3, #41	; 0x29
 80043c6:	753b      	strb	r3, [r7, #20]
      break;
 80043c8:	e01b      	b.n	8004402 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80043ca:	232e      	movs	r3, #46	; 0x2e
 80043cc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80043ce:	232d      	movs	r3, #45	; 0x2d
 80043d0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80043d2:	2330      	movs	r3, #48	; 0x30
 80043d4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80043d6:	232f      	movs	r3, #47	; 0x2f
 80043d8:	753b      	strb	r3, [r7, #20]
      break;
 80043da:	e012      	b.n	8004402 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80043dc:	2334      	movs	r3, #52	; 0x34
 80043de:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80043e0:	2333      	movs	r3, #51	; 0x33
 80043e2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80043e4:	2336      	movs	r3, #54	; 0x36
 80043e6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80043e8:	2335      	movs	r3, #53	; 0x35
 80043ea:	753b      	strb	r3, [r7, #20]
      break;
 80043ec:	e009      	b.n	8004402 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80043ee:	233a      	movs	r3, #58	; 0x3a
 80043f0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80043f2:	2339      	movs	r3, #57	; 0x39
 80043f4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80043f6:	233c      	movs	r3, #60	; 0x3c
 80043f8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80043fa:	233b      	movs	r3, #59	; 0x3b
 80043fc:	753b      	strb	r3, [r7, #20]
      break;
 80043fe:	e000      	b.n	8004402 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8004400:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004402:	89fb      	ldrh	r3, [r7, #14]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	7dfa      	ldrb	r2, [r7, #23]
 8004408:	4611      	mov	r1, r2
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fb04 	bl	8004a18 <TS_IO_Read>
 8004410:	4603      	mov	r3, r0
 8004412:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004414:	7cfb      	ldrb	r3, [r7, #19]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	b29a      	uxth	r2, r3
 800441a:	4b29      	ldr	r3, [pc, #164]	; (80044c0 <ft5336_TS_GetXY+0x1dc>)
 800441c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800441e:	89fb      	ldrh	r3, [r7, #14]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	7dba      	ldrb	r2, [r7, #22]
 8004424:	4611      	mov	r1, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f000 faf6 	bl	8004a18 <TS_IO_Read>
 800442c:	4603      	mov	r3, r0
 800442e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004430:	7cfb      	ldrb	r3, [r7, #19]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800443a:	b21a      	sxth	r2, r3
 800443c:	4b20      	ldr	r3, [pc, #128]	; (80044c0 <ft5336_TS_GetXY+0x1dc>)
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	b21b      	sxth	r3, r3
 8004442:	4313      	orrs	r3, r2
 8004444:	b21b      	sxth	r3, r3
 8004446:	b29a      	uxth	r2, r3
 8004448:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <ft5336_TS_GetXY+0x1dc>)
 800444a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800444c:	4b1c      	ldr	r3, [pc, #112]	; (80044c0 <ft5336_TS_GetXY+0x1dc>)
 800444e:	881a      	ldrh	r2, [r3, #0]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004454:	89fb      	ldrh	r3, [r7, #14]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	7d7a      	ldrb	r2, [r7, #21]
 800445a:	4611      	mov	r1, r2
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fadb 	bl	8004a18 <TS_IO_Read>
 8004462:	4603      	mov	r3, r0
 8004464:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004466:	7cfb      	ldrb	r3, [r7, #19]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	b29a      	uxth	r2, r3
 800446c:	4b14      	ldr	r3, [pc, #80]	; (80044c0 <ft5336_TS_GetXY+0x1dc>)
 800446e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004470:	89fb      	ldrh	r3, [r7, #14]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	7d3a      	ldrb	r2, [r7, #20]
 8004476:	4611      	mov	r1, r2
 8004478:	4618      	mov	r0, r3
 800447a:	f000 facd 	bl	8004a18 <TS_IO_Read>
 800447e:	4603      	mov	r3, r0
 8004480:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004482:	7cfb      	ldrb	r3, [r7, #19]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800448c:	b21a      	sxth	r2, r3
 800448e:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <ft5336_TS_GetXY+0x1dc>)
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	b21b      	sxth	r3, r3
 8004494:	4313      	orrs	r3, r2
 8004496:	b21b      	sxth	r3, r3
 8004498:	b29a      	uxth	r2, r3
 800449a:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <ft5336_TS_GetXY+0x1dc>)
 800449c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800449e:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <ft5336_TS_GetXY+0x1dc>)
 80044a0:	881a      	ldrh	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80044a6:	4b05      	ldr	r3, [pc, #20]	; (80044bc <ft5336_TS_GetXY+0x1d8>)
 80044a8:	789b      	ldrb	r3, [r3, #2]
 80044aa:	3301      	adds	r3, #1
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	4b03      	ldr	r3, [pc, #12]	; (80044bc <ft5336_TS_GetXY+0x1d8>)
 80044b0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80044b2:	bf00      	nop
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	200379a4 	.word	0x200379a4
 80044c0:	200379a8 	.word	0x200379a8

080044c4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4603      	mov	r3, r0
 80044cc:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80044ce:	2300      	movs	r3, #0
 80044d0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80044d2:	2301      	movs	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80044d6:	88fb      	ldrh	r3, [r7, #6]
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	7bfa      	ldrb	r2, [r7, #15]
 80044dc:	21a4      	movs	r1, #164	; 0xa4
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fa80 	bl	80049e4 <TS_IO_Write>
}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80044f6:	2300      	movs	r3, #0
 80044f8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80044fa:	2300      	movs	r3, #0
 80044fc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	7bfa      	ldrb	r2, [r7, #15]
 8004504:	21a4      	movs	r1, #164	; 0xa4
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fa6c 	bl	80049e4 <TS_IO_Write>
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
 8004548:	4603      	mov	r3, r0
 800454a:	6039      	str	r1, [r7, #0]
 800454c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2101      	movs	r1, #1
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fa5d 	bl	8004a18 <TS_IO_Read>
 800455e:	4603      	mov	r3, r0
 8004560:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	601a      	str	r2, [r3, #0]
}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	4603      	mov	r3, r0
 8004582:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004594:	4b4d      	ldr	r3, [pc, #308]	; (80046cc <ft5336_TS_GetTouchInfo+0x158>)
 8004596:	785b      	ldrb	r3, [r3, #1]
 8004598:	461a      	mov	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	4293      	cmp	r3, r2
 800459e:	f080 8090 	bcs.w	80046c2 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b09      	cmp	r3, #9
 80045a6:	d85d      	bhi.n	8004664 <ft5336_TS_GetTouchInfo+0xf0>
 80045a8:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <ft5336_TS_GetTouchInfo+0x3c>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	080045d9 	.word	0x080045d9
 80045b4:	080045e7 	.word	0x080045e7
 80045b8:	080045f5 	.word	0x080045f5
 80045bc:	08004603 	.word	0x08004603
 80045c0:	08004611 	.word	0x08004611
 80045c4:	0800461f 	.word	0x0800461f
 80045c8:	0800462d 	.word	0x0800462d
 80045cc:	0800463b 	.word	0x0800463b
 80045d0:	08004649 	.word	0x08004649
 80045d4:	08004657 	.word	0x08004657
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80045d8:	2303      	movs	r3, #3
 80045da:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80045dc:	2307      	movs	r3, #7
 80045de:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80045e0:	2308      	movs	r3, #8
 80045e2:	757b      	strb	r3, [r7, #21]
      break;
 80045e4:	e03f      	b.n	8004666 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80045e6:	2309      	movs	r3, #9
 80045e8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80045ea:	230d      	movs	r3, #13
 80045ec:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80045ee:	230e      	movs	r3, #14
 80045f0:	757b      	strb	r3, [r7, #21]
      break;
 80045f2:	e038      	b.n	8004666 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80045f4:	230f      	movs	r3, #15
 80045f6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80045f8:	2313      	movs	r3, #19
 80045fa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80045fc:	2314      	movs	r3, #20
 80045fe:	757b      	strb	r3, [r7, #21]
      break;
 8004600:	e031      	b.n	8004666 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8004602:	2315      	movs	r3, #21
 8004604:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8004606:	2319      	movs	r3, #25
 8004608:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800460a:	231a      	movs	r3, #26
 800460c:	757b      	strb	r3, [r7, #21]
      break;
 800460e:	e02a      	b.n	8004666 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8004610:	231b      	movs	r3, #27
 8004612:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8004614:	231f      	movs	r3, #31
 8004616:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8004618:	2320      	movs	r3, #32
 800461a:	757b      	strb	r3, [r7, #21]
      break;
 800461c:	e023      	b.n	8004666 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800461e:	2321      	movs	r3, #33	; 0x21
 8004620:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8004622:	2325      	movs	r3, #37	; 0x25
 8004624:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8004626:	2326      	movs	r3, #38	; 0x26
 8004628:	757b      	strb	r3, [r7, #21]
      break;
 800462a:	e01c      	b.n	8004666 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 800462c:	2327      	movs	r3, #39	; 0x27
 800462e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8004630:	232b      	movs	r3, #43	; 0x2b
 8004632:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8004634:	232c      	movs	r3, #44	; 0x2c
 8004636:	757b      	strb	r3, [r7, #21]
      break;
 8004638:	e015      	b.n	8004666 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800463a:	232d      	movs	r3, #45	; 0x2d
 800463c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800463e:	2331      	movs	r3, #49	; 0x31
 8004640:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8004642:	2332      	movs	r3, #50	; 0x32
 8004644:	757b      	strb	r3, [r7, #21]
      break;
 8004646:	e00e      	b.n	8004666 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8004648:	2333      	movs	r3, #51	; 0x33
 800464a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800464c:	2337      	movs	r3, #55	; 0x37
 800464e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8004650:	2338      	movs	r3, #56	; 0x38
 8004652:	757b      	strb	r3, [r7, #21]
      break;
 8004654:	e007      	b.n	8004666 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8004656:	2339      	movs	r3, #57	; 0x39
 8004658:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800465a:	233d      	movs	r3, #61	; 0x3d
 800465c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800465e:	233e      	movs	r3, #62	; 0x3e
 8004660:	757b      	strb	r3, [r7, #21]
      break;
 8004662:	e000      	b.n	8004666 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8004664:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004666:	89fb      	ldrh	r3, [r7, #14]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	7dfa      	ldrb	r2, [r7, #23]
 800466c:	4611      	mov	r1, r2
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f9d2 	bl	8004a18 <TS_IO_Read>
 8004674:	4603      	mov	r3, r0
 8004676:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8004678:	7d3b      	ldrb	r3, [r7, #20]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	119b      	asrs	r3, r3, #6
 800467e:	f003 0203 	and.w	r2, r3, #3
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8004686:	89fb      	ldrh	r3, [r7, #14]
 8004688:	b2db      	uxtb	r3, r3
 800468a:	7dba      	ldrb	r2, [r7, #22]
 800468c:	4611      	mov	r1, r2
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f9c2 	bl	8004a18 <TS_IO_Read>
 8004694:	4603      	mov	r3, r0
 8004696:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8004698:	7d3b      	ldrb	r3, [r7, #20]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	461a      	mov	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80046a2:	89fb      	ldrh	r3, [r7, #14]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	7d7a      	ldrb	r2, [r7, #21]
 80046a8:	4611      	mov	r1, r2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 f9b4 	bl	8004a18 <TS_IO_Read>
 80046b0:	4603      	mov	r3, r0
 80046b2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80046b4:	7d3b      	ldrb	r3, [r7, #20]
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	111b      	asrs	r3, r3, #4
 80046ba:	f003 0204 	and.w	r2, r3, #4
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80046c2:	bf00      	nop
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	200379a4 	.word	0x200379a4

080046d0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80046d4:	4b03      	ldr	r3, [pc, #12]	; (80046e4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	200379a4 	.word	0x200379a4

080046e8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80046ec:	f7ff fff0 	bl	80046d0 <ft5336_Get_I2C_InitializedStatus>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d104      	bne.n	8004700 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80046f6:	f000 f96b 	bl	80049d0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80046fa:	4b02      	ldr	r3, [pc, #8]	; (8004704 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80046fc:	2201      	movs	r2, #1
 80046fe:	701a      	strb	r2, [r3, #0]
  }
}
 8004700:	bf00      	nop
 8004702:	bd80      	pop	{r7, pc}
 8004704:	200379a4 	.word	0x200379a4

08004708 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8004716:	68fb      	ldr	r3, [r7, #12]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08c      	sub	sp, #48	; 0x30
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a51      	ldr	r2, [pc, #324]	; (8004874 <I2Cx_MspInit+0x150>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d14d      	bne.n	80047d0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004734:	4b50      	ldr	r3, [pc, #320]	; (8004878 <I2Cx_MspInit+0x154>)
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	4a4f      	ldr	r2, [pc, #316]	; (8004878 <I2Cx_MspInit+0x154>)
 800473a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473e:	6313      	str	r3, [r2, #48]	; 0x30
 8004740:	4b4d      	ldr	r3, [pc, #308]	; (8004878 <I2Cx_MspInit+0x154>)
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800474c:	2380      	movs	r3, #128	; 0x80
 800474e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004750:	2312      	movs	r3, #18
 8004752:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004754:	2300      	movs	r3, #0
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004758:	2302      	movs	r3, #2
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800475c:	2304      	movs	r3, #4
 800475e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004760:	f107 031c 	add.w	r3, r7, #28
 8004764:	4619      	mov	r1, r3
 8004766:	4845      	ldr	r0, [pc, #276]	; (800487c <I2Cx_MspInit+0x158>)
 8004768:	f003 fcd6 	bl	8008118 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800476c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004772:	f107 031c 	add.w	r3, r7, #28
 8004776:	4619      	mov	r1, r3
 8004778:	4840      	ldr	r0, [pc, #256]	; (800487c <I2Cx_MspInit+0x158>)
 800477a:	f003 fccd 	bl	8008118 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800477e:	4b3e      	ldr	r3, [pc, #248]	; (8004878 <I2Cx_MspInit+0x154>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	4a3d      	ldr	r2, [pc, #244]	; (8004878 <I2Cx_MspInit+0x154>)
 8004784:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004788:	6413      	str	r3, [r2, #64]	; 0x40
 800478a:	4b3b      	ldr	r3, [pc, #236]	; (8004878 <I2Cx_MspInit+0x154>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8004796:	4b38      	ldr	r3, [pc, #224]	; (8004878 <I2Cx_MspInit+0x154>)
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	4a37      	ldr	r2, [pc, #220]	; (8004878 <I2Cx_MspInit+0x154>)
 800479c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047a0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80047a2:	4b35      	ldr	r3, [pc, #212]	; (8004878 <I2Cx_MspInit+0x154>)
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	4a34      	ldr	r2, [pc, #208]	; (8004878 <I2Cx_MspInit+0x154>)
 80047a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80047ac:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80047ae:	2200      	movs	r2, #0
 80047b0:	210f      	movs	r1, #15
 80047b2:	2048      	movs	r0, #72	; 0x48
 80047b4:	f002 fde9 	bl	800738a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80047b8:	2048      	movs	r0, #72	; 0x48
 80047ba:	f002 fe02 	bl	80073c2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80047be:	2200      	movs	r2, #0
 80047c0:	210f      	movs	r1, #15
 80047c2:	2049      	movs	r0, #73	; 0x49
 80047c4:	f002 fde1 	bl	800738a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80047c8:	2049      	movs	r0, #73	; 0x49
 80047ca:	f002 fdfa 	bl	80073c2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80047ce:	e04d      	b.n	800486c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80047d0:	4b29      	ldr	r3, [pc, #164]	; (8004878 <I2Cx_MspInit+0x154>)
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	4a28      	ldr	r2, [pc, #160]	; (8004878 <I2Cx_MspInit+0x154>)
 80047d6:	f043 0302 	orr.w	r3, r3, #2
 80047da:	6313      	str	r3, [r2, #48]	; 0x30
 80047dc:	4b26      	ldr	r3, [pc, #152]	; (8004878 <I2Cx_MspInit+0x154>)
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80047e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047ec:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80047ee:	2312      	movs	r3, #18
 80047f0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80047f6:	2302      	movs	r3, #2
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80047fa:	2304      	movs	r3, #4
 80047fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80047fe:	f107 031c 	add.w	r3, r7, #28
 8004802:	4619      	mov	r1, r3
 8004804:	481e      	ldr	r0, [pc, #120]	; (8004880 <I2Cx_MspInit+0x15c>)
 8004806:	f003 fc87 	bl	8008118 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800480a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800480e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004810:	f107 031c 	add.w	r3, r7, #28
 8004814:	4619      	mov	r1, r3
 8004816:	481a      	ldr	r0, [pc, #104]	; (8004880 <I2Cx_MspInit+0x15c>)
 8004818:	f003 fc7e 	bl	8008118 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800481c:	4b16      	ldr	r3, [pc, #88]	; (8004878 <I2Cx_MspInit+0x154>)
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	4a15      	ldr	r2, [pc, #84]	; (8004878 <I2Cx_MspInit+0x154>)
 8004822:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004826:	6413      	str	r3, [r2, #64]	; 0x40
 8004828:	4b13      	ldr	r3, [pc, #76]	; (8004878 <I2Cx_MspInit+0x154>)
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8004834:	4b10      	ldr	r3, [pc, #64]	; (8004878 <I2Cx_MspInit+0x154>)
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	4a0f      	ldr	r2, [pc, #60]	; (8004878 <I2Cx_MspInit+0x154>)
 800483a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800483e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004840:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <I2Cx_MspInit+0x154>)
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	4a0c      	ldr	r2, [pc, #48]	; (8004878 <I2Cx_MspInit+0x154>)
 8004846:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800484a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800484c:	2200      	movs	r2, #0
 800484e:	210f      	movs	r1, #15
 8004850:	201f      	movs	r0, #31
 8004852:	f002 fd9a 	bl	800738a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8004856:	201f      	movs	r0, #31
 8004858:	f002 fdb3 	bl	80073c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800485c:	2200      	movs	r2, #0
 800485e:	210f      	movs	r1, #15
 8004860:	2020      	movs	r0, #32
 8004862:	f002 fd92 	bl	800738a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8004866:	2020      	movs	r0, #32
 8004868:	f002 fdab 	bl	80073c2 <HAL_NVIC_EnableIRQ>
}
 800486c:	bf00      	nop
 800486e:	3730      	adds	r7, #48	; 0x30
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	200379ac 	.word	0x200379ac
 8004878:	40023800 	.word	0x40023800
 800487c:	40021c00 	.word	0x40021c00
 8004880:	40020400 	.word	0x40020400

08004884 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f004 fa4d 	bl	8008d2c <HAL_I2C_GetState>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d125      	bne.n	80048e4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a14      	ldr	r2, [pc, #80]	; (80048ec <I2Cx_Init+0x68>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d103      	bne.n	80048a8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <I2Cx_Init+0x6c>)
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e002      	b.n	80048ae <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a12      	ldr	r2, [pc, #72]	; (80048f4 <I2Cx_Init+0x70>)
 80048ac:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a11      	ldr	r2, [pc, #68]	; (80048f8 <I2Cx_Init+0x74>)
 80048b2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff ff23 	bl	8004724 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f003 ff36 	bl	8008750 <HAL_I2C_Init>
  }
}
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	200379ac 	.word	0x200379ac
 80048f0:	40005c00 	.word	0x40005c00
 80048f4:	40005400 	.word	0x40005400
 80048f8:	40912732 	.word	0x40912732

080048fc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	; 0x28
 8004900:	af04      	add	r7, sp, #16
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	4608      	mov	r0, r1
 8004906:	4611      	mov	r1, r2
 8004908:	461a      	mov	r2, r3
 800490a:	4603      	mov	r3, r0
 800490c:	72fb      	strb	r3, [r7, #11]
 800490e:	460b      	mov	r3, r1
 8004910:	813b      	strh	r3, [r7, #8]
 8004912:	4613      	mov	r3, r2
 8004914:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800491a:	7afb      	ldrb	r3, [r7, #11]
 800491c:	b299      	uxth	r1, r3
 800491e:	88f8      	ldrh	r0, [r7, #6]
 8004920:	893a      	ldrh	r2, [r7, #8]
 8004922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004926:	9302      	str	r3, [sp, #8]
 8004928:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	4603      	mov	r3, r0
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f004 f8e0 	bl	8008af8 <HAL_I2C_Mem_Read>
 8004938:	4603      	mov	r3, r0
 800493a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800493c:	7dfb      	ldrb	r3, [r7, #23]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d004      	beq.n	800494c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8004942:	7afb      	ldrb	r3, [r7, #11]
 8004944:	4619      	mov	r1, r3
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f832 	bl	80049b0 <I2Cx_Error>
  }
  return status;    
 800494c:	7dfb      	ldrb	r3, [r7, #23]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b08a      	sub	sp, #40	; 0x28
 800495a:	af04      	add	r7, sp, #16
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	4608      	mov	r0, r1
 8004960:	4611      	mov	r1, r2
 8004962:	461a      	mov	r2, r3
 8004964:	4603      	mov	r3, r0
 8004966:	72fb      	strb	r3, [r7, #11]
 8004968:	460b      	mov	r3, r1
 800496a:	813b      	strh	r3, [r7, #8]
 800496c:	4613      	mov	r3, r2
 800496e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004974:	7afb      	ldrb	r3, [r7, #11]
 8004976:	b299      	uxth	r1, r3
 8004978:	88f8      	ldrh	r0, [r7, #6]
 800497a:	893a      	ldrh	r2, [r7, #8]
 800497c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004980:	9302      	str	r3, [sp, #8]
 8004982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	4603      	mov	r3, r0
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f003 ff9f 	bl	80088d0 <HAL_I2C_Mem_Write>
 8004992:	4603      	mov	r3, r0
 8004994:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004996:	7dfb      	ldrb	r3, [r7, #23]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d004      	beq.n	80049a6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800499c:	7afb      	ldrb	r3, [r7, #11]
 800499e:	4619      	mov	r1, r3
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f805 	bl	80049b0 <I2Cx_Error>
  }
  return status;
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f003 ff57 	bl	8008870 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff ff5e 	bl	8004884 <I2Cx_Init>
}
 80049c8:	bf00      	nop
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80049d4:	4802      	ldr	r0, [pc, #8]	; (80049e0 <TS_IO_Init+0x10>)
 80049d6:	f7ff ff55 	bl	8004884 <I2Cx_Init>
}
 80049da:	bf00      	nop
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	200379ac 	.word	0x200379ac

080049e4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	4603      	mov	r3, r0
 80049ec:	71fb      	strb	r3, [r7, #7]
 80049ee:	460b      	mov	r3, r1
 80049f0:	71bb      	strb	r3, [r7, #6]
 80049f2:	4613      	mov	r3, r2
 80049f4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80049f6:	79bb      	ldrb	r3, [r7, #6]
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	79f9      	ldrb	r1, [r7, #7]
 80049fc:	2301      	movs	r3, #1
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	1d7b      	adds	r3, r7, #5
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2301      	movs	r3, #1
 8004a06:	4803      	ldr	r0, [pc, #12]	; (8004a14 <TS_IO_Write+0x30>)
 8004a08:	f7ff ffa5 	bl	8004956 <I2Cx_WriteMultiple>
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	200379ac 	.word	0x200379ac

08004a18 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	4603      	mov	r3, r0
 8004a20:	460a      	mov	r2, r1
 8004a22:	71fb      	strb	r3, [r7, #7]
 8004a24:	4613      	mov	r3, r2
 8004a26:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004a2c:	79bb      	ldrb	r3, [r7, #6]
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	79f9      	ldrb	r1, [r7, #7]
 8004a32:	2301      	movs	r3, #1
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	f107 030f 	add.w	r3, r7, #15
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	4804      	ldr	r0, [pc, #16]	; (8004a50 <TS_IO_Read+0x38>)
 8004a40:	f7ff ff5c 	bl	80048fc <I2Cx_ReadMultiple>

  return read_value;
 8004a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	200379ac 	.word	0x200379ac

08004a54 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f001 ff9b 	bl	8006998 <HAL_Delay>
}
 8004a62:	bf00      	nop
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8004a70:	4b31      	ldr	r3, [pc, #196]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004a72:	2228      	movs	r2, #40	; 0x28
 8004a74:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8004a76:	4b30      	ldr	r3, [pc, #192]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004a78:	2209      	movs	r2, #9
 8004a7a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004a7c:	4b2e      	ldr	r3, [pc, #184]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004a7e:	2235      	movs	r2, #53	; 0x35
 8004a80:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004a82:	4b2d      	ldr	r3, [pc, #180]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004a84:	220b      	movs	r2, #11
 8004a86:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004a88:	4b2b      	ldr	r3, [pc, #172]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004a8a:	f240 121b 	movw	r2, #283	; 0x11b
 8004a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004a90:	4b29      	ldr	r3, [pc, #164]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004a92:	f240 2215 	movw	r2, #533	; 0x215
 8004a96:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8004a98:	4b27      	ldr	r3, [pc, #156]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004a9a:	f240 121d 	movw	r2, #285	; 0x11d
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004aa0:	4b25      	ldr	r3, [pc, #148]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004aa2:	f240 2235 	movw	r2, #565	; 0x235
 8004aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4823      	ldr	r0, [pc, #140]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004aac:	f000 fe1c 	bl	80056e8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8004ab0:	4b21      	ldr	r3, [pc, #132]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004ab2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004ab6:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004ab8:	4b1f      	ldr	r3, [pc, #124]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004aba:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004abe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8004ac0:	4b1d      	ldr	r3, [pc, #116]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8004ac8:	4b1b      	ldr	r3, [pc, #108]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8004ad0:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004ad8:	4b17      	ldr	r3, [pc, #92]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8004ade:	4b16      	ldr	r3, [pc, #88]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8004ae4:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004aea:	4b13      	ldr	r3, [pc, #76]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8004af0:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004af2:	4a12      	ldr	r2, [pc, #72]	; (8004b3c <BSP_LCD_Init+0xd0>)
 8004af4:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8004af6:	4810      	ldr	r0, [pc, #64]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004af8:	f004 fd66 	bl	80095c8 <HAL_LTDC_GetState>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d103      	bne.n	8004b0a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8004b02:	2100      	movs	r1, #0
 8004b04:	480c      	ldr	r0, [pc, #48]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004b06:	f000 fd15 	bl	8005534 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8004b0a:	480b      	ldr	r0, [pc, #44]	; (8004b38 <BSP_LCD_Init+0xcc>)
 8004b0c:	f004 fc4e 	bl	80093ac <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8004b10:	2201      	movs	r2, #1
 8004b12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b16:	480a      	ldr	r0, [pc, #40]	; (8004b40 <BSP_LCD_Init+0xd4>)
 8004b18:	f003 fdce 	bl	80086b8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	2108      	movs	r1, #8
 8004b20:	4808      	ldr	r0, [pc, #32]	; (8004b44 <BSP_LCD_Init+0xd8>)
 8004b22:	f003 fdc9 	bl	80086b8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8004b26:	f000 ff43 	bl	80059b0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004b2a:	4807      	ldr	r0, [pc, #28]	; (8004b48 <BSP_LCD_Init+0xdc>)
 8004b2c:	f000 f916 	bl	8004d5c <BSP_LCD_SetFont>
  
  return LCD_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20037a00 	.word	0x20037a00
 8004b3c:	40016800 	.word	0x40016800
 8004b40:	40022000 	.word	0x40022000
 8004b44:	40022800 	.word	0x40022800
 8004b48:	200000ac 	.word	0x200000ac

08004b4c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004b50:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <BSP_LCD_GetXSize+0x20>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a06      	ldr	r2, [pc, #24]	; (8004b70 <BSP_LCD_GetXSize+0x24>)
 8004b56:	2134      	movs	r1, #52	; 0x34
 8004b58:	fb01 f303 	mul.w	r3, r1, r3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3360      	adds	r3, #96	; 0x60
 8004b60:	681b      	ldr	r3, [r3, #0]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	20037ae8 	.word	0x20037ae8
 8004b70:	20037a00 	.word	0x20037a00

08004b74 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <BSP_LCD_GetYSize+0x20>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a06      	ldr	r2, [pc, #24]	; (8004b98 <BSP_LCD_GetYSize+0x24>)
 8004b7e:	2134      	movs	r1, #52	; 0x34
 8004b80:	fb01 f303 	mul.w	r3, r1, r3
 8004b84:	4413      	add	r3, r2
 8004b86:	3364      	adds	r3, #100	; 0x64
 8004b88:	681b      	ldr	r3, [r3, #0]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	20037ae8 	.word	0x20037ae8
 8004b98:	20037a00 	.word	0x20037a00

08004b9c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b090      	sub	sp, #64	; 0x40
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	6039      	str	r1, [r7, #0]
 8004ba6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004bac:	f7ff ffce 	bl	8004b4c <BSP_LCD_GetXSize>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004bb8:	f7ff ffdc 	bl	8004b74 <BSP_LCD_GetYSize>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8004bc8:	23ff      	movs	r3, #255	; 0xff
 8004bca:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004be2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004be6:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004be8:	2307      	movs	r3, #7
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8004bec:	f7ff ffae 	bl	8004b4c <BSP_LCD_GetXSize>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8004bf4:	f7ff ffbe 	bl	8004b74 <BSP_LCD_GetYSize>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8004bfc:	88fa      	ldrh	r2, [r7, #6]
 8004bfe:	f107 030c 	add.w	r3, r7, #12
 8004c02:	4619      	mov	r1, r3
 8004c04:	4812      	ldr	r0, [pc, #72]	; (8004c50 <BSP_LCD_LayerDefaultInit+0xb4>)
 8004c06:	f004 fca1 	bl	800954c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004c0a:	88fa      	ldrh	r2, [r7, #6]
 8004c0c:	4911      	ldr	r1, [pc, #68]	; (8004c54 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004c0e:	4613      	mov	r3, r2
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	3304      	adds	r3, #4
 8004c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004c20:	88fa      	ldrh	r2, [r7, #6]
 8004c22:	490c      	ldr	r1, [pc, #48]	; (8004c54 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004c24:	4613      	mov	r3, r2
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	3308      	adds	r3, #8
 8004c30:	4a09      	ldr	r2, [pc, #36]	; (8004c58 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004c32:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004c34:	88fa      	ldrh	r2, [r7, #6]
 8004c36:	4907      	ldr	r1, [pc, #28]	; (8004c54 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004c38:	4613      	mov	r3, r2
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8004c46:	601a      	str	r2, [r3, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	3740      	adds	r7, #64	; 0x40
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	20037a00 	.word	0x20037a00
 8004c54:	20037aec 	.word	0x20037aec
 8004c58:	200000ac 	.word	0x200000ac

08004c5c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004c64:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <BSP_LCD_SelectLayer+0x1c>)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6013      	str	r3, [r2, #0]
} 
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20037ae8 	.word	0x20037ae8

08004c7c <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d112      	bne.n	8004cb4 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 8004c8e:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <BSP_LCD_SetLayerVisible+0x78>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	01db      	lsls	r3, r3, #7
 8004c98:	4413      	add	r3, r2
 8004c9a:	3384      	adds	r3, #132	; 0x84
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a15      	ldr	r2, [pc, #84]	; (8004cf4 <BSP_LCD_SetLayerVisible+0x78>)
 8004ca0:	6812      	ldr	r2, [r2, #0]
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	01d2      	lsls	r2, r2, #7
 8004ca8:	440a      	add	r2, r1
 8004caa:	3284      	adds	r2, #132	; 0x84
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	e011      	b.n	8004cd8 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 8004cb4:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <BSP_LCD_SetLayerVisible+0x78>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	01db      	lsls	r3, r3, #7
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3384      	adds	r3, #132	; 0x84
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a0b      	ldr	r2, [pc, #44]	; (8004cf4 <BSP_LCD_SetLayerVisible+0x78>)
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	4611      	mov	r1, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	01d2      	lsls	r2, r2, #7
 8004cce:	440a      	add	r2, r1
 8004cd0:	3284      	adds	r2, #132	; 0x84
 8004cd2:	f023 0301 	bic.w	r3, r3, #1
 8004cd6:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 8004cd8:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <BSP_LCD_SetLayerVisible+0x78>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cde:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <BSP_LCD_SetLayerVisible+0x78>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24
} 
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	20037a00 	.word	0x20037a00

08004cf8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <BSP_LCD_SetTextColor+0x28>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4907      	ldr	r1, [pc, #28]	; (8004d24 <BSP_LCD_SetTextColor+0x2c>)
 8004d06:	4613      	mov	r3, r2
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	601a      	str	r2, [r3, #0]
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	20037ae8 	.word	0x20037ae8
 8004d24:	20037aec 	.word	0x20037aec

08004d28 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004d30:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <BSP_LCD_SetBackColor+0x2c>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	4908      	ldr	r1, [pc, #32]	; (8004d58 <BSP_LCD_SetBackColor+0x30>)
 8004d36:	4613      	mov	r3, r2
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	3304      	adds	r3, #4
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	601a      	str	r2, [r3, #0]
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	20037ae8 	.word	0x20037ae8
 8004d58:	20037aec 	.word	0x20037aec

08004d5c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8004d64:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <BSP_LCD_SetFont+0x2c>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4908      	ldr	r1, [pc, #32]	; (8004d8c <BSP_LCD_SetFont+0x30>)
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	3308      	adds	r3, #8
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	601a      	str	r2, [r3, #0]
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	20037ae8 	.word	0x20037ae8
 8004d8c:	20037aec 	.word	0x20037aec

08004d90 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8004d94:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <BSP_LCD_GetFont+0x24>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	4907      	ldr	r1, [pc, #28]	; (8004db8 <BSP_LCD_GetFont+0x28>)
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	3308      	adds	r3, #8
 8004da6:	681b      	ldr	r3, [r3, #0]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	20037ae8 	.word	0x20037ae8
 8004db8:	20037aec 	.word	0x20037aec

08004dbc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004dc4:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <BSP_LCD_Clear+0x48>)
 8004dc6:	681c      	ldr	r4, [r3, #0]
 8004dc8:	4b0e      	ldr	r3, [pc, #56]	; (8004e04 <BSP_LCD_Clear+0x48>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a0e      	ldr	r2, [pc, #56]	; (8004e08 <BSP_LCD_Clear+0x4c>)
 8004dce:	2134      	movs	r1, #52	; 0x34
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	335c      	adds	r3, #92	; 0x5c
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461e      	mov	r6, r3
 8004ddc:	f7ff feb6 	bl	8004b4c <BSP_LCD_GetXSize>
 8004de0:	4605      	mov	r5, r0
 8004de2:	f7ff fec7 	bl	8004b74 <BSP_LCD_GetYSize>
 8004de6:	4602      	mov	r2, r0
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	9301      	str	r3, [sp, #4]
 8004dec:	2300      	movs	r3, #0
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	4613      	mov	r3, r2
 8004df2:	462a      	mov	r2, r5
 8004df4:	4631      	mov	r1, r6
 8004df6:	4620      	mov	r0, r4
 8004df8:	f000 fd4a 	bl	8005890 <LL_FillBuffer>
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e04:	20037ae8 	.word	0x20037ae8
 8004e08:	20037a00 	.word	0x20037a00

08004e0c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004e0c:	b590      	push	{r4, r7, lr}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	80fb      	strh	r3, [r7, #6]
 8004e16:	460b      	mov	r3, r1
 8004e18:	80bb      	strh	r3, [r7, #4]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004e1e:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <BSP_LCD_DisplayChar+0x80>)
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	491b      	ldr	r1, [pc, #108]	; (8004e90 <BSP_LCD_DisplayChar+0x84>)
 8004e24:	4613      	mov	r3, r2
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	4413      	add	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	3308      	adds	r3, #8
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6819      	ldr	r1, [r3, #0]
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004e3a:	4b14      	ldr	r3, [pc, #80]	; (8004e8c <BSP_LCD_DisplayChar+0x80>)
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4c14      	ldr	r4, [pc, #80]	; (8004e90 <BSP_LCD_DisplayChar+0x84>)
 8004e40:	4613      	mov	r3, r2
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4423      	add	r3, r4
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004e50:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004e54:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <BSP_LCD_DisplayChar+0x80>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	4c0d      	ldr	r4, [pc, #52]	; (8004e90 <BSP_LCD_DisplayChar+0x84>)
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4423      	add	r3, r4
 8004e64:	3308      	adds	r3, #8
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	889b      	ldrh	r3, [r3, #4]
 8004e6a:	3307      	adds	r3, #7
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	da00      	bge.n	8004e72 <BSP_LCD_DisplayChar+0x66>
 8004e70:	3307      	adds	r3, #7
 8004e72:	10db      	asrs	r3, r3, #3
 8004e74:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004e78:	18ca      	adds	r2, r1, r3
 8004e7a:	88b9      	ldrh	r1, [r7, #4]
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fc4e 	bl	8005720 <DrawChar>
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd90      	pop	{r4, r7, pc}
 8004e8c:	20037ae8 	.word	0x20037ae8
 8004e90:	20037aec 	.word	0x20037aec

08004e94 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004e94:	b5b0      	push	{r4, r5, r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60ba      	str	r2, [r7, #8]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	81fb      	strh	r3, [r7, #14]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	81bb      	strh	r3, [r7, #12]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	83fb      	strh	r3, [r7, #30]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8004ebe:	e002      	b.n	8004ec6 <BSP_LCD_DisplayStringAt+0x32>
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	617a      	str	r2, [r7, #20]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f6      	bne.n	8004ec0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8004ed2:	f7ff fe3b 	bl	8004b4c <BSP_LCD_GetXSize>
 8004ed6:	4601      	mov	r1, r0
 8004ed8:	4b50      	ldr	r3, [pc, #320]	; (800501c <BSP_LCD_DisplayStringAt+0x188>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	4850      	ldr	r0, [pc, #320]	; (8005020 <BSP_LCD_DisplayStringAt+0x18c>)
 8004ede:	4613      	mov	r3, r2
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4403      	add	r3, r0
 8004ee8:	3308      	adds	r3, #8
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	889b      	ldrh	r3, [r3, #4]
 8004eee:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ef2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d01c      	beq.n	8004f34 <BSP_LCD_DisplayStringAt+0xa0>
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	dc33      	bgt.n	8004f66 <BSP_LCD_DisplayStringAt+0xd2>
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d002      	beq.n	8004f08 <BSP_LCD_DisplayStringAt+0x74>
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d019      	beq.n	8004f3a <BSP_LCD_DisplayStringAt+0xa6>
 8004f06:	e02e      	b.n	8004f66 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	1ad1      	subs	r1, r2, r3
 8004f0e:	4b43      	ldr	r3, [pc, #268]	; (800501c <BSP_LCD_DisplayStringAt+0x188>)
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4843      	ldr	r0, [pc, #268]	; (8005020 <BSP_LCD_DisplayStringAt+0x18c>)
 8004f14:	4613      	mov	r3, r2
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4403      	add	r3, r0
 8004f1e:	3308      	adds	r3, #8
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	889b      	ldrh	r3, [r3, #4]
 8004f24:	fb01 f303 	mul.w	r3, r1, r3
 8004f28:	085b      	lsrs	r3, r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	89fb      	ldrh	r3, [r7, #14]
 8004f2e:	4413      	add	r3, r2
 8004f30:	83fb      	strh	r3, [r7, #30]
      break;
 8004f32:	e01b      	b.n	8004f6c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8004f34:	89fb      	ldrh	r3, [r7, #14]
 8004f36:	83fb      	strh	r3, [r7, #30]
      break;
 8004f38:	e018      	b.n	8004f6c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	b299      	uxth	r1, r3
 8004f42:	4b36      	ldr	r3, [pc, #216]	; (800501c <BSP_LCD_DisplayStringAt+0x188>)
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	4836      	ldr	r0, [pc, #216]	; (8005020 <BSP_LCD_DisplayStringAt+0x18c>)
 8004f48:	4613      	mov	r3, r2
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4403      	add	r3, r0
 8004f52:	3308      	adds	r3, #8
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	889b      	ldrh	r3, [r3, #4]
 8004f58:	fb11 f303 	smulbb	r3, r1, r3
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	89fb      	ldrh	r3, [r7, #14]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	83fb      	strh	r3, [r7, #30]
      break;
 8004f64:	e002      	b.n	8004f6c <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8004f66:	89fb      	ldrh	r3, [r7, #14]
 8004f68:	83fb      	strh	r3, [r7, #30]
      break;
 8004f6a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8004f6c:	8bfb      	ldrh	r3, [r7, #30]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <BSP_LCD_DisplayStringAt+0xe6>
 8004f72:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	da1d      	bge.n	8004fb6 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004f7e:	e01a      	b.n	8004fb6 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	781a      	ldrb	r2, [r3, #0]
 8004f84:	89b9      	ldrh	r1, [r7, #12]
 8004f86:	8bfb      	ldrh	r3, [r7, #30]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff ff3f 	bl	8004e0c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8004f8e:	4b23      	ldr	r3, [pc, #140]	; (800501c <BSP_LCD_DisplayStringAt+0x188>)
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	4923      	ldr	r1, [pc, #140]	; (8005020 <BSP_LCD_DisplayStringAt+0x18c>)
 8004f94:	4613      	mov	r3, r2
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	4413      	add	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	889a      	ldrh	r2, [r3, #4]
 8004fa4:	8bfb      	ldrh	r3, [r7, #30]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	3301      	adds	r3, #1
 8004fae:	60bb      	str	r3, [r7, #8]
    i++;
 8004fb0:	8bbb      	ldrh	r3, [r7, #28]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	bf14      	ite	ne
 8004fbe:	2301      	movne	r3, #1
 8004fc0:	2300      	moveq	r3, #0
 8004fc2:	b2dc      	uxtb	r4, r3
 8004fc4:	f7ff fdc2 	bl	8004b4c <BSP_LCD_GetXSize>
 8004fc8:	8bb9      	ldrh	r1, [r7, #28]
 8004fca:	4b14      	ldr	r3, [pc, #80]	; (800501c <BSP_LCD_DisplayStringAt+0x188>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4d14      	ldr	r5, [pc, #80]	; (8005020 <BSP_LCD_DisplayStringAt+0x18c>)
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	442b      	add	r3, r5
 8004fda:	3308      	adds	r3, #8
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	889b      	ldrh	r3, [r3, #4]
 8004fe0:	fb01 f303 	mul.w	r3, r1, r3
 8004fe4:	1ac3      	subs	r3, r0, r3
 8004fe6:	b299      	uxth	r1, r3
 8004fe8:	4b0c      	ldr	r3, [pc, #48]	; (800501c <BSP_LCD_DisplayStringAt+0x188>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	480c      	ldr	r0, [pc, #48]	; (8005020 <BSP_LCD_DisplayStringAt+0x18c>)
 8004fee:	4613      	mov	r3, r2
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4403      	add	r3, r0
 8004ff8:	3308      	adds	r3, #8
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	889b      	ldrh	r3, [r3, #4]
 8004ffe:	4299      	cmp	r1, r3
 8005000:	bf2c      	ite	cs
 8005002:	2301      	movcs	r3, #1
 8005004:	2300      	movcc	r3, #0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	4023      	ands	r3, r4
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1b7      	bne.n	8004f80 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8005010:	bf00      	nop
 8005012:	bf00      	nop
 8005014:	3720      	adds	r7, #32
 8005016:	46bd      	mov	sp, r7
 8005018:	bdb0      	pop	{r4, r5, r7, pc}
 800501a:	bf00      	nop
 800501c:	20037ae8 	.word	0x20037ae8
 8005020:	20037aec 	.word	0x20037aec

08005024 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	6039      	str	r1, [r7, #0]
 800502e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8005030:	f7ff feae 	bl	8004d90 <BSP_LCD_GetFont>
 8005034:	4603      	mov	r3, r0
 8005036:	88db      	ldrh	r3, [r3, #6]
 8005038:	88fa      	ldrh	r2, [r7, #6]
 800503a:	fb12 f303 	smulbb	r3, r2, r3
 800503e:	b299      	uxth	r1, r3
 8005040:	2303      	movs	r3, #3
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	2000      	movs	r0, #0
 8005046:	f7ff ff25 	bl	8004e94 <BSP_LCD_DisplayStringAt>
}
 800504a:	bf00      	nop
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005054:	b5b0      	push	{r4, r5, r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af02      	add	r7, sp, #8
 800505a:	4603      	mov	r3, r0
 800505c:	80fb      	strh	r3, [r7, #6]
 800505e:	460b      	mov	r3, r1
 8005060:	80bb      	strh	r3, [r7, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800506a:	4b26      	ldr	r3, [pc, #152]	; (8005104 <BSP_LCD_DrawHLine+0xb0>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a26      	ldr	r2, [pc, #152]	; (8005108 <BSP_LCD_DrawHLine+0xb4>)
 8005070:	2134      	movs	r1, #52	; 0x34
 8005072:	fb01 f303 	mul.w	r3, r1, r3
 8005076:	4413      	add	r3, r2
 8005078:	3348      	adds	r3, #72	; 0x48
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d114      	bne.n	80050aa <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005080:	4b20      	ldr	r3, [pc, #128]	; (8005104 <BSP_LCD_DrawHLine+0xb0>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a20      	ldr	r2, [pc, #128]	; (8005108 <BSP_LCD_DrawHLine+0xb4>)
 8005086:	2134      	movs	r1, #52	; 0x34
 8005088:	fb01 f303 	mul.w	r3, r1, r3
 800508c:	4413      	add	r3, r2
 800508e:	335c      	adds	r3, #92	; 0x5c
 8005090:	681c      	ldr	r4, [r3, #0]
 8005092:	f7ff fd5b 	bl	8004b4c <BSP_LCD_GetXSize>
 8005096:	4602      	mov	r2, r0
 8005098:	88bb      	ldrh	r3, [r7, #4]
 800509a:	fb03 f202 	mul.w	r2, r3, r2
 800509e:	88fb      	ldrh	r3, [r7, #6]
 80050a0:	4413      	add	r3, r2
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	4423      	add	r3, r4
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	e013      	b.n	80050d2 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80050aa:	4b16      	ldr	r3, [pc, #88]	; (8005104 <BSP_LCD_DrawHLine+0xb0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a16      	ldr	r2, [pc, #88]	; (8005108 <BSP_LCD_DrawHLine+0xb4>)
 80050b0:	2134      	movs	r1, #52	; 0x34
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	335c      	adds	r3, #92	; 0x5c
 80050ba:	681c      	ldr	r4, [r3, #0]
 80050bc:	f7ff fd46 	bl	8004b4c <BSP_LCD_GetXSize>
 80050c0:	4602      	mov	r2, r0
 80050c2:	88bb      	ldrh	r3, [r7, #4]
 80050c4:	fb03 f202 	mul.w	r2, r3, r2
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4423      	add	r3, r4
 80050d0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80050d2:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <BSP_LCD_DrawHLine+0xb0>)
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	68f9      	ldr	r1, [r7, #12]
 80050d8:	887c      	ldrh	r4, [r7, #2]
 80050da:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <BSP_LCD_DrawHLine+0xb0>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4d0b      	ldr	r5, [pc, #44]	; (800510c <BSP_LCD_DrawHLine+0xb8>)
 80050e0:	4613      	mov	r3, r2
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	4413      	add	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	442b      	add	r3, r5
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	2300      	movs	r3, #0
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	2301      	movs	r3, #1
 80050f4:	4622      	mov	r2, r4
 80050f6:	f000 fbcb 	bl	8005890 <LL_FillBuffer>
}
 80050fa:	bf00      	nop
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bdb0      	pop	{r4, r5, r7, pc}
 8005102:	bf00      	nop
 8005104:	20037ae8 	.word	0x20037ae8
 8005108:	20037a00 	.word	0x20037a00
 800510c:	20037aec 	.word	0x20037aec

08005110 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005112:	b087      	sub	sp, #28
 8005114:	af02      	add	r7, sp, #8
 8005116:	4603      	mov	r3, r0
 8005118:	80fb      	strh	r3, [r7, #6]
 800511a:	460b      	mov	r3, r1
 800511c:	80bb      	strh	r3, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005126:	4b28      	ldr	r3, [pc, #160]	; (80051c8 <BSP_LCD_DrawVLine+0xb8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a28      	ldr	r2, [pc, #160]	; (80051cc <BSP_LCD_DrawVLine+0xbc>)
 800512c:	2134      	movs	r1, #52	; 0x34
 800512e:	fb01 f303 	mul.w	r3, r1, r3
 8005132:	4413      	add	r3, r2
 8005134:	3348      	adds	r3, #72	; 0x48
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b02      	cmp	r3, #2
 800513a:	d114      	bne.n	8005166 <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800513c:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <BSP_LCD_DrawVLine+0xb8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a22      	ldr	r2, [pc, #136]	; (80051cc <BSP_LCD_DrawVLine+0xbc>)
 8005142:	2134      	movs	r1, #52	; 0x34
 8005144:	fb01 f303 	mul.w	r3, r1, r3
 8005148:	4413      	add	r3, r2
 800514a:	335c      	adds	r3, #92	; 0x5c
 800514c:	681c      	ldr	r4, [r3, #0]
 800514e:	f7ff fcfd 	bl	8004b4c <BSP_LCD_GetXSize>
 8005152:	4602      	mov	r2, r0
 8005154:	88bb      	ldrh	r3, [r7, #4]
 8005156:	fb03 f202 	mul.w	r2, r3, r2
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	4413      	add	r3, r2
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	4423      	add	r3, r4
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	e013      	b.n	800518e <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005166:	4b18      	ldr	r3, [pc, #96]	; (80051c8 <BSP_LCD_DrawVLine+0xb8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a18      	ldr	r2, [pc, #96]	; (80051cc <BSP_LCD_DrawVLine+0xbc>)
 800516c:	2134      	movs	r1, #52	; 0x34
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	4413      	add	r3, r2
 8005174:	335c      	adds	r3, #92	; 0x5c
 8005176:	681c      	ldr	r4, [r3, #0]
 8005178:	f7ff fce8 	bl	8004b4c <BSP_LCD_GetXSize>
 800517c:	4602      	mov	r2, r0
 800517e:	88bb      	ldrh	r3, [r7, #4]
 8005180:	fb03 f202 	mul.w	r2, r3, r2
 8005184:	88fb      	ldrh	r3, [r7, #6]
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4423      	add	r3, r4
 800518c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800518e:	4b0e      	ldr	r3, [pc, #56]	; (80051c8 <BSP_LCD_DrawVLine+0xb8>)
 8005190:	681c      	ldr	r4, [r3, #0]
 8005192:	68fd      	ldr	r5, [r7, #12]
 8005194:	887e      	ldrh	r6, [r7, #2]
 8005196:	f7ff fcd9 	bl	8004b4c <BSP_LCD_GetXSize>
 800519a:	4603      	mov	r3, r0
 800519c:	1e59      	subs	r1, r3, #1
 800519e:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <BSP_LCD_DrawVLine+0xb8>)
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	480b      	ldr	r0, [pc, #44]	; (80051d0 <BSP_LCD_DrawVLine+0xc0>)
 80051a4:	4613      	mov	r3, r2
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4403      	add	r3, r0
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	9301      	str	r3, [sp, #4]
 80051b2:	9100      	str	r1, [sp, #0]
 80051b4:	4633      	mov	r3, r6
 80051b6:	2201      	movs	r2, #1
 80051b8:	4629      	mov	r1, r5
 80051ba:	4620      	mov	r0, r4
 80051bc:	f000 fb68 	bl	8005890 <LL_FillBuffer>
}
 80051c0:	bf00      	nop
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051c8:	20037ae8 	.word	0x20037ae8
 80051cc:	20037a00 	.word	0x20037a00
 80051d0:	20037aec 	.word	0x20037aec

080051d4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80051d4:	b5b0      	push	{r4, r5, r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	4603      	mov	r3, r0
 80051dc:	603a      	str	r2, [r7, #0]
 80051de:	80fb      	strh	r3, [r7, #6]
 80051e0:	460b      	mov	r3, r1
 80051e2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80051e4:	4b1d      	ldr	r3, [pc, #116]	; (800525c <BSP_LCD_DrawPixel+0x88>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1d      	ldr	r2, [pc, #116]	; (8005260 <BSP_LCD_DrawPixel+0x8c>)
 80051ea:	2134      	movs	r1, #52	; 0x34
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	4413      	add	r3, r2
 80051f2:	3348      	adds	r3, #72	; 0x48
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d116      	bne.n	8005228 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80051fa:	4b18      	ldr	r3, [pc, #96]	; (800525c <BSP_LCD_DrawPixel+0x88>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a18      	ldr	r2, [pc, #96]	; (8005260 <BSP_LCD_DrawPixel+0x8c>)
 8005200:	2134      	movs	r1, #52	; 0x34
 8005202:	fb01 f303 	mul.w	r3, r1, r3
 8005206:	4413      	add	r3, r2
 8005208:	335c      	adds	r3, #92	; 0x5c
 800520a:	681c      	ldr	r4, [r3, #0]
 800520c:	88bd      	ldrh	r5, [r7, #4]
 800520e:	f7ff fc9d 	bl	8004b4c <BSP_LCD_GetXSize>
 8005212:	4603      	mov	r3, r0
 8005214:	fb03 f205 	mul.w	r2, r3, r5
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	4413      	add	r3, r2
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	4423      	add	r3, r4
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	b292      	uxth	r2, r2
 8005224:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8005226:	e015      	b.n	8005254 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8005228:	4b0c      	ldr	r3, [pc, #48]	; (800525c <BSP_LCD_DrawPixel+0x88>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a0c      	ldr	r2, [pc, #48]	; (8005260 <BSP_LCD_DrawPixel+0x8c>)
 800522e:	2134      	movs	r1, #52	; 0x34
 8005230:	fb01 f303 	mul.w	r3, r1, r3
 8005234:	4413      	add	r3, r2
 8005236:	335c      	adds	r3, #92	; 0x5c
 8005238:	681c      	ldr	r4, [r3, #0]
 800523a:	88bd      	ldrh	r5, [r7, #4]
 800523c:	f7ff fc86 	bl	8004b4c <BSP_LCD_GetXSize>
 8005240:	4603      	mov	r3, r0
 8005242:	fb03 f205 	mul.w	r2, r3, r5
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4423      	add	r3, r4
 800524e:	461a      	mov	r2, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	6013      	str	r3, [r2, #0]
}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bdb0      	pop	{r4, r5, r7, pc}
 800525c:	20037ae8 	.word	0x20037ae8
 8005260:	20037a00 	.word	0x20037a00

08005264 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8005264:	b590      	push	{r4, r7, lr}
 8005266:	b08b      	sub	sp, #44	; 0x2c
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
 8005274:	2300      	movs	r3, #0
 8005276:	61bb      	str	r3, [r7, #24]
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	2300      	movs	r3, #0
 800527e:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8005280:	2300      	movs	r3, #0
 8005282:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	330a      	adds	r3, #10
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	461a      	mov	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	330b      	adds	r3, #11
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	441a      	add	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	330c      	adds	r3, #12
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	041b      	lsls	r3, r3, #16
 800529e:	441a      	add	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	330d      	adds	r3, #13
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	061b      	lsls	r3, r3, #24
 80052a8:	4413      	add	r3, r2
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3312      	adds	r3, #18
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3313      	adds	r3, #19
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	441a      	add	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3314      	adds	r3, #20
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	441a      	add	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3315      	adds	r3, #21
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	061b      	lsls	r3, r3, #24
 80052d0:	4413      	add	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3316      	adds	r3, #22
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3317      	adds	r3, #23
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	441a      	add	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3318      	adds	r3, #24
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	041b      	lsls	r3, r3, #16
 80052ee:	441a      	add	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3319      	adds	r3, #25
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	061b      	lsls	r3, r3, #24
 80052f8:	4413      	add	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	331c      	adds	r3, #28
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	331d      	adds	r3, #29
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	4413      	add	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8005310:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <BSP_LCD_DrawBitmap+0x15c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a2b      	ldr	r2, [pc, #172]	; (80053c4 <BSP_LCD_DrawBitmap+0x160>)
 8005316:	2134      	movs	r1, #52	; 0x34
 8005318:	fb01 f303 	mul.w	r3, r1, r3
 800531c:	4413      	add	r3, r2
 800531e:	335c      	adds	r3, #92	; 0x5c
 8005320:	681c      	ldr	r4, [r3, #0]
 8005322:	f7ff fc13 	bl	8004b4c <BSP_LCD_GetXSize>
 8005326:	4602      	mov	r2, r0
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	fb03 f202 	mul.w	r2, r3, r2
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4423      	add	r3, r4
 8005336:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	3b20      	subs	r3, #32
 800533c:	2b07      	cmp	r3, #7
 800533e:	d802      	bhi.n	8005346 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8005340:	2300      	movs	r3, #0
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	e008      	b.n	8005358 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	3b10      	subs	r3, #16
 800534a:	2b07      	cmp	r3, #7
 800534c:	d802      	bhi.n	8005354 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 800534e:	2302      	movs	r3, #2
 8005350:	61fb      	str	r3, [r7, #28]
 8005352:	e001      	b.n	8005358 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8005354:	2301      	movs	r3, #1
 8005356:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	3b01      	subs	r3, #1
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	fb02 f303 	mul.w	r3, r2, r3
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	08d2      	lsrs	r2, r2, #3
 8005366:	fb03 f202 	mul.w	r2, r3, r2
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	4413      	add	r3, r2
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	4413      	add	r3, r2
 8005372:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8005374:	2300      	movs	r3, #0
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
 8005378:	e018      	b.n	80053ac <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 800537a:	6a39      	ldr	r1, [r7, #32]
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fad1 	bl	8005928 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8005386:	f7ff fbe1 	bl	8004b4c <BSP_LCD_GetXSize>
 800538a:	4603      	mov	r3, r0
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	6a3a      	ldr	r2, [r7, #32]
 8005390:	4413      	add	r3, r2
 8005392:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	08db      	lsrs	r3, r3, #3
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	fb02 f303 	mul.w	r3, r2, r3
 800539e:	425b      	negs	r3, r3
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	4413      	add	r3, r2
 80053a4:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	3301      	adds	r3, #1
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
 80053ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d3e2      	bcc.n	800537a <BSP_LCD_DrawBitmap+0x116>
  } 
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop
 80053b8:	372c      	adds	r7, #44	; 0x2c
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd90      	pop	{r4, r7, pc}
 80053be:	bf00      	nop
 80053c0:	20037ae8 	.word	0x20037ae8
 80053c4:	20037a00 	.word	0x20037a00

080053c8 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80053c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053cc:	b086      	sub	sp, #24
 80053ce:	af02      	add	r7, sp, #8
 80053d0:	4604      	mov	r4, r0
 80053d2:	4608      	mov	r0, r1
 80053d4:	4611      	mov	r1, r2
 80053d6:	461a      	mov	r2, r3
 80053d8:	4623      	mov	r3, r4
 80053da:	80fb      	strh	r3, [r7, #6]
 80053dc:	4603      	mov	r3, r0
 80053de:	80bb      	strh	r3, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	807b      	strh	r3, [r7, #2]
 80053e4:	4613      	mov	r3, r2
 80053e6:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80053ec:	4b30      	ldr	r3, [pc, #192]	; (80054b0 <BSP_LCD_FillRect+0xe8>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	4930      	ldr	r1, [pc, #192]	; (80054b4 <BSP_LCD_FillRect+0xec>)
 80053f2:	4613      	mov	r3, r2
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff fc7a 	bl	8004cf8 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005404:	4b2a      	ldr	r3, [pc, #168]	; (80054b0 <BSP_LCD_FillRect+0xe8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a2b      	ldr	r2, [pc, #172]	; (80054b8 <BSP_LCD_FillRect+0xf0>)
 800540a:	2134      	movs	r1, #52	; 0x34
 800540c:	fb01 f303 	mul.w	r3, r1, r3
 8005410:	4413      	add	r3, r2
 8005412:	3348      	adds	r3, #72	; 0x48
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d114      	bne.n	8005444 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800541a:	4b25      	ldr	r3, [pc, #148]	; (80054b0 <BSP_LCD_FillRect+0xe8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a26      	ldr	r2, [pc, #152]	; (80054b8 <BSP_LCD_FillRect+0xf0>)
 8005420:	2134      	movs	r1, #52	; 0x34
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	4413      	add	r3, r2
 8005428:	335c      	adds	r3, #92	; 0x5c
 800542a:	681c      	ldr	r4, [r3, #0]
 800542c:	f7ff fb8e 	bl	8004b4c <BSP_LCD_GetXSize>
 8005430:	4602      	mov	r2, r0
 8005432:	88bb      	ldrh	r3, [r7, #4]
 8005434:	fb03 f202 	mul.w	r2, r3, r2
 8005438:	88fb      	ldrh	r3, [r7, #6]
 800543a:	4413      	add	r3, r2
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	4423      	add	r3, r4
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	e013      	b.n	800546c <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005444:	4b1a      	ldr	r3, [pc, #104]	; (80054b0 <BSP_LCD_FillRect+0xe8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1b      	ldr	r2, [pc, #108]	; (80054b8 <BSP_LCD_FillRect+0xf0>)
 800544a:	2134      	movs	r1, #52	; 0x34
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	4413      	add	r3, r2
 8005452:	335c      	adds	r3, #92	; 0x5c
 8005454:	681c      	ldr	r4, [r3, #0]
 8005456:	f7ff fb79 	bl	8004b4c <BSP_LCD_GetXSize>
 800545a:	4602      	mov	r2, r0
 800545c:	88bb      	ldrh	r3, [r7, #4]
 800545e:	fb03 f202 	mul.w	r2, r3, r2
 8005462:	88fb      	ldrh	r3, [r7, #6]
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4423      	add	r3, r4
 800546a:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800546c:	4b10      	ldr	r3, [pc, #64]	; (80054b0 <BSP_LCD_FillRect+0xe8>)
 800546e:	681c      	ldr	r4, [r3, #0]
 8005470:	68fd      	ldr	r5, [r7, #12]
 8005472:	887e      	ldrh	r6, [r7, #2]
 8005474:	f8b7 8000 	ldrh.w	r8, [r7]
 8005478:	f7ff fb68 	bl	8004b4c <BSP_LCD_GetXSize>
 800547c:	4602      	mov	r2, r0
 800547e:	887b      	ldrh	r3, [r7, #2]
 8005480:	1ad1      	subs	r1, r2, r3
 8005482:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <BSP_LCD_FillRect+0xe8>)
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	480b      	ldr	r0, [pc, #44]	; (80054b4 <BSP_LCD_FillRect+0xec>)
 8005488:	4613      	mov	r3, r2
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4403      	add	r3, r0
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	9301      	str	r3, [sp, #4]
 8005496:	9100      	str	r1, [sp, #0]
 8005498:	4643      	mov	r3, r8
 800549a:	4632      	mov	r2, r6
 800549c:	4629      	mov	r1, r5
 800549e:	4620      	mov	r0, r4
 80054a0:	f000 f9f6 	bl	8005890 <LL_FillBuffer>
}
 80054a4:	bf00      	nop
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054ae:	bf00      	nop
 80054b0:	20037ae8 	.word	0x20037ae8
 80054b4:	20037aec 	.word	0x20037aec
 80054b8:	20037a00 	.word	0x20037a00

080054bc <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80054c0:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <BSP_LCD_DisplayOn+0x30>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699a      	ldr	r2, [r3, #24]
 80054c6:	4b09      	ldr	r3, [pc, #36]	; (80054ec <BSP_LCD_DisplayOn+0x30>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0201 	orr.w	r2, r2, #1
 80054ce:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80054d0:	2201      	movs	r2, #1
 80054d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054d6:	4806      	ldr	r0, [pc, #24]	; (80054f0 <BSP_LCD_DisplayOn+0x34>)
 80054d8:	f003 f8ee 	bl	80086b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80054dc:	2201      	movs	r2, #1
 80054de:	2108      	movs	r1, #8
 80054e0:	4804      	ldr	r0, [pc, #16]	; (80054f4 <BSP_LCD_DisplayOn+0x38>)
 80054e2:	f003 f8e9 	bl	80086b8 <HAL_GPIO_WritePin>
}
 80054e6:	bf00      	nop
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20037a00 	.word	0x20037a00
 80054f0:	40022000 	.word	0x40022000
 80054f4:	40022800 	.word	0x40022800

080054f8 <BSP_LCD_DisplayOff>:
/**
  * @brief  Disables the display.
  * @retval None
  */
void BSP_LCD_DisplayOff(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Display Off */
  __HAL_LTDC_DISABLE(&hLtdcHandler);
 80054fc:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <BSP_LCD_DisplayOff+0x30>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	4b09      	ldr	r3, [pc, #36]	; (8005528 <BSP_LCD_DisplayOff+0x30>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0201 	bic.w	r2, r2, #1
 800550a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_RESET);      /* De-assert LCD_DISP pin */
 800550c:	2200      	movs	r2, #0
 800550e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005512:	4806      	ldr	r0, [pc, #24]	; (800552c <BSP_LCD_DisplayOff+0x34>)
 8005514:	f003 f8d0 	bl	80086b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_RESET);/* De-assert LCD_BL_CTRL pin */
 8005518:	2200      	movs	r2, #0
 800551a:	2108      	movs	r1, #8
 800551c:	4804      	ldr	r0, [pc, #16]	; (8005530 <BSP_LCD_DisplayOff+0x38>)
 800551e:	f003 f8cb 	bl	80086b8 <HAL_GPIO_WritePin>
}
 8005522:	bf00      	nop
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20037a00 	.word	0x20037a00
 800552c:	40022000 	.word	0x40022000
 8005530:	40022800 	.word	0x40022800

08005534 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b090      	sub	sp, #64	; 0x40
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800553e:	4b64      	ldr	r3, [pc, #400]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 8005540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005542:	4a63      	ldr	r2, [pc, #396]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 8005544:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005548:	6453      	str	r3, [r2, #68]	; 0x44
 800554a:	4b61      	ldr	r3, [pc, #388]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005552:	62bb      	str	r3, [r7, #40]	; 0x28
 8005554:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005556:	4b5e      	ldr	r3, [pc, #376]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	4a5d      	ldr	r2, [pc, #372]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 800555c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005560:	6313      	str	r3, [r2, #48]	; 0x30
 8005562:	4b5b      	ldr	r3, [pc, #364]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800556a:	627b      	str	r3, [r7, #36]	; 0x24
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800556e:	4b58      	ldr	r3, [pc, #352]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	4a57      	ldr	r2, [pc, #348]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 8005574:	f043 0310 	orr.w	r3, r3, #16
 8005578:	6313      	str	r3, [r2, #48]	; 0x30
 800557a:	4b55      	ldr	r3, [pc, #340]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 800557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557e:	f003 0310 	and.w	r3, r3, #16
 8005582:	623b      	str	r3, [r7, #32]
 8005584:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005586:	4b52      	ldr	r3, [pc, #328]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	4a51      	ldr	r2, [pc, #324]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 800558c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005590:	6313      	str	r3, [r2, #48]	; 0x30
 8005592:	4b4f      	ldr	r3, [pc, #316]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559a:	61fb      	str	r3, [r7, #28]
 800559c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800559e:	4b4c      	ldr	r3, [pc, #304]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	4a4b      	ldr	r2, [pc, #300]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 80055a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a8:	6313      	str	r3, [r2, #48]	; 0x30
 80055aa:	4b49      	ldr	r3, [pc, #292]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b2:	61bb      	str	r3, [r7, #24]
 80055b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80055b6:	4b46      	ldr	r3, [pc, #280]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	4a45      	ldr	r2, [pc, #276]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 80055bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055c0:	6313      	str	r3, [r2, #48]	; 0x30
 80055c2:	4b43      	ldr	r3, [pc, #268]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80055ce:	4b40      	ldr	r3, [pc, #256]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	4a3f      	ldr	r2, [pc, #252]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 80055d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055d8:	6313      	str	r3, [r2, #48]	; 0x30
 80055da:	4b3d      	ldr	r3, [pc, #244]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80055e6:	4b3a      	ldr	r3, [pc, #232]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	4a39      	ldr	r2, [pc, #228]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 80055ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f0:	6313      	str	r3, [r2, #48]	; 0x30
 80055f2:	4b37      	ldr	r3, [pc, #220]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 80055f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80055fe:	4b34      	ldr	r3, [pc, #208]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 8005600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005602:	4a33      	ldr	r2, [pc, #204]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 8005604:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005608:	6313      	str	r3, [r2, #48]	; 0x30
 800560a:	4b31      	ldr	r3, [pc, #196]	; (80056d0 <BSP_LCD_MspInit+0x19c>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005612:	60bb      	str	r3, [r7, #8]
 8005614:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8005616:	2310      	movs	r3, #16
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800561a:	2302      	movs	r3, #2
 800561c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800561e:	2300      	movs	r3, #0
 8005620:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005622:	2302      	movs	r3, #2
 8005624:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8005626:	230e      	movs	r3, #14
 8005628:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800562a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800562e:	4619      	mov	r1, r3
 8005630:	4828      	ldr	r0, [pc, #160]	; (80056d4 <BSP_LCD_MspInit+0x1a0>)
 8005632:	f002 fd71 	bl	8008118 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8005636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800563a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800563c:	2302      	movs	r3, #2
 800563e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8005640:	2309      	movs	r3, #9
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005644:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005648:	4619      	mov	r1, r3
 800564a:	4823      	ldr	r0, [pc, #140]	; (80056d8 <BSP_LCD_MspInit+0x1a4>)
 800564c:	f002 fd64 	bl	8008118 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8005650:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8005654:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005656:	2302      	movs	r3, #2
 8005658:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800565a:	230e      	movs	r3, #14
 800565c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800565e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005662:	4619      	mov	r1, r3
 8005664:	481d      	ldr	r0, [pc, #116]	; (80056dc <BSP_LCD_MspInit+0x1a8>)
 8005666:	f002 fd57 	bl	8008118 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800566a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005670:	2302      	movs	r3, #2
 8005672:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005674:	230e      	movs	r3, #14
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8005678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800567c:	4619      	mov	r1, r3
 800567e:	4818      	ldr	r0, [pc, #96]	; (80056e0 <BSP_LCD_MspInit+0x1ac>)
 8005680:	f002 fd4a 	bl	8008118 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8005684:	23f7      	movs	r3, #247	; 0xf7
 8005686:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005688:	2302      	movs	r3, #2
 800568a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800568c:	230e      	movs	r3, #14
 800568e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8005690:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005694:	4619      	mov	r1, r3
 8005696:	4813      	ldr	r0, [pc, #76]	; (80056e4 <BSP_LCD_MspInit+0x1b0>)
 8005698:	f002 fd3e 	bl	8008118 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800569c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80056a2:	2301      	movs	r3, #1
 80056a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80056a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056aa:	4619      	mov	r1, r3
 80056ac:	480b      	ldr	r0, [pc, #44]	; (80056dc <BSP_LCD_MspInit+0x1a8>)
 80056ae:	f002 fd33 	bl	8008118 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80056b2:	2308      	movs	r3, #8
 80056b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80056b6:	2301      	movs	r3, #1
 80056b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80056ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056be:	4619      	mov	r1, r3
 80056c0:	4808      	ldr	r0, [pc, #32]	; (80056e4 <BSP_LCD_MspInit+0x1b0>)
 80056c2:	f002 fd29 	bl	8008118 <HAL_GPIO_Init>
}
 80056c6:	bf00      	nop
 80056c8:	3740      	adds	r7, #64	; 0x40
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	40023800 	.word	0x40023800
 80056d4:	40021000 	.word	0x40021000
 80056d8:	40021800 	.word	0x40021800
 80056dc:	40022000 	.word	0x40022000
 80056e0:	40022400 	.word	0x40022400
 80056e4:	40022800 	.word	0x40022800

080056e8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80056f2:	4b0a      	ldr	r3, [pc, #40]	; (800571c <BSP_LCD_ClockConfig+0x34>)
 80056f4:	2208      	movs	r2, #8
 80056f6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80056f8:	4b08      	ldr	r3, [pc, #32]	; (800571c <BSP_LCD_ClockConfig+0x34>)
 80056fa:	22c0      	movs	r2, #192	; 0xc0
 80056fc:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80056fe:	4b07      	ldr	r3, [pc, #28]	; (800571c <BSP_LCD_ClockConfig+0x34>)
 8005700:	2205      	movs	r2, #5
 8005702:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8005704:	4b05      	ldr	r3, [pc, #20]	; (800571c <BSP_LCD_ClockConfig+0x34>)
 8005706:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800570a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800570c:	4803      	ldr	r0, [pc, #12]	; (800571c <BSP_LCD_ClockConfig+0x34>)
 800570e:	f004 fddd 	bl	800a2cc <HAL_RCCEx_PeriphCLKConfig>
}
 8005712:	bf00      	nop
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20037b04 	.word	0x20037b04

08005720 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	603a      	str	r2, [r7, #0]
 800572a:	80fb      	strh	r3, [r7, #6]
 800572c:	460b      	mov	r3, r1
 800572e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005730:	2300      	movs	r3, #0
 8005732:	61fb      	str	r3, [r7, #28]
 8005734:	2300      	movs	r3, #0
 8005736:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8005738:	4b53      	ldr	r3, [pc, #332]	; (8005888 <DrawChar+0x168>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4953      	ldr	r1, [pc, #332]	; (800588c <DrawChar+0x16c>)
 800573e:	4613      	mov	r3, r2
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	440b      	add	r3, r1
 8005748:	3308      	adds	r3, #8
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	88db      	ldrh	r3, [r3, #6]
 800574e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8005750:	4b4d      	ldr	r3, [pc, #308]	; (8005888 <DrawChar+0x168>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	494d      	ldr	r1, [pc, #308]	; (800588c <DrawChar+0x16c>)
 8005756:	4613      	mov	r3, r2
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	3308      	adds	r3, #8
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	889b      	ldrh	r3, [r3, #4]
 8005766:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8005768:	8a3b      	ldrh	r3, [r7, #16]
 800576a:	3307      	adds	r3, #7
 800576c:	2b00      	cmp	r3, #0
 800576e:	da00      	bge.n	8005772 <DrawChar+0x52>
 8005770:	3307      	adds	r3, #7
 8005772:	10db      	asrs	r3, r3, #3
 8005774:	b2db      	uxtb	r3, r3
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	b2da      	uxtb	r2, r3
 800577a:	8a3b      	ldrh	r3, [r7, #16]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8005782:	2300      	movs	r3, #0
 8005784:	61fb      	str	r3, [r7, #28]
 8005786:	e076      	b.n	8005876 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8005788:	8a3b      	ldrh	r3, [r7, #16]
 800578a:	3307      	adds	r3, #7
 800578c:	2b00      	cmp	r3, #0
 800578e:	da00      	bge.n	8005792 <DrawChar+0x72>
 8005790:	3307      	adds	r3, #7
 8005792:	10db      	asrs	r3, r3, #3
 8005794:	461a      	mov	r2, r3
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	fb02 f303 	mul.w	r3, r2, r3
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	4413      	add	r3, r2
 80057a0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80057a2:	8a3b      	ldrh	r3, [r7, #16]
 80057a4:	3307      	adds	r3, #7
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	da00      	bge.n	80057ac <DrawChar+0x8c>
 80057aa:	3307      	adds	r3, #7
 80057ac:	10db      	asrs	r3, r3, #3
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d002      	beq.n	80057b8 <DrawChar+0x98>
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d004      	beq.n	80057c0 <DrawChar+0xa0>
 80057b6:	e00c      	b.n	80057d2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	617b      	str	r3, [r7, #20]
      break;
 80057be:	e016      	b.n	80057ee <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	3201      	adds	r2, #1
 80057ca:	7812      	ldrb	r2, [r2, #0]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]
      break;
 80057d0:	e00d      	b.n	80057ee <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	041a      	lsls	r2, r3, #16
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	3301      	adds	r3, #1
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	4313      	orrs	r3, r2
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	3202      	adds	r2, #2
 80057e6:	7812      	ldrb	r2, [r2, #0]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
      break;
 80057ec:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80057ee:	2300      	movs	r3, #0
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	e036      	b.n	8005862 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80057f4:	8a3a      	ldrh	r2, [r7, #16]
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	1ad2      	subs	r2, r2, r3
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	4413      	add	r3, r2
 80057fe:	3b01      	subs	r3, #1
 8005800:	2201      	movs	r2, #1
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	461a      	mov	r2, r3
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	4013      	ands	r3, r2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d012      	beq.n	8005836 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	b29a      	uxth	r2, r3
 8005814:	88fb      	ldrh	r3, [r7, #6]
 8005816:	4413      	add	r3, r2
 8005818:	b298      	uxth	r0, r3
 800581a:	4b1b      	ldr	r3, [pc, #108]	; (8005888 <DrawChar+0x168>)
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	491b      	ldr	r1, [pc, #108]	; (800588c <DrawChar+0x16c>)
 8005820:	4613      	mov	r3, r2
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	88bb      	ldrh	r3, [r7, #4]
 800582e:	4619      	mov	r1, r3
 8005830:	f7ff fcd0 	bl	80051d4 <BSP_LCD_DrawPixel>
 8005834:	e012      	b.n	800585c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	b29a      	uxth	r2, r3
 800583a:	88fb      	ldrh	r3, [r7, #6]
 800583c:	4413      	add	r3, r2
 800583e:	b298      	uxth	r0, r3
 8005840:	4b11      	ldr	r3, [pc, #68]	; (8005888 <DrawChar+0x168>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4911      	ldr	r1, [pc, #68]	; (800588c <DrawChar+0x16c>)
 8005846:	4613      	mov	r3, r2
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	4413      	add	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	440b      	add	r3, r1
 8005850:	3304      	adds	r3, #4
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	88bb      	ldrh	r3, [r7, #4]
 8005856:	4619      	mov	r1, r3
 8005858:	f7ff fcbc 	bl	80051d4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	3301      	adds	r3, #1
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	8a3b      	ldrh	r3, [r7, #16]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	429a      	cmp	r2, r3
 8005868:	d3c4      	bcc.n	80057f4 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800586a:	88bb      	ldrh	r3, [r7, #4]
 800586c:	3301      	adds	r3, #1
 800586e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	3301      	adds	r3, #1
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	8a7b      	ldrh	r3, [r7, #18]
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	429a      	cmp	r2, r3
 800587c:	d384      	bcc.n	8005788 <DrawChar+0x68>
  }
}
 800587e:	bf00      	nop
 8005880:	bf00      	nop
 8005882:	3720      	adds	r7, #32
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	20037ae8 	.word	0x20037ae8
 800588c:	20037aec 	.word	0x20037aec

08005890 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af02      	add	r7, sp, #8
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800589e:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <LL_FillBuffer+0x88>)
 80058a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80058a4:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80058a6:	4b1d      	ldr	r3, [pc, #116]	; (800591c <LL_FillBuffer+0x8c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1d      	ldr	r2, [pc, #116]	; (8005920 <LL_FillBuffer+0x90>)
 80058ac:	2134      	movs	r1, #52	; 0x34
 80058ae:	fb01 f303 	mul.w	r3, r1, r3
 80058b2:	4413      	add	r3, r2
 80058b4:	3348      	adds	r3, #72	; 0x48
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d103      	bne.n	80058c4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80058bc:	4b16      	ldr	r3, [pc, #88]	; (8005918 <LL_FillBuffer+0x88>)
 80058be:	2202      	movs	r2, #2
 80058c0:	609a      	str	r2, [r3, #8]
 80058c2:	e002      	b.n	80058ca <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80058c4:	4b14      	ldr	r3, [pc, #80]	; (8005918 <LL_FillBuffer+0x88>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80058ca:	4a13      	ldr	r2, [pc, #76]	; (8005918 <LL_FillBuffer+0x88>)
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80058d0:	4b11      	ldr	r3, [pc, #68]	; (8005918 <LL_FillBuffer+0x88>)
 80058d2:	4a14      	ldr	r2, [pc, #80]	; (8005924 <LL_FillBuffer+0x94>)
 80058d4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80058d6:	4810      	ldr	r0, [pc, #64]	; (8005918 <LL_FillBuffer+0x88>)
 80058d8:	f002 f992 	bl	8007c00 <HAL_DMA2D_Init>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d115      	bne.n	800590e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80058e2:	68f9      	ldr	r1, [r7, #12]
 80058e4:	480c      	ldr	r0, [pc, #48]	; (8005918 <LL_FillBuffer+0x88>)
 80058e6:	f002 fae9 	bl	8007ebc <HAL_DMA2D_ConfigLayer>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10e      	bne.n	800590e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69f9      	ldr	r1, [r7, #28]
 80058fa:	4807      	ldr	r0, [pc, #28]	; (8005918 <LL_FillBuffer+0x88>)
 80058fc:	f002 f9ca 	bl	8007c94 <HAL_DMA2D_Start>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d103      	bne.n	800590e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8005906:	210a      	movs	r1, #10
 8005908:	4803      	ldr	r0, [pc, #12]	; (8005918 <LL_FillBuffer+0x88>)
 800590a:	f002 f9ee 	bl	8007cea <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800590e:	bf00      	nop
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20037aa8 	.word	0x20037aa8
 800591c:	20037ae8 	.word	0x20037ae8
 8005920:	20037a00 	.word	0x20037a00
 8005924:	4002b000 	.word	0x4002b000

08005928 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8005936:	4b1c      	ldr	r3, [pc, #112]	; (80059a8 <LL_ConvertLineToARGB8888+0x80>)
 8005938:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800593c:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800593e:	4b1a      	ldr	r3, [pc, #104]	; (80059a8 <LL_ConvertLineToARGB8888+0x80>)
 8005940:	2200      	movs	r2, #0
 8005942:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8005944:	4b18      	ldr	r3, [pc, #96]	; (80059a8 <LL_ConvertLineToARGB8888+0x80>)
 8005946:	2200      	movs	r2, #0
 8005948:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800594a:	4b17      	ldr	r3, [pc, #92]	; (80059a8 <LL_ConvertLineToARGB8888+0x80>)
 800594c:	2200      	movs	r2, #0
 800594e:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8005950:	4b15      	ldr	r3, [pc, #84]	; (80059a8 <LL_ConvertLineToARGB8888+0x80>)
 8005952:	22ff      	movs	r2, #255	; 0xff
 8005954:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8005956:	4a14      	ldr	r2, [pc, #80]	; (80059a8 <LL_ConvertLineToARGB8888+0x80>)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 800595c:	4b12      	ldr	r3, [pc, #72]	; (80059a8 <LL_ConvertLineToARGB8888+0x80>)
 800595e:	2200      	movs	r2, #0
 8005960:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8005962:	4b11      	ldr	r3, [pc, #68]	; (80059a8 <LL_ConvertLineToARGB8888+0x80>)
 8005964:	4a11      	ldr	r2, [pc, #68]	; (80059ac <LL_ConvertLineToARGB8888+0x84>)
 8005966:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8005968:	480f      	ldr	r0, [pc, #60]	; (80059a8 <LL_ConvertLineToARGB8888+0x80>)
 800596a:	f002 f949 	bl	8007c00 <HAL_DMA2D_Init>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d115      	bne.n	80059a0 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8005974:	2101      	movs	r1, #1
 8005976:	480c      	ldr	r0, [pc, #48]	; (80059a8 <LL_ConvertLineToARGB8888+0x80>)
 8005978:	f002 faa0 	bl	8007ebc <HAL_DMA2D_ConfigLayer>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10e      	bne.n	80059a0 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8005982:	68f9      	ldr	r1, [r7, #12]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	2301      	movs	r3, #1
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4806      	ldr	r0, [pc, #24]	; (80059a8 <LL_ConvertLineToARGB8888+0x80>)
 800598e:	f002 f981 	bl	8007c94 <HAL_DMA2D_Start>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d103      	bne.n	80059a0 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8005998:	210a      	movs	r1, #10
 800599a:	4803      	ldr	r0, [pc, #12]	; (80059a8 <LL_ConvertLineToARGB8888+0x80>)
 800599c:	f002 f9a5 	bl	8007cea <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80059a0:	bf00      	nop
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	20037aa8 	.word	0x20037aa8
 80059ac:	4002b000 	.word	0x4002b000

080059b0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80059b4:	4b29      	ldr	r3, [pc, #164]	; (8005a5c <BSP_SDRAM_Init+0xac>)
 80059b6:	4a2a      	ldr	r2, [pc, #168]	; (8005a60 <BSP_SDRAM_Init+0xb0>)
 80059b8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80059ba:	4b2a      	ldr	r3, [pc, #168]	; (8005a64 <BSP_SDRAM_Init+0xb4>)
 80059bc:	2202      	movs	r2, #2
 80059be:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80059c0:	4b28      	ldr	r3, [pc, #160]	; (8005a64 <BSP_SDRAM_Init+0xb4>)
 80059c2:	2207      	movs	r2, #7
 80059c4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80059c6:	4b27      	ldr	r3, [pc, #156]	; (8005a64 <BSP_SDRAM_Init+0xb4>)
 80059c8:	2204      	movs	r2, #4
 80059ca:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80059cc:	4b25      	ldr	r3, [pc, #148]	; (8005a64 <BSP_SDRAM_Init+0xb4>)
 80059ce:	2207      	movs	r2, #7
 80059d0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80059d2:	4b24      	ldr	r3, [pc, #144]	; (8005a64 <BSP_SDRAM_Init+0xb4>)
 80059d4:	2202      	movs	r2, #2
 80059d6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80059d8:	4b22      	ldr	r3, [pc, #136]	; (8005a64 <BSP_SDRAM_Init+0xb4>)
 80059da:	2202      	movs	r2, #2
 80059dc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80059de:	4b21      	ldr	r3, [pc, #132]	; (8005a64 <BSP_SDRAM_Init+0xb4>)
 80059e0:	2202      	movs	r2, #2
 80059e2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80059e4:	4b1d      	ldr	r3, [pc, #116]	; (8005a5c <BSP_SDRAM_Init+0xac>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80059ea:	4b1c      	ldr	r3, [pc, #112]	; (8005a5c <BSP_SDRAM_Init+0xac>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80059f0:	4b1a      	ldr	r3, [pc, #104]	; (8005a5c <BSP_SDRAM_Init+0xac>)
 80059f2:	2204      	movs	r2, #4
 80059f4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80059f6:	4b19      	ldr	r3, [pc, #100]	; (8005a5c <BSP_SDRAM_Init+0xac>)
 80059f8:	2210      	movs	r2, #16
 80059fa:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80059fc:	4b17      	ldr	r3, [pc, #92]	; (8005a5c <BSP_SDRAM_Init+0xac>)
 80059fe:	2240      	movs	r2, #64	; 0x40
 8005a00:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8005a02:	4b16      	ldr	r3, [pc, #88]	; (8005a5c <BSP_SDRAM_Init+0xac>)
 8005a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a08:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005a0a:	4b14      	ldr	r3, [pc, #80]	; (8005a5c <BSP_SDRAM_Init+0xac>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8005a10:	4b12      	ldr	r3, [pc, #72]	; (8005a5c <BSP_SDRAM_Init+0xac>)
 8005a12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a16:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005a18:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <BSP_SDRAM_Init+0xac>)
 8005a1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a1e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005a20:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <BSP_SDRAM_Init+0xac>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8005a26:	2100      	movs	r1, #0
 8005a28:	480c      	ldr	r0, [pc, #48]	; (8005a5c <BSP_SDRAM_Init+0xac>)
 8005a2a:	f000 f87f 	bl	8005b2c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8005a2e:	490d      	ldr	r1, [pc, #52]	; (8005a64 <BSP_SDRAM_Init+0xb4>)
 8005a30:	480a      	ldr	r0, [pc, #40]	; (8005a5c <BSP_SDRAM_Init+0xac>)
 8005a32:	f006 fc73 	bl	800c31c <HAL_SDRAM_Init>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <BSP_SDRAM_Init+0xb8>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	701a      	strb	r2, [r3, #0]
 8005a42:	e002      	b.n	8005a4a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8005a44:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <BSP_SDRAM_Init+0xb8>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8005a4a:	f240 6003 	movw	r0, #1539	; 0x603
 8005a4e:	f000 f80d 	bl	8005a6c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8005a52:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <BSP_SDRAM_Init+0xb8>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20037b88 	.word	0x20037b88
 8005a60:	a0000140 	.word	0xa0000140
 8005a64:	20037bbc 	.word	0x20037bbc
 8005a68:	200000c4 	.word	0x200000c4

08005a6c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005a78:	4b2a      	ldr	r3, [pc, #168]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005a7e:	4b29      	ldr	r3, [pc, #164]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a80:	2210      	movs	r2, #16
 8005a82:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005a84:	4b27      	ldr	r3, [pc, #156]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a86:	2201      	movs	r2, #1
 8005a88:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005a8a:	4b26      	ldr	r3, [pc, #152]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a94:	4923      	ldr	r1, [pc, #140]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a96:	4824      	ldr	r0, [pc, #144]	; (8005b28 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005a98:	f006 fc74 	bl	800c384 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	f000 ff7b 	bl	8006998 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8005aa2:	4b20      	ldr	r3, [pc, #128]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005aa8:	4b1e      	ldr	r3, [pc, #120]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005aaa:	2210      	movs	r2, #16
 8005aac:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005aae:	4b1d      	ldr	r3, [pc, #116]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005ab4:	4b1b      	ldr	r3, [pc, #108]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8005aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005abe:	4919      	ldr	r1, [pc, #100]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005ac0:	4819      	ldr	r0, [pc, #100]	; (8005b28 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005ac2:	f006 fc5f 	bl	800c384 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005ac6:	4b17      	ldr	r3, [pc, #92]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005ac8:	2203      	movs	r2, #3
 8005aca:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005acc:	4b15      	ldr	r3, [pc, #84]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005ace:	2210      	movs	r2, #16
 8005ad0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8005ad2:	4b14      	ldr	r3, [pc, #80]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005ad8:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005ade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ae2:	4910      	ldr	r1, [pc, #64]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005ae4:	4810      	ldr	r0, [pc, #64]	; (8005b28 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005ae6:	f006 fc4d 	bl	800c384 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8005aea:	f44f 7308 	mov.w	r3, #544	; 0x220
 8005aee:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8005af0:	4b0c      	ldr	r3, [pc, #48]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005af2:	2204      	movs	r2, #4
 8005af4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005af6:	4b0b      	ldr	r3, [pc, #44]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005af8:	2210      	movs	r2, #16
 8005afa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005afc:	4b09      	ldr	r3, [pc, #36]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005afe:	2201      	movs	r2, #1
 8005b00:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4a07      	ldr	r2, [pc, #28]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005b06:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b0c:	4905      	ldr	r1, [pc, #20]	; (8005b24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005b0e:	4806      	ldr	r0, [pc, #24]	; (8005b28 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005b10:	f006 fc38 	bl	800c384 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	4804      	ldr	r0, [pc, #16]	; (8005b28 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005b18:	f006 fc69 	bl	800c3ee <HAL_SDRAM_ProgramRefreshRate>
}
 8005b1c:	bf00      	nop
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20037bd8 	.word	0x20037bd8
 8005b28:	20037b88 	.word	0x20037b88

08005b2c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b090      	sub	sp, #64	; 0x40
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005b36:	4b70      	ldr	r3, [pc, #448]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	4a6f      	ldr	r2, [pc, #444]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005b3c:	f043 0301 	orr.w	r3, r3, #1
 8005b40:	6393      	str	r3, [r2, #56]	; 0x38
 8005b42:	4b6d      	ldr	r3, [pc, #436]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8005b4e:	4b6a      	ldr	r3, [pc, #424]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b52:	4a69      	ldr	r2, [pc, #420]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005b54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b58:	6313      	str	r3, [r2, #48]	; 0x30
 8005b5a:	4b67      	ldr	r3, [pc, #412]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b62:	627b      	str	r3, [r7, #36]	; 0x24
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b66:	4b64      	ldr	r3, [pc, #400]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	4a63      	ldr	r2, [pc, #396]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005b6c:	f043 0304 	orr.w	r3, r3, #4
 8005b70:	6313      	str	r3, [r2, #48]	; 0x30
 8005b72:	4b61      	ldr	r3, [pc, #388]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	f003 0304 	and.w	r3, r3, #4
 8005b7a:	623b      	str	r3, [r7, #32]
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b7e:	4b5e      	ldr	r3, [pc, #376]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	4a5d      	ldr	r2, [pc, #372]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005b84:	f043 0308 	orr.w	r3, r3, #8
 8005b88:	6313      	str	r3, [r2, #48]	; 0x30
 8005b8a:	4b5b      	ldr	r3, [pc, #364]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8e:	f003 0308 	and.w	r3, r3, #8
 8005b92:	61fb      	str	r3, [r7, #28]
 8005b94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005b96:	4b58      	ldr	r3, [pc, #352]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	4a57      	ldr	r2, [pc, #348]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005b9c:	f043 0310 	orr.w	r3, r3, #16
 8005ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ba2:	4b55      	ldr	r3, [pc, #340]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	f003 0310 	and.w	r3, r3, #16
 8005baa:	61bb      	str	r3, [r7, #24]
 8005bac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005bae:	4b52      	ldr	r3, [pc, #328]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb2:	4a51      	ldr	r2, [pc, #324]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005bb4:	f043 0320 	orr.w	r3, r3, #32
 8005bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8005bba:	4b4f      	ldr	r3, [pc, #316]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbe:	f003 0320 	and.w	r3, r3, #32
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005bc6:	4b4c      	ldr	r3, [pc, #304]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	4a4b      	ldr	r2, [pc, #300]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8005bd2:	4b49      	ldr	r3, [pc, #292]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bda:	613b      	str	r3, [r7, #16]
 8005bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005bde:	4b46      	ldr	r3, [pc, #280]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be2:	4a45      	ldr	r2, [pc, #276]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be8:	6313      	str	r3, [r2, #48]	; 0x30
 8005bea:	4b43      	ldr	r3, [pc, #268]	; (8005cf8 <BSP_SDRAM_MspInit+0x1cc>)
 8005bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005bfe:	2302      	movs	r3, #2
 8005c00:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005c02:	230c      	movs	r3, #12
 8005c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8005c06:	2308      	movs	r3, #8
 8005c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8005c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c0e:	4619      	mov	r1, r3
 8005c10:	483a      	ldr	r0, [pc, #232]	; (8005cfc <BSP_SDRAM_MspInit+0x1d0>)
 8005c12:	f002 fa81 	bl	8008118 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8005c16:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c20:	4619      	mov	r1, r3
 8005c22:	4837      	ldr	r0, [pc, #220]	; (8005d00 <BSP_SDRAM_MspInit+0x1d4>)
 8005c24:	f002 fa78 	bl	8008118 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005c28:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c32:	4619      	mov	r1, r3
 8005c34:	4833      	ldr	r0, [pc, #204]	; (8005d04 <BSP_SDRAM_MspInit+0x1d8>)
 8005c36:	f002 fa6f 	bl	8008118 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005c3a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c44:	4619      	mov	r1, r3
 8005c46:	4830      	ldr	r0, [pc, #192]	; (8005d08 <BSP_SDRAM_MspInit+0x1dc>)
 8005c48:	f002 fa66 	bl	8008118 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8005c4c:	f248 1333 	movw	r3, #33075	; 0x8133
 8005c50:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c56:	4619      	mov	r1, r3
 8005c58:	482c      	ldr	r0, [pc, #176]	; (8005d0c <BSP_SDRAM_MspInit+0x1e0>)
 8005c5a:	f002 fa5d 	bl	8008118 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8005c5e:	2328      	movs	r3, #40	; 0x28
 8005c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8005c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c66:	4619      	mov	r1, r3
 8005c68:	4829      	ldr	r0, [pc, #164]	; (8005d10 <BSP_SDRAM_MspInit+0x1e4>)
 8005c6a:	f002 fa55 	bl	8008118 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8005c6e:	4b29      	ldr	r3, [pc, #164]	; (8005d14 <BSP_SDRAM_MspInit+0x1e8>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005c74:	4b27      	ldr	r3, [pc, #156]	; (8005d14 <BSP_SDRAM_MspInit+0x1e8>)
 8005c76:	2280      	movs	r2, #128	; 0x80
 8005c78:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005c7a:	4b26      	ldr	r3, [pc, #152]	; (8005d14 <BSP_SDRAM_MspInit+0x1e8>)
 8005c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c80:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8005c82:	4b24      	ldr	r3, [pc, #144]	; (8005d14 <BSP_SDRAM_MspInit+0x1e8>)
 8005c84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c88:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005c8a:	4b22      	ldr	r3, [pc, #136]	; (8005d14 <BSP_SDRAM_MspInit+0x1e8>)
 8005c8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c90:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8005c92:	4b20      	ldr	r3, [pc, #128]	; (8005d14 <BSP_SDRAM_MspInit+0x1e8>)
 8005c94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c98:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8005c9a:	4b1e      	ldr	r3, [pc, #120]	; (8005d14 <BSP_SDRAM_MspInit+0x1e8>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005ca0:	4b1c      	ldr	r3, [pc, #112]	; (8005d14 <BSP_SDRAM_MspInit+0x1e8>)
 8005ca2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ca6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8005ca8:	4b1a      	ldr	r3, [pc, #104]	; (8005d14 <BSP_SDRAM_MspInit+0x1e8>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005cae:	4b19      	ldr	r3, [pc, #100]	; (8005d14 <BSP_SDRAM_MspInit+0x1e8>)
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005cb4:	4b17      	ldr	r3, [pc, #92]	; (8005d14 <BSP_SDRAM_MspInit+0x1e8>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005cba:	4b16      	ldr	r3, [pc, #88]	; (8005d14 <BSP_SDRAM_MspInit+0x1e8>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8005cc0:	4b14      	ldr	r3, [pc, #80]	; (8005d14 <BSP_SDRAM_MspInit+0x1e8>)
 8005cc2:	4a15      	ldr	r2, [pc, #84]	; (8005d18 <BSP_SDRAM_MspInit+0x1ec>)
 8005cc4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a12      	ldr	r2, [pc, #72]	; (8005d14 <BSP_SDRAM_MspInit+0x1e8>)
 8005cca:	631a      	str	r2, [r3, #48]	; 0x30
 8005ccc:	4a11      	ldr	r2, [pc, #68]	; (8005d14 <BSP_SDRAM_MspInit+0x1e8>)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8005cd2:	4810      	ldr	r0, [pc, #64]	; (8005d14 <BSP_SDRAM_MspInit+0x1e8>)
 8005cd4:	f001 fc3e 	bl	8007554 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8005cd8:	480e      	ldr	r0, [pc, #56]	; (8005d14 <BSP_SDRAM_MspInit+0x1e8>)
 8005cda:	f001 fb8d 	bl	80073f8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005cde:	2200      	movs	r2, #0
 8005ce0:	210f      	movs	r1, #15
 8005ce2:	2038      	movs	r0, #56	; 0x38
 8005ce4:	f001 fb51 	bl	800738a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005ce8:	2038      	movs	r0, #56	; 0x38
 8005cea:	f001 fb6a 	bl	80073c2 <HAL_NVIC_EnableIRQ>
}
 8005cee:	bf00      	nop
 8005cf0:	3740      	adds	r7, #64	; 0x40
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	40023800 	.word	0x40023800
 8005cfc:	40020800 	.word	0x40020800
 8005d00:	40020c00 	.word	0x40020c00
 8005d04:	40021000 	.word	0x40021000
 8005d08:	40021400 	.word	0x40021400
 8005d0c:	40021800 	.word	0x40021800
 8005d10:	40021c00 	.word	0x40021c00
 8005d14:	20037be8 	.word	0x20037be8
 8005d18:	40026410 	.word	0x40026410

08005d1c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4603      	mov	r3, r0
 8005d24:	460a      	mov	r2, r1
 8005d26:	80fb      	strh	r3, [r7, #6]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8005d30:	4a14      	ldr	r2, [pc, #80]	; (8005d84 <BSP_TS_Init+0x68>)
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8005d36:	4a14      	ldr	r2, [pc, #80]	; (8005d88 <BSP_TS_Init+0x6c>)
 8005d38:	88bb      	ldrh	r3, [r7, #4]
 8005d3a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8005d3c:	4b13      	ldr	r3, [pc, #76]	; (8005d8c <BSP_TS_Init+0x70>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2070      	movs	r0, #112	; 0x70
 8005d42:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8005d44:	4b11      	ldr	r3, [pc, #68]	; (8005d8c <BSP_TS_Init+0x70>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2070      	movs	r0, #112	; 0x70
 8005d4a:	4798      	blx	r3
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b51      	cmp	r3, #81	; 0x51
 8005d50:	d111      	bne.n	8005d76 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8005d52:	4b0f      	ldr	r3, [pc, #60]	; (8005d90 <BSP_TS_Init+0x74>)
 8005d54:	4a0d      	ldr	r2, [pc, #52]	; (8005d8c <BSP_TS_Init+0x70>)
 8005d56:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8005d58:	4b0e      	ldr	r3, [pc, #56]	; (8005d94 <BSP_TS_Init+0x78>)
 8005d5a:	2270      	movs	r2, #112	; 0x70
 8005d5c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8005d5e:	4b0e      	ldr	r3, [pc, #56]	; (8005d98 <BSP_TS_Init+0x7c>)
 8005d60:	2208      	movs	r2, #8
 8005d62:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8005d64:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <BSP_TS_Init+0x74>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	4a0a      	ldr	r2, [pc, #40]	; (8005d94 <BSP_TS_Init+0x78>)
 8005d6c:	7812      	ldrb	r2, [r2, #0]
 8005d6e:	b292      	uxth	r2, r2
 8005d70:	4610      	mov	r0, r2
 8005d72:	4798      	blx	r3
 8005d74:	e001      	b.n	8005d7a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8005d76:	2303      	movs	r3, #3
 8005d78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20037c4c 	.word	0x20037c4c
 8005d88:	20037c4e 	.word	0x20037c4e
 8005d8c:	20000084 	.word	0x20000084
 8005d90:	20037c48 	.word	0x20037c48
 8005d94:	20037c51 	.word	0x20037c51
 8005d98:	20037c50 	.word	0x20037c50

08005d9c <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Configure Interrupt mode for SD detection pin */
  gpio_init_structure.Pin = TS_INT_PIN;
 8005da2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005da6:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005dac:	2302      	movs	r3, #2
 8005dae:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8005db0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005db4:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8005db6:	1d3b      	adds	r3, r7, #4
 8005db8:	4619      	mov	r1, r3
 8005dba:	480c      	ldr	r0, [pc, #48]	; (8005dec <BSP_TS_ITConfig+0x50>)
 8005dbc:	f002 f9ac 	bl	8008118 <HAL_GPIO_Init>

  /* Enable and set Touch screen EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	210f      	movs	r1, #15
 8005dc4:	2028      	movs	r0, #40	; 0x28
 8005dc6:	f001 fae0 	bl	800738a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8005dca:	2028      	movs	r0, #40	; 0x28
 8005dcc:	f001 faf9 	bl	80073c2 <HAL_NVIC_EnableIRQ>

  /* Enable the TS ITs */
  tsDriver->EnableIT(I2cAddress);
 8005dd0:	4b07      	ldr	r3, [pc, #28]	; (8005df0 <BSP_TS_ITConfig+0x54>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	4a07      	ldr	r2, [pc, #28]	; (8005df4 <BSP_TS_ITConfig+0x58>)
 8005dd8:	7812      	ldrb	r2, [r2, #0]
 8005dda:	b292      	uxth	r2, r2
 8005ddc:	4610      	mov	r0, r2
 8005dde:	4798      	blx	r3

  return TS_OK;  
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	40022000 	.word	0x40022000
 8005df0:	20037c48 	.word	0x20037c48
 8005df4:	20037c51 	.word	0x20037c51

08005df8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8005df8:	b590      	push	{r4, r7, lr}
 8005dfa:	b097      	sub	sp, #92	; 0x5c
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8005e12:	4bb4      	ldr	r3, [pc, #720]	; (80060e4 <BSP_TS_GetState+0x2ec>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	4ab3      	ldr	r2, [pc, #716]	; (80060e8 <BSP_TS_GetState+0x2f0>)
 8005e1a:	7812      	ldrb	r2, [r2, #0]
 8005e1c:	b292      	uxth	r2, r2
 8005e1e:	4610      	mov	r0, r2
 8005e20:	4798      	blx	r3
 8005e22:	4603      	mov	r3, r0
 8005e24:	461a      	mov	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 8196 	beq.w	8006160 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8005e34:	2300      	movs	r3, #0
 8005e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e38:	e185      	b.n	8006146 <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8005e3a:	4baa      	ldr	r3, [pc, #680]	; (80060e4 <BSP_TS_GetState+0x2ec>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	4aa9      	ldr	r2, [pc, #676]	; (80060e8 <BSP_TS_GetState+0x2f0>)
 8005e42:	7812      	ldrb	r2, [r2, #0]
 8005e44:	b290      	uxth	r0, r2
 8005e46:	f107 0120 	add.w	r1, r7, #32
 8005e4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e4c:	0052      	lsls	r2, r2, #1
 8005e4e:	188c      	adds	r4, r1, r2
 8005e50:	f107 0114 	add.w	r1, r7, #20
 8005e54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e56:	0052      	lsls	r2, r2, #1
 8005e58:	440a      	add	r2, r1
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8005e5e:	4ba3      	ldr	r3, [pc, #652]	; (80060ec <BSP_TS_GetState+0x2f4>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d117      	bne.n	8005e96 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8005e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	3350      	adds	r3, #80	; 0x50
 8005e6c:	443b      	add	r3, r7
 8005e6e:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	3350      	adds	r3, #80	; 0x50
 8005e78:	443b      	add	r3, r7
 8005e7a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8005e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	3350      	adds	r3, #80	; 0x50
 8005e84:	443b      	add	r3, r7
 8005e86:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8005e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	3350      	adds	r3, #80	; 0x50
 8005e90:	443b      	add	r3, r7
 8005e92:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8005e96:	4b95      	ldr	r3, [pc, #596]	; (80060ec <BSP_TS_GetState+0x2f4>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00e      	beq.n	8005ec0 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8005ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ea4:	005b      	lsls	r3, r3, #1
 8005ea6:	3350      	adds	r3, #80	; 0x50
 8005ea8:	443b      	add	r3, r7
 8005eaa:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8005eae:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	3350      	adds	r3, #80	; 0x50
 8005eba:	443b      	add	r3, r7
 8005ebc:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8005ec0:	4b8a      	ldr	r3, [pc, #552]	; (80060ec <BSP_TS_GetState+0x2f4>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00e      	beq.n	8005eea <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8005ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	3350      	adds	r3, #80	; 0x50
 8005ed2:	443b      	add	r3, r7
 8005ed4:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8005ed8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	3350      	adds	r3, #80	; 0x50
 8005ee4:	443b      	add	r3, r7
 8005ee6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8005eea:	4b80      	ldr	r3, [pc, #512]	; (80060ec <BSP_TS_GetState+0x2f4>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d017      	beq.n	8005f26 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8005ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	3350      	adds	r3, #80	; 0x50
 8005efc:	443b      	add	r3, r7
 8005efe:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	3350      	adds	r3, #80	; 0x50
 8005f08:	443b      	add	r3, r7
 8005f0a:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8005f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	3350      	adds	r3, #80	; 0x50
 8005f14:	443b      	add	r3, r7
 8005f16:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8005f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	3350      	adds	r3, #80	; 0x50
 8005f20:	443b      	add	r3, r7
 8005f22:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8005f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	3350      	adds	r3, #80	; 0x50
 8005f2c:	443b      	add	r3, r7
 8005f2e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005f32:	4619      	mov	r1, r3
 8005f34:	4a6e      	ldr	r2, [pc, #440]	; (80060f0 <BSP_TS_GetState+0x2f8>)
 8005f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f3c:	4299      	cmp	r1, r3
 8005f3e:	d90d      	bls.n	8005f5c <BSP_TS_GetState+0x164>
 8005f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	3350      	adds	r3, #80	; 0x50
 8005f46:	443b      	add	r3, r7
 8005f48:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8005f4c:	4968      	ldr	r1, [pc, #416]	; (80060f0 <BSP_TS_GetState+0x2f8>)
 8005f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	e00c      	b.n	8005f76 <BSP_TS_GetState+0x17e>
 8005f5c:	4a64      	ldr	r2, [pc, #400]	; (80060f0 <BSP_TS_GetState+0x2f8>)
 8005f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	3350      	adds	r3, #80	; 0x50
 8005f6c:	443b      	add	r3, r7
 8005f6e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8005f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	3350      	adds	r3, #80	; 0x50
 8005f80:	443b      	add	r3, r7
 8005f82:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005f86:	4619      	mov	r1, r3
 8005f88:	4a5a      	ldr	r2, [pc, #360]	; (80060f4 <BSP_TS_GetState+0x2fc>)
 8005f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f90:	4299      	cmp	r1, r3
 8005f92:	d90d      	bls.n	8005fb0 <BSP_TS_GetState+0x1b8>
 8005f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	3350      	adds	r3, #80	; 0x50
 8005f9a:	443b      	add	r3, r7
 8005f9c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8005fa0:	4954      	ldr	r1, [pc, #336]	; (80060f4 <BSP_TS_GetState+0x2fc>)
 8005fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fa4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	e00c      	b.n	8005fca <BSP_TS_GetState+0x1d2>
 8005fb0:	4a50      	ldr	r2, [pc, #320]	; (80060f4 <BSP_TS_GetState+0x2fc>)
 8005fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	3350      	adds	r3, #80	; 0x50
 8005fc0:	443b      	add	r3, r7
 8005fc2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8005fce:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8005fd2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005fd6:	4413      	add	r3, r2
 8005fd8:	2b05      	cmp	r3, #5
 8005fda:	dd15      	ble.n	8006008 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8005fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	3350      	adds	r3, #80	; 0x50
 8005fe2:	443b      	add	r3, r7
 8005fe4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4a41      	ldr	r2, [pc, #260]	; (80060f0 <BSP_TS_GetState+0x2f8>)
 8005fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8005ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	3350      	adds	r3, #80	; 0x50
 8005ff8:	443b      	add	r3, r7
 8005ffa:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005ffe:	4619      	mov	r1, r3
 8006000:	4a3c      	ldr	r2, [pc, #240]	; (80060f4 <BSP_TS_GetState+0x2fc>)
 8006002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006004:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8006008:	4b37      	ldr	r3, [pc, #220]	; (80060e8 <BSP_TS_GetState+0x2f0>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b70      	cmp	r3, #112	; 0x70
 800600e:	d119      	bne.n	8006044 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8006010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	3350      	adds	r3, #80	; 0x50
 8006016:	443b      	add	r3, r7
 8006018:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	4413      	add	r3, r2
 8006024:	460a      	mov	r2, r1
 8006026:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8006028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	3350      	adds	r3, #80	; 0x50
 800602e:	443b      	add	r3, r7
 8006030:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006038:	3304      	adds	r3, #4
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	4413      	add	r3, r2
 800603e:	460a      	mov	r2, r1
 8006040:	809a      	strh	r2, [r3, #4]
 8006042:	e022      	b.n	800608a <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8006044:	4b2c      	ldr	r3, [pc, #176]	; (80060f8 <BSP_TS_GetState+0x300>)
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	4619      	mov	r1, r3
 800604a:	4a29      	ldr	r2, [pc, #164]	; (80060f0 <BSP_TS_GetState+0x2f8>)
 800604c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800604e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006052:	fb01 f303 	mul.w	r3, r1, r3
 8006056:	0b1b      	lsrs	r3, r3, #12
 8006058:	b299      	uxth	r1, r3
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	4413      	add	r3, r2
 8006062:	460a      	mov	r2, r1
 8006064:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8006066:	4b25      	ldr	r3, [pc, #148]	; (80060fc <BSP_TS_GetState+0x304>)
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	4619      	mov	r1, r3
 800606c:	4a21      	ldr	r2, [pc, #132]	; (80060f4 <BSP_TS_GetState+0x2fc>)
 800606e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006074:	fb01 f303 	mul.w	r3, r1, r3
 8006078:	0b1b      	lsrs	r3, r3, #12
 800607a:	b299      	uxth	r1, r3
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006080:	3304      	adds	r3, #4
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	4413      	add	r3, r2
 8006086:	460a      	mov	r2, r1
 8006088:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800608a:	4b17      	ldr	r3, [pc, #92]	; (80060e8 <BSP_TS_GetState+0x2f0>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	b298      	uxth	r0, r3
 8006090:	f107 010c 	add.w	r1, r7, #12
 8006094:	f107 0210 	add.w	r2, r7, #16
 8006098:	f107 0308 	add.w	r3, r7, #8
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	460b      	mov	r3, r1
 80060a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80060a2:	f7fe fa67 	bl	8004574 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	b2d9      	uxtb	r1, r3
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060ae:	4413      	add	r3, r2
 80060b0:	3316      	adds	r3, #22
 80060b2:	460a      	mov	r2, r1
 80060b4:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	b2d9      	uxtb	r1, r3
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060be:	4413      	add	r3, r2
 80060c0:	3320      	adds	r3, #32
 80060c2:	460a      	mov	r2, r1
 80060c4:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d835      	bhi.n	8006138 <BSP_TS_GetState+0x340>
 80060cc:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <BSP_TS_GetState+0x2dc>)
 80060ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d2:	bf00      	nop
 80060d4:	08006101 	.word	0x08006101
 80060d8:	0800610f 	.word	0x0800610f
 80060dc:	0800611d 	.word	0x0800611d
 80060e0:	0800612b 	.word	0x0800612b
 80060e4:	20037c48 	.word	0x20037c48
 80060e8:	20037c51 	.word	0x20037c51
 80060ec:	20037c50 	.word	0x20037c50
 80060f0:	20037c54 	.word	0x20037c54
 80060f4:	20037c68 	.word	0x20037c68
 80060f8:	20037c4c 	.word	0x20037c4c
 80060fc:	20037c4e 	.word	0x20037c4e
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006104:	4413      	add	r3, r2
 8006106:	331b      	adds	r3, #27
 8006108:	2201      	movs	r2, #1
 800610a:	701a      	strb	r2, [r3, #0]
          break;
 800610c:	e018      	b.n	8006140 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006112:	4413      	add	r3, r2
 8006114:	331b      	adds	r3, #27
 8006116:	2202      	movs	r2, #2
 8006118:	701a      	strb	r2, [r3, #0]
          break;
 800611a:	e011      	b.n	8006140 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006120:	4413      	add	r3, r2
 8006122:	331b      	adds	r3, #27
 8006124:	2203      	movs	r2, #3
 8006126:	701a      	strb	r2, [r3, #0]
          break;
 8006128:	e00a      	b.n	8006140 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800612e:	4413      	add	r3, r2
 8006130:	331b      	adds	r3, #27
 8006132:	2200      	movs	r2, #0
 8006134:	701a      	strb	r2, [r3, #0]
          break;
 8006136:	e003      	b.n	8006140 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800613e:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8006140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006142:	3301      	adds	r3, #1
 8006144:	64bb      	str	r3, [r7, #72]	; 0x48
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800614e:	4293      	cmp	r3, r2
 8006150:	f4ff ae73 	bcc.w	8005e3a <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f809 	bl	800616c <BSP_TS_Get_GestureId>
 800615a:	4603      	mov	r3, r0
 800615c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8006160:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006164:	4618      	mov	r0, r3
 8006166:	3754      	adds	r7, #84	; 0x54
 8006168:	46bd      	mov	sp, r7
 800616a:	bd90      	pop	{r4, r7, pc}

0800616c <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8006174:	2300      	movs	r3, #0
 8006176:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800617c:	4b3b      	ldr	r3, [pc, #236]	; (800626c <BSP_TS_Get_GestureId+0x100>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	f107 0208 	add.w	r2, r7, #8
 8006186:	4611      	mov	r1, r2
 8006188:	4618      	mov	r0, r3
 800618a:	f7fe f9da 	bl	8004542 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b49      	cmp	r3, #73	; 0x49
 8006192:	d05e      	beq.n	8006252 <BSP_TS_Get_GestureId+0xe6>
 8006194:	2b49      	cmp	r3, #73	; 0x49
 8006196:	d860      	bhi.n	800625a <BSP_TS_Get_GestureId+0xee>
 8006198:	2b1c      	cmp	r3, #28
 800619a:	d83f      	bhi.n	800621c <BSP_TS_Get_GestureId+0xb0>
 800619c:	2b1c      	cmp	r3, #28
 800619e:	d85c      	bhi.n	800625a <BSP_TS_Get_GestureId+0xee>
 80061a0:	a201      	add	r2, pc, #4	; (adr r2, 80061a8 <BSP_TS_Get_GestureId+0x3c>)
 80061a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a6:	bf00      	nop
 80061a8:	08006223 	.word	0x08006223
 80061ac:	0800625b 	.word	0x0800625b
 80061b0:	0800625b 	.word	0x0800625b
 80061b4:	0800625b 	.word	0x0800625b
 80061b8:	0800625b 	.word	0x0800625b
 80061bc:	0800625b 	.word	0x0800625b
 80061c0:	0800625b 	.word	0x0800625b
 80061c4:	0800625b 	.word	0x0800625b
 80061c8:	0800625b 	.word	0x0800625b
 80061cc:	0800625b 	.word	0x0800625b
 80061d0:	0800625b 	.word	0x0800625b
 80061d4:	0800625b 	.word	0x0800625b
 80061d8:	0800625b 	.word	0x0800625b
 80061dc:	0800625b 	.word	0x0800625b
 80061e0:	0800625b 	.word	0x0800625b
 80061e4:	0800625b 	.word	0x0800625b
 80061e8:	0800622b 	.word	0x0800622b
 80061ec:	0800625b 	.word	0x0800625b
 80061f0:	0800625b 	.word	0x0800625b
 80061f4:	0800625b 	.word	0x0800625b
 80061f8:	08006233 	.word	0x08006233
 80061fc:	0800625b 	.word	0x0800625b
 8006200:	0800625b 	.word	0x0800625b
 8006204:	0800625b 	.word	0x0800625b
 8006208:	0800623b 	.word	0x0800623b
 800620c:	0800625b 	.word	0x0800625b
 8006210:	0800625b 	.word	0x0800625b
 8006214:	0800625b 	.word	0x0800625b
 8006218:	08006243 	.word	0x08006243
 800621c:	2b40      	cmp	r3, #64	; 0x40
 800621e:	d014      	beq.n	800624a <BSP_TS_Get_GestureId+0xde>
 8006220:	e01b      	b.n	800625a <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8006228:	e01a      	b.n	8006260 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8006230:	e016      	b.n	8006260 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2202      	movs	r2, #2
 8006236:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8006238:	e012      	b.n	8006260 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2203      	movs	r2, #3
 800623e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8006240:	e00e      	b.n	8006260 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2204      	movs	r2, #4
 8006246:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8006248:	e00a      	b.n	8006260 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2205      	movs	r2, #5
 800624e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8006250:	e006      	b.n	8006260 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2206      	movs	r2, #6
 8006256:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8006258:	e002      	b.n	8006260 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	73fb      	strb	r3, [r7, #15]
      break;
 800625e:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8006260:	7bfb      	ldrb	r3, [r7, #15]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20037c51 	.word	0x20037c51

08006270 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */
void BSP_TS_ITClear(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  tsDriver->ClearIT(I2cAddress); 
 8006274:	4b04      	ldr	r3, [pc, #16]	; (8006288 <BSP_TS_ITClear+0x18>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	4a04      	ldr	r2, [pc, #16]	; (800628c <BSP_TS_ITClear+0x1c>)
 800627c:	7812      	ldrb	r2, [r2, #0]
 800627e:	b292      	uxth	r2, r2
 8006280:	4610      	mov	r0, r2
 8006282:	4798      	blx	r3
}
 8006284:	bf00      	nop
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20037c48 	.word	0x20037c48
 800628c:	20037c51 	.word	0x20037c51

08006290 <BSP_TS_ResetTouchData>:
  *         of touch information.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if OK, TE_ERROR if problem found.
  */
uint8_t BSP_TS_ResetTouchData(TS_StateTypeDef *TS_State)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint8_t ts_status = TS_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	73fb      	strb	r3, [r7, #15]
  uint32_t index;

  if (TS_State != (TS_StateTypeDef *)NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d02f      	beq.n	8006302 <BSP_TS_ResetTouchData+0x72>
  {
    TS_State->gestureId = GEST_ID_NO_GESTURE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	629a      	str	r2, [r3, #40]	; 0x28
    TS_State->touchDetected = 0;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	701a      	strb	r2, [r3, #0]

    for(index = 0; index < TS_MAX_NB_TOUCH; index++)
 80062ae:	2300      	movs	r3, #0
 80062b0:	60bb      	str	r3, [r7, #8]
 80062b2:	e021      	b.n	80062f8 <BSP_TS_ResetTouchData+0x68>
    {
      TS_State->touchX[index]       = 0;
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	4413      	add	r3, r2
 80062bc:	2200      	movs	r2, #0
 80062be:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index]       = 0;
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	3304      	adds	r3, #4
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	4413      	add	r3, r2
 80062ca:	2200      	movs	r2, #0
 80062cc:	809a      	strh	r2, [r3, #4]
      TS_State->touchArea[index]    = 0;
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4413      	add	r3, r2
 80062d4:	3320      	adds	r3, #32
 80062d6:	2200      	movs	r2, #0
 80062d8:	701a      	strb	r2, [r3, #0]
      TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4413      	add	r3, r2
 80062e0:	331b      	adds	r3, #27
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]
      TS_State->touchWeight[index]  = 0;
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4413      	add	r3, r2
 80062ec:	3316      	adds	r3, #22
 80062ee:	2200      	movs	r2, #0
 80062f0:	701a      	strb	r2, [r3, #0]
    for(index = 0; index < TS_MAX_NB_TOUCH; index++)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	3301      	adds	r3, #1
 80062f6:	60bb      	str	r3, [r7, #8]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d9da      	bls.n	80062b4 <BSP_TS_ResetTouchData+0x24>
    }

    ts_status = TS_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	73fb      	strb	r3, [r7, #15]

  } /* of if (TS_State != (TS_StateTypeDef *)NULL) */

  return (ts_status);
 8006302:	7bfb      	ldrb	r3, [r7, #15]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8006310:	b590      	push	{r4, r7, lr}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	607a      	str	r2, [r7, #4]
 800631a:	461a      	mov	r2, r3
 800631c:	460b      	mov	r3, r1
 800631e:	72fb      	strb	r3, [r7, #11]
 8006320:	4613      	mov	r3, r2
 8006322:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	685c      	ldr	r4, [r3, #4]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	68d8      	ldr	r0, [r3, #12]
 800632c:	893b      	ldrh	r3, [r7, #8]
 800632e:	7af9      	ldrb	r1, [r7, #11]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	47a0      	blx	r4
 8006334:	6178      	str	r0, [r7, #20]

  return ret;
 8006336:	697b      	ldr	r3, [r7, #20]
}
 8006338:	4618      	mov	r0, r3
 800633a:	371c      	adds	r7, #28
 800633c:	46bd      	mov	sp, r7
 800633e:	bd90      	pop	{r4, r7, pc}

08006340 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8006340:	b590      	push	{r4, r7, lr}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	461a      	mov	r2, r3
 800634c:	460b      	mov	r3, r1
 800634e:	72fb      	strb	r3, [r7, #11]
 8006350:	4613      	mov	r3, r2
 8006352:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681c      	ldr	r4, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	68d8      	ldr	r0, [r3, #12]
 800635c:	893b      	ldrh	r3, [r7, #8]
 800635e:	7af9      	ldrb	r1, [r7, #11]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	47a0      	blx	r4
 8006364:	6178      	str	r0, [r7, #20]

  return ret;
 8006366:	697b      	ldr	r3, [r7, #20]
}
 8006368:	4618      	mov	r0, r3
 800636a:	371c      	adds	r7, #28
 800636c:	46bd      	mov	sp, r7
 800636e:	bd90      	pop	{r4, r7, pc}

08006370 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	460b      	mov	r3, r1
 800637a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800637c:	f107 0208 	add.w	r2, r7, #8
 8006380:	2301      	movs	r3, #1
 8006382:	2120      	movs	r1, #32
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff ffc3 	bl	8006310 <hts221_read_reg>
 800638a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10f      	bne.n	80063b2 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	f003 0303 	and.w	r3, r3, #3
 8006398:	b2da      	uxtb	r2, r3
 800639a:	7a3b      	ldrb	r3, [r7, #8]
 800639c:	f362 0301 	bfi	r3, r2, #0, #2
 80063a0:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80063a2:	f107 0208 	add.w	r2, r7, #8
 80063a6:	2301      	movs	r3, #1
 80063a8:	2120      	movs	r1, #32
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7ff ffc8 	bl	8006340 <hts221_write_reg>
 80063b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80063b2:	68fb      	ldr	r3, [r7, #12]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80063c8:	f107 0208 	add.w	r2, r7, #8
 80063cc:	2301      	movs	r3, #1
 80063ce:	2120      	movs	r1, #32
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff ff9d 	bl	8006310 <hts221_read_reg>
 80063d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10f      	bne.n	80063fe <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	7a3b      	ldrb	r3, [r7, #8]
 80063e8:	f362 0382 	bfi	r3, r2, #2, #1
 80063ec:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80063ee:	f107 0208 	add.w	r2, r7, #8
 80063f2:	2301      	movs	r3, #1
 80063f4:	2120      	movs	r1, #32
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7ff ffa2 	bl	8006340 <hts221_write_reg>
 80063fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80063fe:	68fb      	ldr	r3, [r7, #12]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8006412:	f107 0208 	add.w	r2, r7, #8
 8006416:	2302      	movs	r3, #2
 8006418:	2128      	movs	r1, #40	; 0x28
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff ff78 	bl	8006310 <hts221_read_reg>
 8006420:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8006422:	7a7b      	ldrb	r3, [r7, #9]
 8006424:	b21a      	sxth	r2, r3
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006430:	b29b      	uxth	r3, r3
 8006432:	021b      	lsls	r3, r3, #8
 8006434:	b29a      	uxth	r2, r3
 8006436:	7a3b      	ldrb	r3, [r7, #8]
 8006438:	b29b      	uxth	r3, r3
 800643a:	4413      	add	r3, r2
 800643c:	b29b      	uxth	r3, r3
 800643e:	b21a      	sxth	r2, r3
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	801a      	strh	r2, [r3, #0]

  return ret;
 8006444:	68fb      	ldr	r3, [r7, #12]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8006458:	2301      	movs	r3, #1
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	210f      	movs	r1, #15
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff ff56 	bl	8006310 <hts221_read_reg>
 8006464:	60f8      	str	r0, [r7, #12]

  return ret;
 8006466:	68fb      	ldr	r3, [r7, #12]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800647c:	f107 0208 	add.w	r2, r7, #8
 8006480:	2301      	movs	r3, #1
 8006482:	2120      	movs	r1, #32
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff ff43 	bl	8006310 <hts221_read_reg>
 800648a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10f      	bne.n	80064b2 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8006492:	78fb      	ldrb	r3, [r7, #3]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	b2da      	uxtb	r2, r3
 800649a:	7a3b      	ldrb	r3, [r7, #8]
 800649c:	f362 13c7 	bfi	r3, r2, #7, #1
 80064a0:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80064a2:	f107 0208 	add.w	r2, r7, #8
 80064a6:	2301      	movs	r3, #1
 80064a8:	2120      	movs	r1, #32
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff ff48 	bl	8006340 <hts221_write_reg>
 80064b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80064b2:	68fb      	ldr	r3, [r7, #12]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <hts221_status_get>:
  * @param  val     Registers STATUS_REG
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_status_get(stmdev_ctx_t *ctx, hts221_status_reg_t *val)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_STATUS_REG, (uint8_t *) val, 1);
 80064c6:	2301      	movs	r3, #1
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	2127      	movs	r1, #39	; 0x27
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7ff ff1f 	bl	8006310 <hts221_read_reg>
 80064d2:	60f8      	str	r0, [r7, #12]

  return ret;
 80064d4:	68fb      	ldr	r3, [r7, #12]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80064e8:	f107 020b 	add.w	r2, r7, #11
 80064ec:	2301      	movs	r3, #1
 80064ee:	2130      	movs	r1, #48	; 0x30
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff ff0d 	bl	8006310 <hts221_read_reg>
 80064f6:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80064f8:	7afb      	ldrb	r3, [r7, #11]
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006502:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006510:	68fb      	ldr	r3, [r7, #12]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b084      	sub	sp, #16
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8006524:	f107 020b 	add.w	r2, r7, #11
 8006528:	2301      	movs	r3, #1
 800652a:	2131      	movs	r1, #49	; 0x31
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff feef 	bl	8006310 <hts221_read_reg>
 8006532:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8006534:	7afb      	ldrb	r3, [r7, #11]
 8006536:	ee07 3a90 	vmov	s15, r3
 800653a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800653e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006542:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800654c:	68fb      	ldr	r3, [r7, #12]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8006560:	f107 0208 	add.w	r2, r7, #8
 8006564:	2302      	movs	r3, #2
 8006566:	2136      	movs	r1, #54	; 0x36
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff fed1 	bl	8006310 <hts221_read_reg>
 800656e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8006570:	7a7b      	ldrb	r3, [r7, #9]
 8006572:	b29b      	uxth	r3, r3
 8006574:	021b      	lsls	r3, r3, #8
 8006576:	b29a      	uxth	r2, r3
 8006578:	7a3b      	ldrb	r3, [r7, #8]
 800657a:	b29b      	uxth	r3, r3
 800657c:	4413      	add	r3, r2
 800657e:	b29b      	uxth	r3, r3
 8006580:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8006582:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006594:	68fb      	ldr	r3, [r7, #12]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80065a8:	f107 0208 	add.w	r2, r7, #8
 80065ac:	2302      	movs	r3, #2
 80065ae:	213a      	movs	r1, #58	; 0x3a
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff fead 	bl	8006310 <hts221_read_reg>
 80065b6:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80065b8:	7a7b      	ldrb	r3, [r7, #9]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	021b      	lsls	r3, r3, #8
 80065be:	b29a      	uxth	r2, r3
 80065c0:	7a3b      	ldrb	r3, [r7, #8]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	4413      	add	r3, r2
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80065ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80065ce:	ee07 3a90 	vmov	s15, r3
 80065d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80065dc:	68fb      	ldr	r3, [r7, #12]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80065e6:	b590      	push	{r4, r7, lr}
 80065e8:	b087      	sub	sp, #28
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	461a      	mov	r2, r3
 80065f2:	460b      	mov	r3, r1
 80065f4:	72fb      	strb	r3, [r7, #11]
 80065f6:	4613      	mov	r3, r2
 80065f8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	685c      	ldr	r4, [r3, #4]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	68d8      	ldr	r0, [r3, #12]
 8006602:	893b      	ldrh	r3, [r7, #8]
 8006604:	7af9      	ldrb	r1, [r7, #11]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	47a0      	blx	r4
 800660a:	6178      	str	r0, [r7, #20]

  return ret;
 800660c:	697b      	ldr	r3, [r7, #20]
}
 800660e:	4618      	mov	r0, r3
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	bd90      	pop	{r4, r7, pc}

08006616 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8006616:	b590      	push	{r4, r7, lr}
 8006618:	b087      	sub	sp, #28
 800661a:	af00      	add	r7, sp, #0
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	461a      	mov	r2, r3
 8006622:	460b      	mov	r3, r1
 8006624:	72fb      	strb	r3, [r7, #11]
 8006626:	4613      	mov	r3, r2
 8006628:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681c      	ldr	r4, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	68d8      	ldr	r0, [r3, #12]
 8006632:	893b      	ldrh	r3, [r7, #8]
 8006634:	7af9      	ldrb	r1, [r7, #11]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	47a0      	blx	r4
 800663a:	6178      	str	r0, [r7, #20]

  return ret;
 800663c:	697b      	ldr	r3, [r7, #20]
}
 800663e:	4618      	mov	r0, r3
 8006640:	371c      	adds	r7, #28
 8006642:	46bd      	mov	sp, r7
 8006644:	bd90      	pop	{r4, r7, pc}
	...

08006648 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	ee07 3a90 	vmov	s15, r3
 8006656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006674 <lps22hh_from_lsb_to_hpa+0x2c>
 800665e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006662:	eef0 7a66 	vmov.f32	s15, s13
}
 8006666:	eeb0 0a67 	vmov.f32	s0, s15
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	49800000 	.word	0x49800000

08006678 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	4603      	mov	r3, r0
 8006680:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8006682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800668e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80066a8 <lps22hh_from_lsb_to_celsius+0x30>
 8006692:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006696:	eef0 7a66 	vmov.f32	s15, s13
}
 800669a:	eeb0 0a67 	vmov.f32	s0, s15
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	42c80000 	.word	0x42c80000

080066ac <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80066b8:	f107 0208 	add.w	r2, r7, #8
 80066bc:	2301      	movs	r3, #1
 80066be:	2110      	movs	r1, #16
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7ff ff90 	bl	80065e6 <lps22hh_read_reg>
 80066c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10f      	bne.n	80066ee <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	7a3b      	ldrb	r3, [r7, #8]
 80066d8:	f362 0341 	bfi	r3, r2, #1, #1
 80066dc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80066de:	f107 0208 	add.w	r2, r7, #8
 80066e2:	2301      	movs	r3, #1
 80066e4:	2110      	movs	r1, #16
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff ff95 	bl	8006616 <lps22hh_write_reg>
 80066ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80066ee:	68fb      	ldr	r3, [r7, #12]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006704:	f107 0210 	add.w	r2, r7, #16
 8006708:	2301      	movs	r3, #1
 800670a:	2110      	movs	r1, #16
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff ff6a 	bl	80065e6 <lps22hh_read_reg>
 8006712:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d107      	bne.n	800672a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800671a:	f107 020c 	add.w	r2, r7, #12
 800671e:	2301      	movs	r3, #1
 8006720:	2111      	movs	r1, #17
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7ff ff5f 	bl	80065e6 <lps22hh_read_reg>
 8006728:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10f      	bne.n	8006750 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	b2da      	uxtb	r2, r3
 8006738:	7c3b      	ldrb	r3, [r7, #16]
 800673a:	f362 1306 	bfi	r3, r2, #4, #3
 800673e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006740:	f107 0210 	add.w	r2, r7, #16
 8006744:	2301      	movs	r3, #1
 8006746:	2110      	movs	r1, #16
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7ff ff64 	bl	8006616 <lps22hh_write_reg>
 800674e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d119      	bne.n	800678a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8006756:	78fb      	ldrb	r3, [r7, #3]
 8006758:	091b      	lsrs	r3, r3, #4
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	b2da      	uxtb	r2, r3
 8006760:	7b3b      	ldrb	r3, [r7, #12]
 8006762:	f362 0341 	bfi	r3, r2, #1, #1
 8006766:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	08db      	lsrs	r3, r3, #3
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	b2da      	uxtb	r2, r3
 8006772:	7b3b      	ldrb	r3, [r7, #12]
 8006774:	f362 0300 	bfi	r3, r2, #0, #1
 8006778:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800677a:	f107 020c 	add.w	r2, r7, #12
 800677e:	2301      	movs	r3, #1
 8006780:	2111      	movs	r1, #17
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff ff47 	bl	8006616 <lps22hh_write_reg>
 8006788:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800678a:	697b      	ldr	r3, [r7, #20]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800679e:	f107 0208 	add.w	r2, r7, #8
 80067a2:	2303      	movs	r3, #3
 80067a4:	2128      	movs	r1, #40	; 0x28
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff ff1d 	bl	80065e6 <lps22hh_read_reg>
 80067ac:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80067ae:	7abb      	ldrb	r3, [r7, #10]
 80067b0:	461a      	mov	r2, r3
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	7a7a      	ldrb	r2, [r7, #9]
 80067be:	441a      	add	r2, r3
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	021b      	lsls	r3, r3, #8
 80067ca:	7a3a      	ldrb	r2, [r7, #8]
 80067cc:	441a      	add	r2, r3
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	021a      	lsls	r2, r3, #8
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	601a      	str	r2, [r3, #0]

  return ret;
 80067dc:	68fb      	ldr	r3, [r7, #12]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80067f0:	f107 0208 	add.w	r2, r7, #8
 80067f4:	2302      	movs	r3, #2
 80067f6:	212b      	movs	r1, #43	; 0x2b
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff fef4 	bl	80065e6 <lps22hh_read_reg>
 80067fe:	60f8      	str	r0, [r7, #12]
  *buff = (int16_t)reg[1];
 8006800:	7a7b      	ldrb	r3, [r7, #9]
 8006802:	b21a      	sxth	r2, r3
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + (int16_t)reg[0];
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800680e:	b29b      	uxth	r3, r3
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	b29a      	uxth	r2, r3
 8006814:	7a3b      	ldrb	r3, [r7, #8]
 8006816:	b29b      	uxth	r3, r3
 8006818:	4413      	add	r3, r2
 800681a:	b29b      	uxth	r3, r3
 800681c:	b21a      	sxth	r2, r3
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	801a      	strh	r2, [r3, #0]

  return ret;
 8006822:	68fb      	ldr	r3, [r7, #12]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006836:	2301      	movs	r3, #1
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	210f      	movs	r1, #15
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff fed2 	bl	80065e6 <lps22hh_read_reg>
 8006842:	60f8      	str	r0, [r7, #12]

  return ret;
 8006844:	68fb      	ldr	r3, [r7, #12]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	460b      	mov	r3, r1
 8006858:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800685a:	f107 0208 	add.w	r2, r7, #8
 800685e:	2301      	movs	r3, #1
 8006860:	2111      	movs	r1, #17
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff febf 	bl	80065e6 <lps22hh_read_reg>
 8006868:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10f      	bne.n	8006890 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	b2da      	uxtb	r2, r3
 8006878:	7a3b      	ldrb	r3, [r7, #8]
 800687a:	f362 0382 	bfi	r3, r2, #2, #1
 800687e:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006880:	f107 0208 	add.w	r2, r7, #8
 8006884:	2301      	movs	r3, #1
 8006886:	2111      	movs	r1, #17
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff fec4 	bl	8006616 <lps22hh_write_reg>
 800688e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006890:	68fb      	ldr	r3, [r7, #12]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80068a4:	f107 0208 	add.w	r2, r7, #8
 80068a8:	2301      	movs	r3, #1
 80068aa:	2111      	movs	r1, #17
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff fe9a 	bl	80065e6 <lps22hh_read_reg>
 80068b2:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 80068b4:	7a3b      	ldrb	r3, [r7, #8]
 80068b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	461a      	mov	r2, r3
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	701a      	strb	r2, [r3, #0]

  return ret;
 80068c2:	68fb      	ldr	r3, [r7, #12]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80068d0:	4b08      	ldr	r3, [pc, #32]	; (80068f4 <HAL_Init+0x28>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a07      	ldr	r2, [pc, #28]	; (80068f4 <HAL_Init+0x28>)
 80068d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068da:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068dc:	2003      	movs	r0, #3
 80068de:	f000 fd49 	bl	8007374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80068e2:	2000      	movs	r0, #0
 80068e4:	f000 f808 	bl	80068f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80068e8:	f7fd f8f8 	bl	8003adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	40023c00 	.word	0x40023c00

080068f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006900:	4b12      	ldr	r3, [pc, #72]	; (800694c <HAL_InitTick+0x54>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	4b12      	ldr	r3, [pc, #72]	; (8006950 <HAL_InitTick+0x58>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	4619      	mov	r1, r3
 800690a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800690e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006912:	fbb2 f3f3 	udiv	r3, r2, r3
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fd61 	bl	80073de <HAL_SYSTICK_Config>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e00e      	b.n	8006944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b0f      	cmp	r3, #15
 800692a:	d80a      	bhi.n	8006942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800692c:	2200      	movs	r2, #0
 800692e:	6879      	ldr	r1, [r7, #4]
 8006930:	f04f 30ff 	mov.w	r0, #4294967295
 8006934:	f000 fd29 	bl	800738a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006938:	4a06      	ldr	r2, [pc, #24]	; (8006954 <HAL_InitTick+0x5c>)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	e000      	b.n	8006944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
}
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	20000080 	.word	0x20000080
 8006950:	200000cc 	.word	0x200000cc
 8006954:	200000c8 	.word	0x200000c8

08006958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800695c:	4b06      	ldr	r3, [pc, #24]	; (8006978 <HAL_IncTick+0x20>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	461a      	mov	r2, r3
 8006962:	4b06      	ldr	r3, [pc, #24]	; (800697c <HAL_IncTick+0x24>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4413      	add	r3, r2
 8006968:	4a04      	ldr	r2, [pc, #16]	; (800697c <HAL_IncTick+0x24>)
 800696a:	6013      	str	r3, [r2, #0]
}
 800696c:	bf00      	nop
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	200000cc 	.word	0x200000cc
 800697c:	20037c7c 	.word	0x20037c7c

08006980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  return uwTick;
 8006984:	4b03      	ldr	r3, [pc, #12]	; (8006994 <HAL_GetTick+0x14>)
 8006986:	681b      	ldr	r3, [r3, #0]
}
 8006988:	4618      	mov	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	20037c7c 	.word	0x20037c7c

08006998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069a0:	f7ff ffee 	bl	8006980 <HAL_GetTick>
 80069a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b0:	d005      	beq.n	80069be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069b2:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <HAL_Delay+0x44>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4413      	add	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80069be:	bf00      	nop
 80069c0:	f7ff ffde 	bl	8006980 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d8f7      	bhi.n	80069c0 <HAL_Delay+0x28>
  {
  }
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	200000cc 	.word	0x200000cc

080069e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e031      	b.n	8006a5a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d109      	bne.n	8006a12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fa fb12 	bl	8001028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	f003 0310 	and.w	r3, r3, #16
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d116      	bne.n	8006a4c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a22:	4b10      	ldr	r3, [pc, #64]	; (8006a64 <HAL_ADC_Init+0x84>)
 8006a24:	4013      	ands	r3, r2
 8006a26:	f043 0202 	orr.w	r2, r3, #2
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fad6 	bl	8006fe0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	f023 0303 	bic.w	r3, r3, #3
 8006a42:	f043 0201 	orr.w	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	641a      	str	r2, [r3, #64]	; 0x40
 8006a4a:	e001      	b.n	8006a50 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	ffffeefd 	.word	0xffffeefd

08006a68 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <HAL_ADC_Start+0x1a>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e0ad      	b.n	8006bde <HAL_ADC_Start+0x176>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d018      	beq.n	8006aca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8006aa8:	4b50      	ldr	r3, [pc, #320]	; (8006bec <HAL_ADC_Start+0x184>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a50      	ldr	r2, [pc, #320]	; (8006bf0 <HAL_ADC_Start+0x188>)
 8006aae:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab2:	0c9a      	lsrs	r2, r3, #18
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	4413      	add	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8006abc:	e002      	b.n	8006ac4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1f9      	bne.n	8006abe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d175      	bne.n	8006bc4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006adc:	4b45      	ldr	r3, [pc, #276]	; (8006bf4 <HAL_ADC_Start+0x18c>)
 8006ade:	4013      	ands	r3, r2
 8006ae0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d007      	beq.n	8006b06 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006afe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b12:	d106      	bne.n	8006b22 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b18:	f023 0206 	bic.w	r2, r3, #6
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	645a      	str	r2, [r3, #68]	; 0x44
 8006b20:	e002      	b.n	8006b28 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006b38:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8006b3a:	4b2f      	ldr	r3, [pc, #188]	; (8006bf8 <HAL_ADC_Start+0x190>)
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f003 031f 	and.w	r3, r3, #31
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10f      	bne.n	8006b66 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d143      	bne.n	8006bdc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689a      	ldr	r2, [r3, #8]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006b62:	609a      	str	r2, [r3, #8]
 8006b64:	e03a      	b.n	8006bdc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a24      	ldr	r2, [pc, #144]	; (8006bfc <HAL_ADC_Start+0x194>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d10e      	bne.n	8006b8e <HAL_ADC_Start+0x126>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d107      	bne.n	8006b8e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006b8c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8006b8e:	4b1a      	ldr	r3, [pc, #104]	; (8006bf8 <HAL_ADC_Start+0x190>)
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f003 0310 	and.w	r3, r3, #16
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d120      	bne.n	8006bdc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a18      	ldr	r2, [pc, #96]	; (8006c00 <HAL_ADC_Start+0x198>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d11b      	bne.n	8006bdc <HAL_ADC_Start+0x174>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d114      	bne.n	8006bdc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006bc0:	609a      	str	r2, [r3, #8]
 8006bc2:	e00b      	b.n	8006bdc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc8:	f043 0210 	orr.w	r2, r3, #16
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd4:	f043 0201 	orr.w	r2, r3, #1
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	20000080 	.word	0x20000080
 8006bf0:	431bde83 	.word	0x431bde83
 8006bf4:	fffff8fe 	.word	0xfffff8fe
 8006bf8:	40012300 	.word	0x40012300
 8006bfc:	40012000 	.word	0x40012000
 8006c00:	40012200 	.word	0x40012200

08006c04 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c20:	d113      	bne.n	8006c4a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c30:	d10b      	bne.n	8006c4a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	f043 0220 	orr.w	r2, r3, #32
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e063      	b.n	8006d12 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006c4a:	f7ff fe99 	bl	8006980 <HAL_GetTick>
 8006c4e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006c50:	e021      	b.n	8006c96 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c58:	d01d      	beq.n	8006c96 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <HAL_ADC_PollForConversion+0x6c>
 8006c60:	f7ff fe8e 	bl	8006980 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d212      	bcs.n	8006c96 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d00b      	beq.n	8006c96 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	f043 0204 	orr.w	r2, r3, #4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e03d      	b.n	8006d12 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d1d6      	bne.n	8006c52 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f06f 0212 	mvn.w	r2, #18
 8006cac:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d123      	bne.n	8006d10 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d11f      	bne.n	8006d10 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d006      	beq.n	8006cec <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d111      	bne.n	8006d10 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d105      	bne.n	8006d10 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d08:	f043 0201 	orr.w	r2, r3, #1
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d101      	bne.n	8006d50 <HAL_ADC_ConfigChannel+0x1c>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e136      	b.n	8006fbe <HAL_ADC_ConfigChannel+0x28a>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b09      	cmp	r3, #9
 8006d5e:	d93a      	bls.n	8006dd6 <HAL_ADC_ConfigChannel+0xa2>
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d68:	d035      	beq.n	8006dd6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68d9      	ldr	r1, [r3, #12]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	461a      	mov	r2, r3
 8006d78:	4613      	mov	r3, r2
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	4413      	add	r3, r2
 8006d7e:	3b1e      	subs	r3, #30
 8006d80:	2207      	movs	r2, #7
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	43da      	mvns	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	400a      	ands	r2, r1
 8006d8e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a8d      	ldr	r2, [pc, #564]	; (8006fcc <HAL_ADC_ConfigChannel+0x298>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d10a      	bne.n	8006db0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68d9      	ldr	r1, [r3, #12]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	061a      	lsls	r2, r3, #24
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006dae:	e035      	b.n	8006e1c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68d9      	ldr	r1, [r3, #12]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	4403      	add	r3, r0
 8006dc8:	3b1e      	subs	r3, #30
 8006dca:	409a      	lsls	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006dd4:	e022      	b.n	8006e1c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6919      	ldr	r1, [r3, #16]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	461a      	mov	r2, r3
 8006de4:	4613      	mov	r3, r2
 8006de6:	005b      	lsls	r3, r3, #1
 8006de8:	4413      	add	r3, r2
 8006dea:	2207      	movs	r2, #7
 8006dec:	fa02 f303 	lsl.w	r3, r2, r3
 8006df0:	43da      	mvns	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	400a      	ands	r2, r1
 8006df8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6919      	ldr	r1, [r3, #16]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	4403      	add	r3, r0
 8006e12:	409a      	lsls	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2b06      	cmp	r3, #6
 8006e22:	d824      	bhi.n	8006e6e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	3b05      	subs	r3, #5
 8006e36:	221f      	movs	r2, #31
 8006e38:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3c:	43da      	mvns	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	400a      	ands	r2, r1
 8006e44:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	4618      	mov	r0, r3
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	3b05      	subs	r3, #5
 8006e60:	fa00 f203 	lsl.w	r2, r0, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	635a      	str	r2, [r3, #52]	; 0x34
 8006e6c:	e04c      	b.n	8006f08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	2b0c      	cmp	r3, #12
 8006e74:	d824      	bhi.n	8006ec0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	4613      	mov	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	3b23      	subs	r3, #35	; 0x23
 8006e88:	221f      	movs	r2, #31
 8006e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8e:	43da      	mvns	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	400a      	ands	r2, r1
 8006e96:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	3b23      	subs	r3, #35	; 0x23
 8006eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	631a      	str	r2, [r3, #48]	; 0x30
 8006ebe:	e023      	b.n	8006f08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	3b41      	subs	r3, #65	; 0x41
 8006ed2:	221f      	movs	r2, #31
 8006ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed8:	43da      	mvns	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	400a      	ands	r2, r1
 8006ee0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	4618      	mov	r0, r3
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	3b41      	subs	r3, #65	; 0x41
 8006efc:	fa00 f203 	lsl.w	r2, r0, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a30      	ldr	r2, [pc, #192]	; (8006fd0 <HAL_ADC_ConfigChannel+0x29c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d10a      	bne.n	8006f28 <HAL_ADC_ConfigChannel+0x1f4>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f1a:	d105      	bne.n	8006f28 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006f1c:	4b2d      	ldr	r3, [pc, #180]	; (8006fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	4a2c      	ldr	r2, [pc, #176]	; (8006fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8006f22:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006f26:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a28      	ldr	r2, [pc, #160]	; (8006fd0 <HAL_ADC_ConfigChannel+0x29c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d10f      	bne.n	8006f52 <HAL_ADC_ConfigChannel+0x21e>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b12      	cmp	r3, #18
 8006f38:	d10b      	bne.n	8006f52 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8006f3a:	4b26      	ldr	r3, [pc, #152]	; (8006fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	4a25      	ldr	r2, [pc, #148]	; (8006fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8006f40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006f44:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006f46:	4b23      	ldr	r3, [pc, #140]	; (8006fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	4a22      	ldr	r2, [pc, #136]	; (8006fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8006f4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f50:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a1e      	ldr	r2, [pc, #120]	; (8006fd0 <HAL_ADC_ConfigChannel+0x29c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d12b      	bne.n	8006fb4 <HAL_ADC_ConfigChannel+0x280>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1a      	ldr	r2, [pc, #104]	; (8006fcc <HAL_ADC_ConfigChannel+0x298>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d003      	beq.n	8006f6e <HAL_ADC_ConfigChannel+0x23a>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b11      	cmp	r3, #17
 8006f6c:	d122      	bne.n	8006fb4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006f6e:	4b19      	ldr	r3, [pc, #100]	; (8006fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	4a18      	ldr	r2, [pc, #96]	; (8006fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8006f74:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006f78:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006f7a:	4b16      	ldr	r3, [pc, #88]	; (8006fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	4a15      	ldr	r2, [pc, #84]	; (8006fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8006f80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f84:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a10      	ldr	r2, [pc, #64]	; (8006fcc <HAL_ADC_ConfigChannel+0x298>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d111      	bne.n	8006fb4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006f90:	4b11      	ldr	r3, [pc, #68]	; (8006fd8 <HAL_ADC_ConfigChannel+0x2a4>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a11      	ldr	r2, [pc, #68]	; (8006fdc <HAL_ADC_ConfigChannel+0x2a8>)
 8006f96:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9a:	0c9a      	lsrs	r2, r3, #18
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006fa6:	e002      	b.n	8006fae <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1f9      	bne.n	8006fa8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	10000012 	.word	0x10000012
 8006fd0:	40012000 	.word	0x40012000
 8006fd4:	40012300 	.word	0x40012300
 8006fd8:	20000080 	.word	0x20000080
 8006fdc:	431bde83 	.word	0x431bde83

08006fe0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006fe8:	4b78      	ldr	r3, [pc, #480]	; (80071cc <ADC_Init+0x1ec>)
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	4a77      	ldr	r2, [pc, #476]	; (80071cc <ADC_Init+0x1ec>)
 8006fee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006ff2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006ff4:	4b75      	ldr	r3, [pc, #468]	; (80071cc <ADC_Init+0x1ec>)
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	4973      	ldr	r1, [pc, #460]	; (80071cc <ADC_Init+0x1ec>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007010:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6859      	ldr	r1, [r3, #4]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	021a      	lsls	r2, r3, #8
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007034:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6859      	ldr	r1, [r3, #4]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689a      	ldr	r2, [r3, #8]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007056:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6899      	ldr	r1, [r3, #8]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706e:	4a58      	ldr	r2, [pc, #352]	; (80071d0 <ADC_Init+0x1f0>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d022      	beq.n	80070ba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689a      	ldr	r2, [r3, #8]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007082:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6899      	ldr	r1, [r3, #8]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80070a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6899      	ldr	r1, [r3, #8]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	609a      	str	r2, [r3, #8]
 80070b8:	e00f      	b.n	80070da <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80070c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80070d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0202 	bic.w	r2, r2, #2
 80070e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6899      	ldr	r1, [r3, #8]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	005a      	lsls	r2, r3, #1
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d01b      	beq.n	8007140 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007116:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007126:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6859      	ldr	r1, [r3, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	3b01      	subs	r3, #1
 8007134:	035a      	lsls	r2, r3, #13
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	605a      	str	r2, [r3, #4]
 800713e:	e007      	b.n	8007150 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800714e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800715e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	3b01      	subs	r3, #1
 800716c:	051a      	lsls	r2, r3, #20
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689a      	ldr	r2, [r3, #8]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007184:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6899      	ldr	r1, [r3, #8]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007192:	025a      	lsls	r2, r3, #9
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	430a      	orrs	r2, r1
 800719a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689a      	ldr	r2, [r3, #8]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6899      	ldr	r1, [r3, #8]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	029a      	lsls	r2, r3, #10
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	430a      	orrs	r2, r1
 80071be:	609a      	str	r2, [r3, #8]
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	40012300 	.word	0x40012300
 80071d0:	0f000001 	.word	0x0f000001

080071d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071e4:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <__NVIC_SetPriorityGrouping+0x40>)
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80071f0:	4013      	ands	r3, r2
 80071f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80071fc:	4b06      	ldr	r3, [pc, #24]	; (8007218 <__NVIC_SetPriorityGrouping+0x44>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007202:	4a04      	ldr	r2, [pc, #16]	; (8007214 <__NVIC_SetPriorityGrouping+0x40>)
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	60d3      	str	r3, [r2, #12]
}
 8007208:	bf00      	nop
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	e000ed00 	.word	0xe000ed00
 8007218:	05fa0000 	.word	0x05fa0000

0800721c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007220:	4b04      	ldr	r3, [pc, #16]	; (8007234 <__NVIC_GetPriorityGrouping+0x18>)
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	0a1b      	lsrs	r3, r3, #8
 8007226:	f003 0307 	and.w	r3, r3, #7
}
 800722a:	4618      	mov	r0, r3
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	e000ed00 	.word	0xe000ed00

08007238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	4603      	mov	r3, r0
 8007240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007246:	2b00      	cmp	r3, #0
 8007248:	db0b      	blt.n	8007262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800724a:	79fb      	ldrb	r3, [r7, #7]
 800724c:	f003 021f 	and.w	r2, r3, #31
 8007250:	4907      	ldr	r1, [pc, #28]	; (8007270 <__NVIC_EnableIRQ+0x38>)
 8007252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007256:	095b      	lsrs	r3, r3, #5
 8007258:	2001      	movs	r0, #1
 800725a:	fa00 f202 	lsl.w	r2, r0, r2
 800725e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	e000e100 	.word	0xe000e100

08007274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	6039      	str	r1, [r7, #0]
 800727e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007284:	2b00      	cmp	r3, #0
 8007286:	db0a      	blt.n	800729e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	b2da      	uxtb	r2, r3
 800728c:	490c      	ldr	r1, [pc, #48]	; (80072c0 <__NVIC_SetPriority+0x4c>)
 800728e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007292:	0112      	lsls	r2, r2, #4
 8007294:	b2d2      	uxtb	r2, r2
 8007296:	440b      	add	r3, r1
 8007298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800729c:	e00a      	b.n	80072b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	4908      	ldr	r1, [pc, #32]	; (80072c4 <__NVIC_SetPriority+0x50>)
 80072a4:	79fb      	ldrb	r3, [r7, #7]
 80072a6:	f003 030f 	and.w	r3, r3, #15
 80072aa:	3b04      	subs	r3, #4
 80072ac:	0112      	lsls	r2, r2, #4
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	440b      	add	r3, r1
 80072b2:	761a      	strb	r2, [r3, #24]
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	e000e100 	.word	0xe000e100
 80072c4:	e000ed00 	.word	0xe000ed00

080072c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b089      	sub	sp, #36	; 0x24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f003 0307 	and.w	r3, r3, #7
 80072da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	f1c3 0307 	rsb	r3, r3, #7
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	bf28      	it	cs
 80072e6:	2304      	movcs	r3, #4
 80072e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	3304      	adds	r3, #4
 80072ee:	2b06      	cmp	r3, #6
 80072f0:	d902      	bls.n	80072f8 <NVIC_EncodePriority+0x30>
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	3b03      	subs	r3, #3
 80072f6:	e000      	b.n	80072fa <NVIC_EncodePriority+0x32>
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	fa02 f303 	lsl.w	r3, r2, r3
 8007306:	43da      	mvns	r2, r3
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	401a      	ands	r2, r3
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007310:	f04f 31ff 	mov.w	r1, #4294967295
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	fa01 f303 	lsl.w	r3, r1, r3
 800731a:	43d9      	mvns	r1, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007320:	4313      	orrs	r3, r2
         );
}
 8007322:	4618      	mov	r0, r3
 8007324:	3724      	adds	r7, #36	; 0x24
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
	...

08007330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3b01      	subs	r3, #1
 800733c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007340:	d301      	bcc.n	8007346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007342:	2301      	movs	r3, #1
 8007344:	e00f      	b.n	8007366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007346:	4a0a      	ldr	r2, [pc, #40]	; (8007370 <SysTick_Config+0x40>)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3b01      	subs	r3, #1
 800734c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800734e:	210f      	movs	r1, #15
 8007350:	f04f 30ff 	mov.w	r0, #4294967295
 8007354:	f7ff ff8e 	bl	8007274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007358:	4b05      	ldr	r3, [pc, #20]	; (8007370 <SysTick_Config+0x40>)
 800735a:	2200      	movs	r2, #0
 800735c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800735e:	4b04      	ldr	r3, [pc, #16]	; (8007370 <SysTick_Config+0x40>)
 8007360:	2207      	movs	r2, #7
 8007362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	e000e010 	.word	0xe000e010

08007374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff ff29 	bl	80071d4 <__NVIC_SetPriorityGrouping>
}
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800738a:	b580      	push	{r7, lr}
 800738c:	b086      	sub	sp, #24
 800738e:	af00      	add	r7, sp, #0
 8007390:	4603      	mov	r3, r0
 8007392:	60b9      	str	r1, [r7, #8]
 8007394:	607a      	str	r2, [r7, #4]
 8007396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007398:	2300      	movs	r3, #0
 800739a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800739c:	f7ff ff3e 	bl	800721c <__NVIC_GetPriorityGrouping>
 80073a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	68b9      	ldr	r1, [r7, #8]
 80073a6:	6978      	ldr	r0, [r7, #20]
 80073a8:	f7ff ff8e 	bl	80072c8 <NVIC_EncodePriority>
 80073ac:	4602      	mov	r2, r0
 80073ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073b2:	4611      	mov	r1, r2
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7ff ff5d 	bl	8007274 <__NVIC_SetPriority>
}
 80073ba:	bf00      	nop
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b082      	sub	sp, #8
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	4603      	mov	r3, r0
 80073ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80073cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7ff ff31 	bl	8007238 <__NVIC_EnableIRQ>
}
 80073d6:	bf00      	nop
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b082      	sub	sp, #8
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7ff ffa2 	bl	8007330 <SysTick_Config>
 80073ec:	4603      	mov	r3, r0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007404:	f7ff fabc 	bl	8006980 <HAL_GetTick>
 8007408:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e099      	b.n	8007548 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 0201 	bic.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007434:	e00f      	b.n	8007456 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007436:	f7ff faa3 	bl	8006980 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2b05      	cmp	r3, #5
 8007442:	d908      	bls.n	8007456 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2220      	movs	r2, #32
 8007448:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2203      	movs	r2, #3
 800744e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e078      	b.n	8007548 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e8      	bne.n	8007436 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	4b38      	ldr	r3, [pc, #224]	; (8007550 <HAL_DMA_Init+0x158>)
 8007470:	4013      	ands	r3, r2
 8007472:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007482:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800748e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800749a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	2b04      	cmp	r3, #4
 80074ae:	d107      	bne.n	80074c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b8:	4313      	orrs	r3, r2
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	4313      	orrs	r3, r2
 80074be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f023 0307 	bic.w	r3, r3, #7
 80074d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	4313      	orrs	r3, r2
 80074e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d117      	bne.n	800751a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00e      	beq.n	800751a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fb03 	bl	8007b08 <DMA_CheckFifoParam>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d008      	beq.n	800751a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2240      	movs	r2, #64	; 0x40
 800750c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007516:	2301      	movs	r3, #1
 8007518:	e016      	b.n	8007548 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 faba 	bl	8007a9c <DMA_CalcBaseAndBitshift>
 8007528:	4603      	mov	r3, r0
 800752a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007530:	223f      	movs	r2, #63	; 0x3f
 8007532:	409a      	lsls	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	f010803f 	.word	0xf010803f

08007554 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e050      	b.n	8007608 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d101      	bne.n	8007576 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007572:	2302      	movs	r3, #2
 8007574:	e048      	b.n	8007608 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0201 	bic.w	r2, r2, #1
 8007584:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2200      	movs	r2, #0
 8007594:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2200      	movs	r2, #0
 800759c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2200      	movs	r2, #0
 80075a4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2200      	movs	r2, #0
 80075ac:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2221      	movs	r2, #33	; 0x21
 80075b4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fa70 	bl	8007a9c <DMA_CalcBaseAndBitshift>
 80075bc:	4603      	mov	r3, r0
 80075be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c4:	223f      	movs	r2, #63	; 0x3f
 80075c6:	409a      	lsls	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007626:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800762e:	2b01      	cmp	r3, #1
 8007630:	d101      	bne.n	8007636 <HAL_DMA_Start_IT+0x26>
 8007632:	2302      	movs	r3, #2
 8007634:	e048      	b.n	80076c8 <HAL_DMA_Start_IT+0xb8>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b01      	cmp	r3, #1
 8007648:	d137      	bne.n	80076ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2202      	movs	r2, #2
 800764e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	68b9      	ldr	r1, [r7, #8]
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 f9ee 	bl	8007a40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007668:	223f      	movs	r2, #63	; 0x3f
 800766a:	409a      	lsls	r2, r3
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0216 	orr.w	r2, r2, #22
 800767e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	695a      	ldr	r2, [r3, #20]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800768e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	d007      	beq.n	80076a8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0208 	orr.w	r2, r2, #8
 80076a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f042 0201 	orr.w	r2, r2, #1
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	e005      	b.n	80076c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80076c2:	2302      	movs	r3, #2
 80076c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d004      	beq.n	80076ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2280      	movs	r2, #128	; 0x80
 80076e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e00c      	b.n	8007708 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2205      	movs	r2, #5
 80076f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f022 0201 	bic.w	r2, r2, #1
 8007704:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007720:	4b8e      	ldr	r3, [pc, #568]	; (800795c <HAL_DMA_IRQHandler+0x248>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a8e      	ldr	r2, [pc, #568]	; (8007960 <HAL_DMA_IRQHandler+0x24c>)
 8007726:	fba2 2303 	umull	r2, r3, r2, r3
 800772a:	0a9b      	lsrs	r3, r3, #10
 800772c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007732:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800773e:	2208      	movs	r2, #8
 8007740:	409a      	lsls	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4013      	ands	r3, r2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d01a      	beq.n	8007780 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b00      	cmp	r3, #0
 8007756:	d013      	beq.n	8007780 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0204 	bic.w	r2, r2, #4
 8007766:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800776c:	2208      	movs	r2, #8
 800776e:	409a      	lsls	r2, r3
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007778:	f043 0201 	orr.w	r2, r3, #1
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007784:	2201      	movs	r2, #1
 8007786:	409a      	lsls	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4013      	ands	r3, r2
 800778c:	2b00      	cmp	r3, #0
 800778e:	d012      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00b      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077a2:	2201      	movs	r2, #1
 80077a4:	409a      	lsls	r2, r3
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ae:	f043 0202 	orr.w	r2, r3, #2
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ba:	2204      	movs	r2, #4
 80077bc:	409a      	lsls	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	4013      	ands	r3, r2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d012      	beq.n	80077ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00b      	beq.n	80077ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d8:	2204      	movs	r2, #4
 80077da:	409a      	lsls	r2, r3
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e4:	f043 0204 	orr.w	r2, r3, #4
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077f0:	2210      	movs	r2, #16
 80077f2:	409a      	lsls	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4013      	ands	r3, r2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d043      	beq.n	8007884 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d03c      	beq.n	8007884 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800780e:	2210      	movs	r2, #16
 8007810:	409a      	lsls	r2, r3
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d018      	beq.n	8007856 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d108      	bne.n	8007844 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	2b00      	cmp	r3, #0
 8007838:	d024      	beq.n	8007884 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	4798      	blx	r3
 8007842:	e01f      	b.n	8007884 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007848:	2b00      	cmp	r3, #0
 800784a:	d01b      	beq.n	8007884 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	4798      	blx	r3
 8007854:	e016      	b.n	8007884 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007860:	2b00      	cmp	r3, #0
 8007862:	d107      	bne.n	8007874 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f022 0208 	bic.w	r2, r2, #8
 8007872:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007888:	2220      	movs	r2, #32
 800788a:	409a      	lsls	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4013      	ands	r3, r2
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 808f 	beq.w	80079b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0310 	and.w	r3, r3, #16
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 8087 	beq.w	80079b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078aa:	2220      	movs	r2, #32
 80078ac:	409a      	lsls	r2, r3
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b05      	cmp	r3, #5
 80078bc:	d136      	bne.n	800792c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 0216 	bic.w	r2, r2, #22
 80078cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	695a      	ldr	r2, [r3, #20]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d103      	bne.n	80078ee <HAL_DMA_IRQHandler+0x1da>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d007      	beq.n	80078fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 0208 	bic.w	r2, r2, #8
 80078fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007902:	223f      	movs	r2, #63	; 0x3f
 8007904:	409a      	lsls	r2, r3
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791e:	2b00      	cmp	r3, #0
 8007920:	d07e      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	4798      	blx	r3
        }
        return;
 800792a:	e079      	b.n	8007a20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d01d      	beq.n	8007976 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10d      	bne.n	8007964 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800794c:	2b00      	cmp	r3, #0
 800794e:	d031      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	4798      	blx	r3
 8007958:	e02c      	b.n	80079b4 <HAL_DMA_IRQHandler+0x2a0>
 800795a:	bf00      	nop
 800795c:	20000080 	.word	0x20000080
 8007960:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007968:	2b00      	cmp	r3, #0
 800796a:	d023      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	4798      	blx	r3
 8007974:	e01e      	b.n	80079b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10f      	bne.n	80079a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0210 	bic.w	r2, r2, #16
 8007992:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d032      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d022      	beq.n	8007a0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2205      	movs	r2, #5
 80079cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f022 0201 	bic.w	r2, r2, #1
 80079de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	3301      	adds	r3, #1
 80079e4:	60bb      	str	r3, [r7, #8]
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d307      	bcc.n	80079fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1f2      	bne.n	80079e0 <HAL_DMA_IRQHandler+0x2cc>
 80079fa:	e000      	b.n	80079fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80079fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d005      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	4798      	blx	r3
 8007a1e:	e000      	b.n	8007a22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007a20:	bf00      	nop
    }
  }
}
 8007a22:	3718      	adds	r7, #24
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
 8007a4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b40      	cmp	r3, #64	; 0x40
 8007a6c:	d108      	bne.n	8007a80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007a7e:	e007      	b.n	8007a90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	60da      	str	r2, [r3, #12]
}
 8007a90:	bf00      	nop
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	3b10      	subs	r3, #16
 8007aac:	4a13      	ldr	r2, [pc, #76]	; (8007afc <DMA_CalcBaseAndBitshift+0x60>)
 8007aae:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab2:	091b      	lsrs	r3, r3, #4
 8007ab4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007ab6:	4a12      	ldr	r2, [pc, #72]	; (8007b00 <DMA_CalcBaseAndBitshift+0x64>)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4413      	add	r3, r2
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d908      	bls.n	8007adc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	4b0c      	ldr	r3, [pc, #48]	; (8007b04 <DMA_CalcBaseAndBitshift+0x68>)
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	1d1a      	adds	r2, r3, #4
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	659a      	str	r2, [r3, #88]	; 0x58
 8007ada:	e006      	b.n	8007aea <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	4b08      	ldr	r3, [pc, #32]	; (8007b04 <DMA_CalcBaseAndBitshift+0x68>)
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	aaaaaaab 	.word	0xaaaaaaab
 8007b00:	080d69a0 	.word	0x080d69a0
 8007b04:	fffffc00 	.word	0xfffffc00

08007b08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d11f      	bne.n	8007b62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d856      	bhi.n	8007bd6 <DMA_CheckFifoParam+0xce>
 8007b28:	a201      	add	r2, pc, #4	; (adr r2, 8007b30 <DMA_CheckFifoParam+0x28>)
 8007b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2e:	bf00      	nop
 8007b30:	08007b41 	.word	0x08007b41
 8007b34:	08007b53 	.word	0x08007b53
 8007b38:	08007b41 	.word	0x08007b41
 8007b3c:	08007bd7 	.word	0x08007bd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d046      	beq.n	8007bda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b50:	e043      	b.n	8007bda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b5a:	d140      	bne.n	8007bde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b60:	e03d      	b.n	8007bde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b6a:	d121      	bne.n	8007bb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d837      	bhi.n	8007be2 <DMA_CheckFifoParam+0xda>
 8007b72:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <DMA_CheckFifoParam+0x70>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007b89 	.word	0x08007b89
 8007b7c:	08007b8f 	.word	0x08007b8f
 8007b80:	08007b89 	.word	0x08007b89
 8007b84:	08007ba1 	.word	0x08007ba1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b8c:	e030      	b.n	8007bf0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d025      	beq.n	8007be6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b9e:	e022      	b.n	8007be6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ba8:	d11f      	bne.n	8007bea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007bae:	e01c      	b.n	8007bea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d903      	bls.n	8007bbe <DMA_CheckFifoParam+0xb6>
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d003      	beq.n	8007bc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007bbc:	e018      	b.n	8007bf0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc2:	e015      	b.n	8007bf0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00e      	beq.n	8007bee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd4:	e00b      	b.n	8007bee <DMA_CheckFifoParam+0xe6>
      break;
 8007bd6:	bf00      	nop
 8007bd8:	e00a      	b.n	8007bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8007bda:	bf00      	nop
 8007bdc:	e008      	b.n	8007bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8007bde:	bf00      	nop
 8007be0:	e006      	b.n	8007bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8007be2:	bf00      	nop
 8007be4:	e004      	b.n	8007bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8007be6:	bf00      	nop
 8007be8:	e002      	b.n	8007bf0 <DMA_CheckFifoParam+0xe8>
      break;   
 8007bea:	bf00      	nop
 8007bec:	e000      	b.n	8007bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8007bee:	bf00      	nop
    }
  } 
  
  return status; 
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop

08007c00 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e039      	b.n	8007c86 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d106      	bne.n	8007c2c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7f9 fa96 	bl	8001158 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2202      	movs	r2, #2
 8007c30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c50:	f023 0107 	bic.w	r1, r3, #7
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	689a      	ldr	r2, [r3, #8]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c66:	4b0a      	ldr	r3, [pc, #40]	; (8007c90 <HAL_DMA2D_Init+0x90>)
 8007c68:	4013      	ands	r3, r2
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	68d1      	ldr	r1, [r2, #12]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6812      	ldr	r2, [r2, #0]
 8007c72:	430b      	orrs	r3, r1
 8007c74:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	ffffc000 	.word	0xffffc000

08007c94 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af02      	add	r7, sp, #8
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_DMA2D_Start+0x1c>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e018      	b.n	8007ce2 <HAL_DMA2D_Start+0x4e>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	68b9      	ldr	r1, [r7, #8]
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 f988 	bl	8007fe0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0201 	orr.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b086      	sub	sp, #24
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d056      	beq.n	8007db4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d06:	f7fe fe3b 	bl	8006980 <HAL_GetTick>
 8007d0a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007d0c:	e04b      	b.n	8007da6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d023      	beq.n	8007d68 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d005      	beq.n	8007d36 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2e:	f043 0202 	orr.w	r2, r3, #2
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d005      	beq.n	8007d4c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d44:	f043 0201 	orr.w	r2, r3, #1
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2221      	movs	r2, #33	; 0x21
 8007d52:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2204      	movs	r2, #4
 8007d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e0a5      	b.n	8007eb4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6e:	d01a      	beq.n	8007da6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d70:	f7fe fe06 	bl	8006980 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d302      	bcc.n	8007d86 <HAL_DMA2D_PollForTransfer+0x9c>
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10f      	bne.n	8007da6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8a:	f043 0220 	orr.w	r2, r3, #32
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2203      	movs	r2, #3
 8007d96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e086      	b.n	8007eb4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0ac      	beq.n	8007d0e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc6:	f003 0320 	and.w	r3, r3, #32
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d061      	beq.n	8007e9a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007dd6:	f7fe fdd3 	bl	8006980 <HAL_GetTick>
 8007dda:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007ddc:	e056      	b.n	8007e8c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d02e      	beq.n	8007e4e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f003 0308 	and.w	r3, r3, #8
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d005      	beq.n	8007e06 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dfe:	f043 0204 	orr.w	r2, r3, #4
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f003 0320 	and.w	r3, r3, #32
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d005      	beq.n	8007e1c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e14:	f043 0202 	orr.w	r2, r3, #2
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d005      	beq.n	8007e32 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e2a:	f043 0201 	orr.w	r2, r3, #1
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2229      	movs	r2, #41	; 0x29
 8007e38:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2204      	movs	r2, #4
 8007e3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e032      	b.n	8007eb4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e54:	d01a      	beq.n	8007e8c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007e56:	f7fe fd93 	bl	8006980 <HAL_GetTick>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d302      	bcc.n	8007e6c <HAL_DMA2D_PollForTransfer+0x182>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10f      	bne.n	8007e8c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e70:	f043 0220 	orr.w	r2, r3, #32
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2203      	movs	r2, #3
 8007e7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e013      	b.n	8007eb4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f003 0310 	and.w	r3, r3, #16
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0a1      	beq.n	8007dde <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2212      	movs	r2, #18
 8007ea0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d101      	bne.n	8007edc <HAL_DMA2D_ConfigLayer+0x20>
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e079      	b.n	8007fd0 <HAL_DMA2D_ConfigLayer+0x114>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	011b      	lsls	r3, r3, #4
 8007ef0:	3318      	adds	r3, #24
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	041b      	lsls	r3, r3, #16
 8007f02:	4313      	orrs	r3, r2
 8007f04:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007f06:	4b35      	ldr	r3, [pc, #212]	; (8007fdc <HAL_DMA2D_ConfigLayer+0x120>)
 8007f08:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	2b0a      	cmp	r3, #10
 8007f10:	d003      	beq.n	8007f1a <HAL_DMA2D_ConfigLayer+0x5e>
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	2b09      	cmp	r3, #9
 8007f18:	d107      	bne.n	8007f2a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	e005      	b.n	8007f36 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	061b      	lsls	r3, r3, #24
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d120      	bne.n	8007f7e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	43db      	mvns	r3, r3
 8007f46:	ea02 0103 	and.w	r1, r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	693a      	ldr	r2, [r7, #16]
 8007f5a:	6812      	ldr	r2, [r2, #0]
 8007f5c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	2b0a      	cmp	r3, #10
 8007f64:	d003      	beq.n	8007f6e <HAL_DMA2D_ConfigLayer+0xb2>
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	2b09      	cmp	r3, #9
 8007f6c:	d127      	bne.n	8007fbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	68da      	ldr	r2, [r3, #12]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8007f7c:	e01f      	b.n	8007fbe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	69da      	ldr	r2, [r3, #28]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	43db      	mvns	r3, r3
 8007f88:	ea02 0103 	and.w	r1, r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	6812      	ldr	r2, [r2, #0]
 8007f9e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	2b0a      	cmp	r3, #10
 8007fa6:	d003      	beq.n	8007fb0 <HAL_DMA2D_ConfigLayer+0xf4>
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	2b09      	cmp	r3, #9
 8007fae:	d106      	bne.n	8007fbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	68da      	ldr	r2, [r3, #12]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007fbc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	371c      	adds	r7, #28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	ff03000f 	.word	0xff03000f

08007fe0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b08b      	sub	sp, #44	; 0x2c
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	041a      	lsls	r2, r3, #16
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	431a      	orrs	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	430a      	orrs	r2, r1
 8008006:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008018:	d174      	bne.n	8008104 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008020:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008028:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008030:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	b2db      	uxtb	r3, r3
 8008036:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d108      	bne.n	8008052 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	431a      	orrs	r2, r3
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	4313      	orrs	r3, r2
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	4313      	orrs	r3, r2
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
 8008050:	e053      	b.n	80080fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d106      	bne.n	8008068 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	4313      	orrs	r3, r2
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	4313      	orrs	r3, r2
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
 8008066:	e048      	b.n	80080fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	2b02      	cmp	r3, #2
 800806e:	d111      	bne.n	8008094 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	0cdb      	lsrs	r3, r3, #19
 8008074:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	0a9b      	lsrs	r3, r3, #10
 800807a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	08db      	lsrs	r3, r3, #3
 8008080:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	02db      	lsls	r3, r3, #11
 800808a:	4313      	orrs	r3, r2
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	4313      	orrs	r3, r2
 8008090:	627b      	str	r3, [r7, #36]	; 0x24
 8008092:	e032      	b.n	80080fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	2b03      	cmp	r3, #3
 800809a:	d117      	bne.n	80080cc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	0fdb      	lsrs	r3, r3, #31
 80080a0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	0cdb      	lsrs	r3, r3, #19
 80080a6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	0adb      	lsrs	r3, r3, #11
 80080ac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	08db      	lsrs	r3, r3, #3
 80080b2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	029b      	lsls	r3, r3, #10
 80080bc:	431a      	orrs	r2, r3
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	03db      	lsls	r3, r3, #15
 80080c2:	4313      	orrs	r3, r2
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	627b      	str	r3, [r7, #36]	; 0x24
 80080ca:	e016      	b.n	80080fa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80080cc:	6a3b      	ldr	r3, [r7, #32]
 80080ce:	0f1b      	lsrs	r3, r3, #28
 80080d0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	0d1b      	lsrs	r3, r3, #20
 80080d6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	0b1b      	lsrs	r3, r3, #12
 80080dc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	091b      	lsrs	r3, r3, #4
 80080e2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	011a      	lsls	r2, r3, #4
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	021b      	lsls	r3, r3, #8
 80080ec:	431a      	orrs	r2, r3
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	031b      	lsls	r3, r3, #12
 80080f2:	4313      	orrs	r3, r2
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008100:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008102:	e003      	b.n	800810c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	60da      	str	r2, [r3, #12]
}
 800810c:	bf00      	nop
 800810e:	372c      	adds	r7, #44	; 0x2c
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008118:	b480      	push	{r7}
 800811a:	b089      	sub	sp, #36	; 0x24
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008122:	2300      	movs	r3, #0
 8008124:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008126:	2300      	movs	r3, #0
 8008128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800812a:	2300      	movs	r3, #0
 800812c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800812e:	2300      	movs	r3, #0
 8008130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008132:	2300      	movs	r3, #0
 8008134:	61fb      	str	r3, [r7, #28]
 8008136:	e175      	b.n	8008424 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008138:	2201      	movs	r2, #1
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	fa02 f303 	lsl.w	r3, r2, r3
 8008140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	4013      	ands	r3, r2
 800814a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	429a      	cmp	r2, r3
 8008152:	f040 8164 	bne.w	800841e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	2b01      	cmp	r3, #1
 8008160:	d005      	beq.n	800816e <HAL_GPIO_Init+0x56>
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f003 0303 	and.w	r3, r3, #3
 800816a:	2b02      	cmp	r3, #2
 800816c:	d130      	bne.n	80081d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	005b      	lsls	r3, r3, #1
 8008178:	2203      	movs	r2, #3
 800817a:	fa02 f303 	lsl.w	r3, r2, r3
 800817e:	43db      	mvns	r3, r3
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	4013      	ands	r3, r2
 8008184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	005b      	lsls	r3, r3, #1
 800818e:	fa02 f303 	lsl.w	r3, r2, r3
 8008192:	69ba      	ldr	r2, [r7, #24]
 8008194:	4313      	orrs	r3, r2
 8008196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	69ba      	ldr	r2, [r7, #24]
 800819c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80081a4:	2201      	movs	r2, #1
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ac:	43db      	mvns	r3, r3
 80081ae:	69ba      	ldr	r2, [r7, #24]
 80081b0:	4013      	ands	r3, r2
 80081b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	091b      	lsrs	r3, r3, #4
 80081ba:	f003 0201 	and.w	r2, r3, #1
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	fa02 f303 	lsl.w	r3, r2, r3
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	69ba      	ldr	r2, [r7, #24]
 80081ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f003 0303 	and.w	r3, r3, #3
 80081d8:	2b03      	cmp	r3, #3
 80081da:	d017      	beq.n	800820c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	005b      	lsls	r3, r3, #1
 80081e6:	2203      	movs	r2, #3
 80081e8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ec:	43db      	mvns	r3, r3
 80081ee:	69ba      	ldr	r2, [r7, #24]
 80081f0:	4013      	ands	r3, r2
 80081f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	689a      	ldr	r2, [r3, #8]
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	005b      	lsls	r3, r3, #1
 80081fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	4313      	orrs	r3, r2
 8008204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	69ba      	ldr	r2, [r7, #24]
 800820a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f003 0303 	and.w	r3, r3, #3
 8008214:	2b02      	cmp	r3, #2
 8008216:	d123      	bne.n	8008260 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	08da      	lsrs	r2, r3, #3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3208      	adds	r2, #8
 8008220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	f003 0307 	and.w	r3, r3, #7
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	220f      	movs	r2, #15
 8008230:	fa02 f303 	lsl.w	r3, r2, r3
 8008234:	43db      	mvns	r3, r3
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	4013      	ands	r3, r2
 800823a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	691a      	ldr	r2, [r3, #16]
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	fa02 f303 	lsl.w	r3, r2, r3
 800824c:	69ba      	ldr	r2, [r7, #24]
 800824e:	4313      	orrs	r3, r2
 8008250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	08da      	lsrs	r2, r3, #3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	3208      	adds	r2, #8
 800825a:	69b9      	ldr	r1, [r7, #24]
 800825c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	2203      	movs	r2, #3
 800826c:	fa02 f303 	lsl.w	r3, r2, r3
 8008270:	43db      	mvns	r3, r3
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	4013      	ands	r3, r2
 8008276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	f003 0203 	and.w	r2, r3, #3
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	fa02 f303 	lsl.w	r3, r2, r3
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	4313      	orrs	r3, r2
 800828c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	69ba      	ldr	r2, [r7, #24]
 8008292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 80be 	beq.w	800841e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082a2:	4b66      	ldr	r3, [pc, #408]	; (800843c <HAL_GPIO_Init+0x324>)
 80082a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a6:	4a65      	ldr	r2, [pc, #404]	; (800843c <HAL_GPIO_Init+0x324>)
 80082a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082ac:	6453      	str	r3, [r2, #68]	; 0x44
 80082ae:	4b63      	ldr	r3, [pc, #396]	; (800843c <HAL_GPIO_Init+0x324>)
 80082b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082b6:	60fb      	str	r3, [r7, #12]
 80082b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80082ba:	4a61      	ldr	r2, [pc, #388]	; (8008440 <HAL_GPIO_Init+0x328>)
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	089b      	lsrs	r3, r3, #2
 80082c0:	3302      	adds	r3, #2
 80082c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	f003 0303 	and.w	r3, r3, #3
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	220f      	movs	r2, #15
 80082d2:	fa02 f303 	lsl.w	r3, r2, r3
 80082d6:	43db      	mvns	r3, r3
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	4013      	ands	r3, r2
 80082dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a58      	ldr	r2, [pc, #352]	; (8008444 <HAL_GPIO_Init+0x32c>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d037      	beq.n	8008356 <HAL_GPIO_Init+0x23e>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a57      	ldr	r2, [pc, #348]	; (8008448 <HAL_GPIO_Init+0x330>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d031      	beq.n	8008352 <HAL_GPIO_Init+0x23a>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a56      	ldr	r2, [pc, #344]	; (800844c <HAL_GPIO_Init+0x334>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d02b      	beq.n	800834e <HAL_GPIO_Init+0x236>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a55      	ldr	r2, [pc, #340]	; (8008450 <HAL_GPIO_Init+0x338>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d025      	beq.n	800834a <HAL_GPIO_Init+0x232>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a54      	ldr	r2, [pc, #336]	; (8008454 <HAL_GPIO_Init+0x33c>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d01f      	beq.n	8008346 <HAL_GPIO_Init+0x22e>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a53      	ldr	r2, [pc, #332]	; (8008458 <HAL_GPIO_Init+0x340>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d019      	beq.n	8008342 <HAL_GPIO_Init+0x22a>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a52      	ldr	r2, [pc, #328]	; (800845c <HAL_GPIO_Init+0x344>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d013      	beq.n	800833e <HAL_GPIO_Init+0x226>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a51      	ldr	r2, [pc, #324]	; (8008460 <HAL_GPIO_Init+0x348>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d00d      	beq.n	800833a <HAL_GPIO_Init+0x222>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a50      	ldr	r2, [pc, #320]	; (8008464 <HAL_GPIO_Init+0x34c>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d007      	beq.n	8008336 <HAL_GPIO_Init+0x21e>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a4f      	ldr	r2, [pc, #316]	; (8008468 <HAL_GPIO_Init+0x350>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d101      	bne.n	8008332 <HAL_GPIO_Init+0x21a>
 800832e:	2309      	movs	r3, #9
 8008330:	e012      	b.n	8008358 <HAL_GPIO_Init+0x240>
 8008332:	230a      	movs	r3, #10
 8008334:	e010      	b.n	8008358 <HAL_GPIO_Init+0x240>
 8008336:	2308      	movs	r3, #8
 8008338:	e00e      	b.n	8008358 <HAL_GPIO_Init+0x240>
 800833a:	2307      	movs	r3, #7
 800833c:	e00c      	b.n	8008358 <HAL_GPIO_Init+0x240>
 800833e:	2306      	movs	r3, #6
 8008340:	e00a      	b.n	8008358 <HAL_GPIO_Init+0x240>
 8008342:	2305      	movs	r3, #5
 8008344:	e008      	b.n	8008358 <HAL_GPIO_Init+0x240>
 8008346:	2304      	movs	r3, #4
 8008348:	e006      	b.n	8008358 <HAL_GPIO_Init+0x240>
 800834a:	2303      	movs	r3, #3
 800834c:	e004      	b.n	8008358 <HAL_GPIO_Init+0x240>
 800834e:	2302      	movs	r3, #2
 8008350:	e002      	b.n	8008358 <HAL_GPIO_Init+0x240>
 8008352:	2301      	movs	r3, #1
 8008354:	e000      	b.n	8008358 <HAL_GPIO_Init+0x240>
 8008356:	2300      	movs	r3, #0
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	f002 0203 	and.w	r2, r2, #3
 800835e:	0092      	lsls	r2, r2, #2
 8008360:	4093      	lsls	r3, r2
 8008362:	69ba      	ldr	r2, [r7, #24]
 8008364:	4313      	orrs	r3, r2
 8008366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008368:	4935      	ldr	r1, [pc, #212]	; (8008440 <HAL_GPIO_Init+0x328>)
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	089b      	lsrs	r3, r3, #2
 800836e:	3302      	adds	r3, #2
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008376:	4b3d      	ldr	r3, [pc, #244]	; (800846c <HAL_GPIO_Init+0x354>)
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	43db      	mvns	r3, r3
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	4013      	ands	r3, r2
 8008384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008392:	69ba      	ldr	r2, [r7, #24]
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	4313      	orrs	r3, r2
 8008398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800839a:	4a34      	ldr	r2, [pc, #208]	; (800846c <HAL_GPIO_Init+0x354>)
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80083a0:	4b32      	ldr	r3, [pc, #200]	; (800846c <HAL_GPIO_Init+0x354>)
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	43db      	mvns	r3, r3
 80083aa:	69ba      	ldr	r2, [r7, #24]
 80083ac:	4013      	ands	r3, r2
 80083ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d003      	beq.n	80083c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80083bc:	69ba      	ldr	r2, [r7, #24]
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80083c4:	4a29      	ldr	r2, [pc, #164]	; (800846c <HAL_GPIO_Init+0x354>)
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80083ca:	4b28      	ldr	r3, [pc, #160]	; (800846c <HAL_GPIO_Init+0x354>)
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	43db      	mvns	r3, r3
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	4013      	ands	r3, r2
 80083d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80083e6:	69ba      	ldr	r2, [r7, #24]
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80083ee:	4a1f      	ldr	r2, [pc, #124]	; (800846c <HAL_GPIO_Init+0x354>)
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80083f4:	4b1d      	ldr	r3, [pc, #116]	; (800846c <HAL_GPIO_Init+0x354>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	43db      	mvns	r3, r3
 80083fe:	69ba      	ldr	r2, [r7, #24]
 8008400:	4013      	ands	r3, r2
 8008402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d003      	beq.n	8008418 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	4313      	orrs	r3, r2
 8008416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008418:	4a14      	ldr	r2, [pc, #80]	; (800846c <HAL_GPIO_Init+0x354>)
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	3301      	adds	r3, #1
 8008422:	61fb      	str	r3, [r7, #28]
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	2b0f      	cmp	r3, #15
 8008428:	f67f ae86 	bls.w	8008138 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800842c:	bf00      	nop
 800842e:	bf00      	nop
 8008430:	3724      	adds	r7, #36	; 0x24
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	40023800 	.word	0x40023800
 8008440:	40013800 	.word	0x40013800
 8008444:	40020000 	.word	0x40020000
 8008448:	40020400 	.word	0x40020400
 800844c:	40020800 	.word	0x40020800
 8008450:	40020c00 	.word	0x40020c00
 8008454:	40021000 	.word	0x40021000
 8008458:	40021400 	.word	0x40021400
 800845c:	40021800 	.word	0x40021800
 8008460:	40021c00 	.word	0x40021c00
 8008464:	40022000 	.word	0x40022000
 8008468:	40022400 	.word	0x40022400
 800846c:	40013c00 	.word	0x40013c00

08008470 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008470:	b480      	push	{r7}
 8008472:	b087      	sub	sp, #28
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800847a:	2300      	movs	r3, #0
 800847c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800847e:	2300      	movs	r3, #0
 8008480:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8008482:	2300      	movs	r3, #0
 8008484:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008486:	2300      	movs	r3, #0
 8008488:	617b      	str	r3, [r7, #20]
 800848a:	e0d9      	b.n	8008640 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800848c:	2201      	movs	r2, #1
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	fa02 f303 	lsl.w	r3, r2, r3
 8008494:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	4013      	ands	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	f040 80c9 	bne.w	800863a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80084a8:	4a6b      	ldr	r2, [pc, #428]	; (8008658 <HAL_GPIO_DeInit+0x1e8>)
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	089b      	lsrs	r3, r3, #2
 80084ae:	3302      	adds	r3, #2
 80084b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084b4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f003 0303 	and.w	r3, r3, #3
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	220f      	movs	r2, #15
 80084c0:	fa02 f303 	lsl.w	r3, r2, r3
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	4013      	ands	r3, r2
 80084c8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a63      	ldr	r2, [pc, #396]	; (800865c <HAL_GPIO_DeInit+0x1ec>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d037      	beq.n	8008542 <HAL_GPIO_DeInit+0xd2>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a62      	ldr	r2, [pc, #392]	; (8008660 <HAL_GPIO_DeInit+0x1f0>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d031      	beq.n	800853e <HAL_GPIO_DeInit+0xce>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a61      	ldr	r2, [pc, #388]	; (8008664 <HAL_GPIO_DeInit+0x1f4>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d02b      	beq.n	800853a <HAL_GPIO_DeInit+0xca>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a60      	ldr	r2, [pc, #384]	; (8008668 <HAL_GPIO_DeInit+0x1f8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d025      	beq.n	8008536 <HAL_GPIO_DeInit+0xc6>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a5f      	ldr	r2, [pc, #380]	; (800866c <HAL_GPIO_DeInit+0x1fc>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d01f      	beq.n	8008532 <HAL_GPIO_DeInit+0xc2>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a5e      	ldr	r2, [pc, #376]	; (8008670 <HAL_GPIO_DeInit+0x200>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d019      	beq.n	800852e <HAL_GPIO_DeInit+0xbe>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a5d      	ldr	r2, [pc, #372]	; (8008674 <HAL_GPIO_DeInit+0x204>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d013      	beq.n	800852a <HAL_GPIO_DeInit+0xba>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a5c      	ldr	r2, [pc, #368]	; (8008678 <HAL_GPIO_DeInit+0x208>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d00d      	beq.n	8008526 <HAL_GPIO_DeInit+0xb6>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a5b      	ldr	r2, [pc, #364]	; (800867c <HAL_GPIO_DeInit+0x20c>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d007      	beq.n	8008522 <HAL_GPIO_DeInit+0xb2>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a5a      	ldr	r2, [pc, #360]	; (8008680 <HAL_GPIO_DeInit+0x210>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d101      	bne.n	800851e <HAL_GPIO_DeInit+0xae>
 800851a:	2309      	movs	r3, #9
 800851c:	e012      	b.n	8008544 <HAL_GPIO_DeInit+0xd4>
 800851e:	230a      	movs	r3, #10
 8008520:	e010      	b.n	8008544 <HAL_GPIO_DeInit+0xd4>
 8008522:	2308      	movs	r3, #8
 8008524:	e00e      	b.n	8008544 <HAL_GPIO_DeInit+0xd4>
 8008526:	2307      	movs	r3, #7
 8008528:	e00c      	b.n	8008544 <HAL_GPIO_DeInit+0xd4>
 800852a:	2306      	movs	r3, #6
 800852c:	e00a      	b.n	8008544 <HAL_GPIO_DeInit+0xd4>
 800852e:	2305      	movs	r3, #5
 8008530:	e008      	b.n	8008544 <HAL_GPIO_DeInit+0xd4>
 8008532:	2304      	movs	r3, #4
 8008534:	e006      	b.n	8008544 <HAL_GPIO_DeInit+0xd4>
 8008536:	2303      	movs	r3, #3
 8008538:	e004      	b.n	8008544 <HAL_GPIO_DeInit+0xd4>
 800853a:	2302      	movs	r3, #2
 800853c:	e002      	b.n	8008544 <HAL_GPIO_DeInit+0xd4>
 800853e:	2301      	movs	r3, #1
 8008540:	e000      	b.n	8008544 <HAL_GPIO_DeInit+0xd4>
 8008542:	2300      	movs	r3, #0
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	f002 0203 	and.w	r2, r2, #3
 800854a:	0092      	lsls	r2, r2, #2
 800854c:	4093      	lsls	r3, r2
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	429a      	cmp	r2, r3
 8008552:	d132      	bne.n	80085ba <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008554:	4b4b      	ldr	r3, [pc, #300]	; (8008684 <HAL_GPIO_DeInit+0x214>)
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	43db      	mvns	r3, r3
 800855c:	4949      	ldr	r1, [pc, #292]	; (8008684 <HAL_GPIO_DeInit+0x214>)
 800855e:	4013      	ands	r3, r2
 8008560:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008562:	4b48      	ldr	r3, [pc, #288]	; (8008684 <HAL_GPIO_DeInit+0x214>)
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	43db      	mvns	r3, r3
 800856a:	4946      	ldr	r1, [pc, #280]	; (8008684 <HAL_GPIO_DeInit+0x214>)
 800856c:	4013      	ands	r3, r2
 800856e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008570:	4b44      	ldr	r3, [pc, #272]	; (8008684 <HAL_GPIO_DeInit+0x214>)
 8008572:	68da      	ldr	r2, [r3, #12]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	43db      	mvns	r3, r3
 8008578:	4942      	ldr	r1, [pc, #264]	; (8008684 <HAL_GPIO_DeInit+0x214>)
 800857a:	4013      	ands	r3, r2
 800857c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800857e:	4b41      	ldr	r3, [pc, #260]	; (8008684 <HAL_GPIO_DeInit+0x214>)
 8008580:	689a      	ldr	r2, [r3, #8]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	43db      	mvns	r3, r3
 8008586:	493f      	ldr	r1, [pc, #252]	; (8008684 <HAL_GPIO_DeInit+0x214>)
 8008588:	4013      	ands	r3, r2
 800858a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f003 0303 	and.w	r3, r3, #3
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	220f      	movs	r2, #15
 8008596:	fa02 f303 	lsl.w	r3, r2, r3
 800859a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800859c:	4a2e      	ldr	r2, [pc, #184]	; (8008658 <HAL_GPIO_DeInit+0x1e8>)
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	089b      	lsrs	r3, r3, #2
 80085a2:	3302      	adds	r3, #2
 80085a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	43da      	mvns	r2, r3
 80085ac:	482a      	ldr	r0, [pc, #168]	; (8008658 <HAL_GPIO_DeInit+0x1e8>)
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	089b      	lsrs	r3, r3, #2
 80085b2:	400a      	ands	r2, r1
 80085b4:	3302      	adds	r3, #2
 80085b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	005b      	lsls	r3, r3, #1
 80085c2:	2103      	movs	r1, #3
 80085c4:	fa01 f303 	lsl.w	r3, r1, r3
 80085c8:	43db      	mvns	r3, r3
 80085ca:	401a      	ands	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	08da      	lsrs	r2, r3, #3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	3208      	adds	r2, #8
 80085d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	f003 0307 	and.w	r3, r3, #7
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	220f      	movs	r2, #15
 80085e6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ea:	43db      	mvns	r3, r3
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	08d2      	lsrs	r2, r2, #3
 80085f0:	4019      	ands	r1, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3208      	adds	r2, #8
 80085f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68da      	ldr	r2, [r3, #12]
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	2103      	movs	r1, #3
 8008604:	fa01 f303 	lsl.w	r3, r1, r3
 8008608:	43db      	mvns	r3, r3
 800860a:	401a      	ands	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	2101      	movs	r1, #1
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	fa01 f303 	lsl.w	r3, r1, r3
 800861c:	43db      	mvns	r3, r3
 800861e:	401a      	ands	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	005b      	lsls	r3, r3, #1
 800862c:	2103      	movs	r1, #3
 800862e:	fa01 f303 	lsl.w	r3, r1, r3
 8008632:	43db      	mvns	r3, r3
 8008634:	401a      	ands	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	3301      	adds	r3, #1
 800863e:	617b      	str	r3, [r7, #20]
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	2b0f      	cmp	r3, #15
 8008644:	f67f af22 	bls.w	800848c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008648:	bf00      	nop
 800864a:	bf00      	nop
 800864c:	371c      	adds	r7, #28
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	40013800 	.word	0x40013800
 800865c:	40020000 	.word	0x40020000
 8008660:	40020400 	.word	0x40020400
 8008664:	40020800 	.word	0x40020800
 8008668:	40020c00 	.word	0x40020c00
 800866c:	40021000 	.word	0x40021000
 8008670:	40021400 	.word	0x40021400
 8008674:	40021800 	.word	0x40021800
 8008678:	40021c00 	.word	0x40021c00
 800867c:	40022000 	.word	0x40022000
 8008680:	40022400 	.word	0x40022400
 8008684:	40013c00 	.word	0x40013c00

08008688 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	691a      	ldr	r2, [r3, #16]
 8008698:	887b      	ldrh	r3, [r7, #2]
 800869a:	4013      	ands	r3, r2
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80086a0:	2301      	movs	r3, #1
 80086a2:	73fb      	strb	r3, [r7, #15]
 80086a4:	e001      	b.n	80086aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80086a6:	2300      	movs	r3, #0
 80086a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	460b      	mov	r3, r1
 80086c2:	807b      	strh	r3, [r7, #2]
 80086c4:	4613      	mov	r3, r2
 80086c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80086c8:	787b      	ldrb	r3, [r7, #1]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086ce:	887a      	ldrh	r2, [r7, #2]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80086d4:	e003      	b.n	80086de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80086d6:	887b      	ldrh	r3, [r7, #2]
 80086d8:	041a      	lsls	r2, r3, #16
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	619a      	str	r2, [r3, #24]
}
 80086de:	bf00      	nop
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b085      	sub	sp, #20
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80086fc:	887a      	ldrh	r2, [r7, #2]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4013      	ands	r3, r2
 8008702:	041a      	lsls	r2, r3, #16
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	43d9      	mvns	r1, r3
 8008708:	887b      	ldrh	r3, [r7, #2]
 800870a:	400b      	ands	r3, r1
 800870c:	431a      	orrs	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	619a      	str	r2, [r3, #24]
}
 8008712:	bf00      	nop
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
	...

08008720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800872a:	4b08      	ldr	r3, [pc, #32]	; (800874c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800872c:	695a      	ldr	r2, [r3, #20]
 800872e:	88fb      	ldrh	r3, [r7, #6]
 8008730:	4013      	ands	r3, r2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d006      	beq.n	8008744 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008736:	4a05      	ldr	r2, [pc, #20]	; (800874c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008738:	88fb      	ldrh	r3, [r7, #6]
 800873a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800873c:	88fb      	ldrh	r3, [r7, #6]
 800873e:	4618      	mov	r0, r3
 8008740:	f7fa fd98 	bl	8003274 <HAL_GPIO_EXTI_Callback>
  }
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	40013c00 	.word	0x40013c00

08008750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d101      	bne.n	8008762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e07f      	b.n	8008862 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	d106      	bne.n	800877c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7f8 ffaa 	bl	80016d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2224      	movs	r2, #36	; 0x24
 8008780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f022 0201 	bic.w	r2, r2, #1
 8008792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80087a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	689a      	ldr	r2, [r3, #8]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80087b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d107      	bne.n	80087ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	689a      	ldr	r2, [r3, #8]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087c6:	609a      	str	r2, [r3, #8]
 80087c8:	e006      	b.n	80087d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	689a      	ldr	r2, [r3, #8]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80087d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d104      	bne.n	80087ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	6859      	ldr	r1, [r3, #4]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	4b1d      	ldr	r3, [pc, #116]	; (800886c <HAL_I2C_Init+0x11c>)
 80087f6:	430b      	orrs	r3, r1
 80087f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68da      	ldr	r2, [r3, #12]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008808:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	691a      	ldr	r2, [r3, #16]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	430a      	orrs	r2, r1
 8008822:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	69d9      	ldr	r1, [r3, #28]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a1a      	ldr	r2, [r3, #32]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	430a      	orrs	r2, r1
 8008832:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f042 0201 	orr.w	r2, r2, #1
 8008842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2220      	movs	r2, #32
 800884e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	02008000 	.word	0x02008000

08008870 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e021      	b.n	80088c6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2224      	movs	r2, #36	; 0x24
 8008886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f022 0201 	bic.w	r2, r2, #1
 8008898:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7f8 ff78 	bl	8001790 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
	...

080088d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b088      	sub	sp, #32
 80088d4:	af02      	add	r7, sp, #8
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	4608      	mov	r0, r1
 80088da:	4611      	mov	r1, r2
 80088dc:	461a      	mov	r2, r3
 80088de:	4603      	mov	r3, r0
 80088e0:	817b      	strh	r3, [r7, #10]
 80088e2:	460b      	mov	r3, r1
 80088e4:	813b      	strh	r3, [r7, #8]
 80088e6:	4613      	mov	r3, r2
 80088e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b20      	cmp	r3, #32
 80088f4:	f040 80f9 	bne.w	8008aea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088f8:	6a3b      	ldr	r3, [r7, #32]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d002      	beq.n	8008904 <HAL_I2C_Mem_Write+0x34>
 80088fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008900:	2b00      	cmp	r3, #0
 8008902:	d105      	bne.n	8008910 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800890a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e0ed      	b.n	8008aec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008916:	2b01      	cmp	r3, #1
 8008918:	d101      	bne.n	800891e <HAL_I2C_Mem_Write+0x4e>
 800891a:	2302      	movs	r3, #2
 800891c:	e0e6      	b.n	8008aec <HAL_I2C_Mem_Write+0x21c>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008926:	f7fe f82b 	bl	8006980 <HAL_GetTick>
 800892a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	2319      	movs	r3, #25
 8008932:	2201      	movs	r2, #1
 8008934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 fad1 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e0d1      	b.n	8008aec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2221      	movs	r2, #33	; 0x21
 800894c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2240      	movs	r2, #64	; 0x40
 8008954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6a3a      	ldr	r2, [r7, #32]
 8008962:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008968:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008970:	88f8      	ldrh	r0, [r7, #6]
 8008972:	893a      	ldrh	r2, [r7, #8]
 8008974:	8979      	ldrh	r1, [r7, #10]
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	9301      	str	r3, [sp, #4]
 800897a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	4603      	mov	r3, r0
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f9e1 	bl	8008d48 <I2C_RequestMemoryWrite>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d005      	beq.n	8008998 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e0a9      	b.n	8008aec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800899c:	b29b      	uxth	r3, r3
 800899e:	2bff      	cmp	r3, #255	; 0xff
 80089a0:	d90e      	bls.n	80089c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	22ff      	movs	r2, #255	; 0xff
 80089a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	8979      	ldrh	r1, [r7, #10]
 80089b0:	2300      	movs	r3, #0
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 fc2d 	bl	8009218 <I2C_TransferConfig>
 80089be:	e00f      	b.n	80089e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	8979      	ldrh	r1, [r7, #10]
 80089d2:	2300      	movs	r3, #0
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f000 fc1c 	bl	8009218 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f000 fabb 	bl	8008f60 <I2C_WaitOnTXISFlagUntilTimeout>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e07b      	b.n	8008aec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	781a      	ldrb	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a04:	1c5a      	adds	r2, r3, #1
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	3b01      	subs	r3, #1
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d034      	beq.n	8008a98 <HAL_I2C_Mem_Write+0x1c8>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d130      	bne.n	8008a98 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2180      	movs	r1, #128	; 0x80
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 fa4d 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e04d      	b.n	8008aec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	2bff      	cmp	r3, #255	; 0xff
 8008a58:	d90e      	bls.n	8008a78 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	22ff      	movs	r2, #255	; 0xff
 8008a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	8979      	ldrh	r1, [r7, #10]
 8008a68:	2300      	movs	r3, #0
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 fbd1 	bl	8009218 <I2C_TransferConfig>
 8008a76:	e00f      	b.n	8008a98 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a86:	b2da      	uxtb	r2, r3
 8008a88:	8979      	ldrh	r1, [r7, #10]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f000 fbc0 	bl	8009218 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d19e      	bne.n	80089e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f000 fa9a 	bl	8008fe0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e01a      	b.n	8008aec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2220      	movs	r2, #32
 8008abc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6859      	ldr	r1, [r3, #4]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	4b0a      	ldr	r3, [pc, #40]	; (8008af4 <HAL_I2C_Mem_Write+0x224>)
 8008aca:	400b      	ands	r3, r1
 8008acc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	e000      	b.n	8008aec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008aea:	2302      	movs	r3, #2
  }
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	fe00e800 	.word	0xfe00e800

08008af8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b088      	sub	sp, #32
 8008afc:	af02      	add	r7, sp, #8
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	4608      	mov	r0, r1
 8008b02:	4611      	mov	r1, r2
 8008b04:	461a      	mov	r2, r3
 8008b06:	4603      	mov	r3, r0
 8008b08:	817b      	strh	r3, [r7, #10]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	813b      	strh	r3, [r7, #8]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b20      	cmp	r3, #32
 8008b1c:	f040 80fd 	bne.w	8008d1a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b20:	6a3b      	ldr	r3, [r7, #32]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <HAL_I2C_Mem_Read+0x34>
 8008b26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d105      	bne.n	8008b38 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e0f1      	b.n	8008d1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d101      	bne.n	8008b46 <HAL_I2C_Mem_Read+0x4e>
 8008b42:	2302      	movs	r3, #2
 8008b44:	e0ea      	b.n	8008d1c <HAL_I2C_Mem_Read+0x224>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b4e:	f7fd ff17 	bl	8006980 <HAL_GetTick>
 8008b52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	2319      	movs	r3, #25
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f000 f9bd 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d001      	beq.n	8008b70 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e0d5      	b.n	8008d1c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2222      	movs	r2, #34	; 0x22
 8008b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2240      	movs	r2, #64	; 0x40
 8008b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6a3a      	ldr	r2, [r7, #32]
 8008b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b98:	88f8      	ldrh	r0, [r7, #6]
 8008b9a:	893a      	ldrh	r2, [r7, #8]
 8008b9c:	8979      	ldrh	r1, [r7, #10]
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 f921 	bl	8008df0 <I2C_RequestMemoryRead>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d005      	beq.n	8008bc0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e0ad      	b.n	8008d1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	2bff      	cmp	r3, #255	; 0xff
 8008bc8:	d90e      	bls.n	8008be8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	22ff      	movs	r2, #255	; 0xff
 8008bce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	8979      	ldrh	r1, [r7, #10]
 8008bd8:	4b52      	ldr	r3, [pc, #328]	; (8008d24 <HAL_I2C_Mem_Read+0x22c>)
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 fb19 	bl	8009218 <I2C_TransferConfig>
 8008be6:	e00f      	b.n	8008c08 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	8979      	ldrh	r1, [r7, #10]
 8008bfa:	4b4a      	ldr	r3, [pc, #296]	; (8008d24 <HAL_I2C_Mem_Read+0x22c>)
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 fb08 	bl	8009218 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0e:	2200      	movs	r2, #0
 8008c10:	2104      	movs	r1, #4
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 f964 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e07c      	b.n	8008d1c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2c:	b2d2      	uxtb	r2, r2
 8008c2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c34:	1c5a      	adds	r2, r3, #1
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d034      	beq.n	8008cc8 <HAL_I2C_Mem_Read+0x1d0>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d130      	bne.n	8008cc8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2180      	movs	r1, #128	; 0x80
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 f935 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e04d      	b.n	8008d1c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	2bff      	cmp	r3, #255	; 0xff
 8008c88:	d90e      	bls.n	8008ca8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	22ff      	movs	r2, #255	; 0xff
 8008c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	8979      	ldrh	r1, [r7, #10]
 8008c98:	2300      	movs	r3, #0
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 fab9 	bl	8009218 <I2C_TransferConfig>
 8008ca6:	e00f      	b.n	8008cc8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	8979      	ldrh	r1, [r7, #10]
 8008cba:	2300      	movs	r3, #0
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f000 faa8 	bl	8009218 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d19a      	bne.n	8008c08 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 f982 	bl	8008fe0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e01a      	b.n	8008d1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2220      	movs	r2, #32
 8008cec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6859      	ldr	r1, [r3, #4]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	4b0b      	ldr	r3, [pc, #44]	; (8008d28 <HAL_I2C_Mem_Read+0x230>)
 8008cfa:	400b      	ands	r3, r1
 8008cfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2220      	movs	r2, #32
 8008d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	e000      	b.n	8008d1c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008d1a:	2302      	movs	r3, #2
  }
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3718      	adds	r7, #24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	80002400 	.word	0x80002400
 8008d28:	fe00e800 	.word	0xfe00e800

08008d2c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d3a:	b2db      	uxtb	r3, r3
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af02      	add	r7, sp, #8
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	4608      	mov	r0, r1
 8008d52:	4611      	mov	r1, r2
 8008d54:	461a      	mov	r2, r3
 8008d56:	4603      	mov	r3, r0
 8008d58:	817b      	strh	r3, [r7, #10]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	813b      	strh	r3, [r7, #8]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008d62:	88fb      	ldrh	r3, [r7, #6]
 8008d64:	b2da      	uxtb	r2, r3
 8008d66:	8979      	ldrh	r1, [r7, #10]
 8008d68:	4b20      	ldr	r3, [pc, #128]	; (8008dec <I2C_RequestMemoryWrite+0xa4>)
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f000 fa51 	bl	8009218 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d76:	69fa      	ldr	r2, [r7, #28]
 8008d78:	69b9      	ldr	r1, [r7, #24]
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 f8f0 	bl	8008f60 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e02c      	b.n	8008de4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d8a:	88fb      	ldrh	r3, [r7, #6]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d105      	bne.n	8008d9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d90:	893b      	ldrh	r3, [r7, #8]
 8008d92:	b2da      	uxtb	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	629a      	str	r2, [r3, #40]	; 0x28
 8008d9a:	e015      	b.n	8008dc8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d9c:	893b      	ldrh	r3, [r7, #8]
 8008d9e:	0a1b      	lsrs	r3, r3, #8
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008daa:	69fa      	ldr	r2, [r7, #28]
 8008dac:	69b9      	ldr	r1, [r7, #24]
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f000 f8d6 	bl	8008f60 <I2C_WaitOnTXISFlagUntilTimeout>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e012      	b.n	8008de4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008dbe:	893b      	ldrh	r3, [r7, #8]
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	2180      	movs	r1, #128	; 0x80
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 f884 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e000      	b.n	8008de4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	80002000 	.word	0x80002000

08008df0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af02      	add	r7, sp, #8
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	4608      	mov	r0, r1
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	4603      	mov	r3, r0
 8008e00:	817b      	strh	r3, [r7, #10]
 8008e02:	460b      	mov	r3, r1
 8008e04:	813b      	strh	r3, [r7, #8]
 8008e06:	4613      	mov	r3, r2
 8008e08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008e0a:	88fb      	ldrh	r3, [r7, #6]
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	8979      	ldrh	r1, [r7, #10]
 8008e10:	4b20      	ldr	r3, [pc, #128]	; (8008e94 <I2C_RequestMemoryRead+0xa4>)
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	2300      	movs	r3, #0
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f000 f9fe 	bl	8009218 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e1c:	69fa      	ldr	r2, [r7, #28]
 8008e1e:	69b9      	ldr	r1, [r7, #24]
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f000 f89d 	bl	8008f60 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d001      	beq.n	8008e30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e02c      	b.n	8008e8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e30:	88fb      	ldrh	r3, [r7, #6]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d105      	bne.n	8008e42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e36:	893b      	ldrh	r3, [r7, #8]
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8008e40:	e015      	b.n	8008e6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008e42:	893b      	ldrh	r3, [r7, #8]
 8008e44:	0a1b      	lsrs	r3, r3, #8
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e50:	69fa      	ldr	r2, [r7, #28]
 8008e52:	69b9      	ldr	r1, [r7, #24]
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f000 f883 	bl	8008f60 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e012      	b.n	8008e8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e64:	893b      	ldrh	r3, [r7, #8]
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	2200      	movs	r2, #0
 8008e76:	2140      	movs	r1, #64	; 0x40
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f000 f831 	bl	8008ee0 <I2C_WaitOnFlagUntilTimeout>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e000      	b.n	8008e8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	80002000 	.word	0x80002000

08008e98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d103      	bne.n	8008eb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	f003 0301 	and.w	r3, r3, #1
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d007      	beq.n	8008ed4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	699a      	ldr	r2, [r3, #24]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f042 0201 	orr.w	r2, r2, #1
 8008ed2:	619a      	str	r2, [r3, #24]
  }
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	603b      	str	r3, [r7, #0]
 8008eec:	4613      	mov	r3, r2
 8008eee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ef0:	e022      	b.n	8008f38 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef8:	d01e      	beq.n	8008f38 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008efa:	f7fd fd41 	bl	8006980 <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d302      	bcc.n	8008f10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d113      	bne.n	8008f38 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f14:	f043 0220 	orr.w	r2, r3, #32
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2220      	movs	r2, #32
 8008f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e00f      	b.n	8008f58 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	699a      	ldr	r2, [r3, #24]
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	4013      	ands	r3, r2
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	bf0c      	ite	eq
 8008f48:	2301      	moveq	r3, #1
 8008f4a:	2300      	movne	r3, #0
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	461a      	mov	r2, r3
 8008f50:	79fb      	ldrb	r3, [r7, #7]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d0cd      	beq.n	8008ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f6c:	e02c      	b.n	8008fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	68b9      	ldr	r1, [r7, #8]
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f000 f870 	bl	8009058 <I2C_IsErrorOccurred>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e02a      	b.n	8008fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f88:	d01e      	beq.n	8008fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f8a:	f7fd fcf9 	bl	8006980 <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d302      	bcc.n	8008fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d113      	bne.n	8008fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa4:	f043 0220 	orr.w	r2, r3, #32
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2220      	movs	r2, #32
 8008fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e007      	b.n	8008fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	f003 0302 	and.w	r3, r3, #2
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d1cb      	bne.n	8008f6e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fec:	e028      	b.n	8009040 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	68b9      	ldr	r1, [r7, #8]
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 f830 	bl	8009058 <I2C_IsErrorOccurred>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e026      	b.n	8009050 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009002:	f7fd fcbd 	bl	8006980 <HAL_GetTick>
 8009006:	4602      	mov	r2, r0
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	429a      	cmp	r2, r3
 8009010:	d302      	bcc.n	8009018 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d113      	bne.n	8009040 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800901c:	f043 0220 	orr.w	r2, r3, #32
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2220      	movs	r2, #32
 8009028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e007      	b.n	8009050 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	f003 0320 	and.w	r3, r3, #32
 800904a:	2b20      	cmp	r3, #32
 800904c:	d1cf      	bne.n	8008fee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b08a      	sub	sp, #40	; 0x28
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	f003 0310 	and.w	r3, r3, #16
 8009080:	2b00      	cmp	r3, #0
 8009082:	d068      	beq.n	8009156 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2210      	movs	r2, #16
 800908a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800908c:	e049      	b.n	8009122 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009094:	d045      	beq.n	8009122 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009096:	f7fd fc73 	bl	8006980 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d302      	bcc.n	80090ac <I2C_IsErrorOccurred+0x54>
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d13a      	bne.n	8009122 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80090be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090ce:	d121      	bne.n	8009114 <I2C_IsErrorOccurred+0xbc>
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090d6:	d01d      	beq.n	8009114 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80090d8:	7cfb      	ldrb	r3, [r7, #19]
 80090da:	2b20      	cmp	r3, #32
 80090dc:	d01a      	beq.n	8009114 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	685a      	ldr	r2, [r3, #4]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80090ee:	f7fd fc47 	bl	8006980 <HAL_GetTick>
 80090f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80090f4:	e00e      	b.n	8009114 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80090f6:	f7fd fc43 	bl	8006980 <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	2b19      	cmp	r3, #25
 8009102:	d907      	bls.n	8009114 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8009104:	6a3b      	ldr	r3, [r7, #32]
 8009106:	f043 0320 	orr.w	r3, r3, #32
 800910a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009112:	e006      	b.n	8009122 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	f003 0320 	and.w	r3, r3, #32
 800911e:	2b20      	cmp	r3, #32
 8009120:	d1e9      	bne.n	80090f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	f003 0320 	and.w	r3, r3, #32
 800912c:	2b20      	cmp	r3, #32
 800912e:	d003      	beq.n	8009138 <I2C_IsErrorOccurred+0xe0>
 8009130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009134:	2b00      	cmp	r3, #0
 8009136:	d0aa      	beq.n	800908e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800913c:	2b00      	cmp	r3, #0
 800913e:	d103      	bne.n	8009148 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2220      	movs	r2, #32
 8009146:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009148:	6a3b      	ldr	r3, [r7, #32]
 800914a:	f043 0304 	orr.w	r3, r3, #4
 800914e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00b      	beq.n	8009180 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009168:	6a3b      	ldr	r3, [r7, #32]
 800916a:	f043 0301 	orr.w	r3, r3, #1
 800916e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009178:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00b      	beq.n	80091a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	f043 0308 	orr.w	r3, r3, #8
 8009190:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800919a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00b      	beq.n	80091c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	f043 0302 	orr.w	r3, r3, #2
 80091b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80091c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d01c      	beq.n	8009206 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f7ff fe63 	bl	8008e98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6859      	ldr	r1, [r3, #4]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	4b0d      	ldr	r3, [pc, #52]	; (8009214 <I2C_IsErrorOccurred+0x1bc>)
 80091de:	400b      	ands	r3, r1
 80091e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091e6:	6a3b      	ldr	r3, [r7, #32]
 80091e8:	431a      	orrs	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2220      	movs	r2, #32
 80091f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800920a:	4618      	mov	r0, r3
 800920c:	3728      	adds	r7, #40	; 0x28
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	fe00e800 	.word	0xfe00e800

08009218 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	607b      	str	r3, [r7, #4]
 8009222:	460b      	mov	r3, r1
 8009224:	817b      	strh	r3, [r7, #10]
 8009226:	4613      	mov	r3, r2
 8009228:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800922a:	897b      	ldrh	r3, [r7, #10]
 800922c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009230:	7a7b      	ldrb	r3, [r7, #9]
 8009232:	041b      	lsls	r3, r3, #16
 8009234:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009238:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	4313      	orrs	r3, r2
 8009242:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009246:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	685a      	ldr	r2, [r3, #4]
 800924e:	6a3b      	ldr	r3, [r7, #32]
 8009250:	0d5b      	lsrs	r3, r3, #21
 8009252:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009256:	4b08      	ldr	r3, [pc, #32]	; (8009278 <I2C_TransferConfig+0x60>)
 8009258:	430b      	orrs	r3, r1
 800925a:	43db      	mvns	r3, r3
 800925c:	ea02 0103 	and.w	r1, r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	697a      	ldr	r2, [r7, #20]
 8009266:	430a      	orrs	r2, r1
 8009268:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800926a:	bf00      	nop
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	03ff63ff 	.word	0x03ff63ff

0800927c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b20      	cmp	r3, #32
 8009290:	d138      	bne.n	8009304 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009298:	2b01      	cmp	r3, #1
 800929a:	d101      	bne.n	80092a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800929c:	2302      	movs	r3, #2
 800929e:	e032      	b.n	8009306 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2224      	movs	r2, #36	; 0x24
 80092ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f022 0201 	bic.w	r2, r2, #1
 80092be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80092ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6819      	ldr	r1, [r3, #0]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	430a      	orrs	r2, r1
 80092de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f042 0201 	orr.w	r2, r2, #1
 80092ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2220      	movs	r2, #32
 80092f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	e000      	b.n	8009306 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009304:	2302      	movs	r3, #2
  }
}
 8009306:	4618      	mov	r0, r3
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009312:	b480      	push	{r7}
 8009314:	b085      	sub	sp, #20
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009322:	b2db      	uxtb	r3, r3
 8009324:	2b20      	cmp	r3, #32
 8009326:	d139      	bne.n	800939c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800932e:	2b01      	cmp	r3, #1
 8009330:	d101      	bne.n	8009336 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009332:	2302      	movs	r3, #2
 8009334:	e033      	b.n	800939e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2224      	movs	r2, #36	; 0x24
 8009342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f022 0201 	bic.w	r2, r2, #1
 8009354:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009364:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	021b      	lsls	r3, r3, #8
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	4313      	orrs	r3, r2
 800936e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f042 0201 	orr.w	r2, r2, #1
 8009386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2220      	movs	r2, #32
 800938c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	e000      	b.n	800939e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800939c:	2302      	movs	r3, #2
  }
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
	...

080093ac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e0bf      	b.n	800953e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d106      	bne.n	80093d8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7f8 fca0 	bl	8001d18 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2202      	movs	r2, #2
 80093dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	699a      	ldr	r2, [r3, #24]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80093ee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	6999      	ldr	r1, [r3, #24]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685a      	ldr	r2, [r3, #4]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009404:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	430a      	orrs	r2, r1
 8009412:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6899      	ldr	r1, [r3, #8]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	4b4a      	ldr	r3, [pc, #296]	; (8009548 <HAL_LTDC_Init+0x19c>)
 8009420:	400b      	ands	r3, r1
 8009422:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	041b      	lsls	r3, r3, #16
 800942a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6899      	ldr	r1, [r3, #8]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	699a      	ldr	r2, [r3, #24]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	431a      	orrs	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	430a      	orrs	r2, r1
 8009440:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68d9      	ldr	r1, [r3, #12]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	4b3e      	ldr	r3, [pc, #248]	; (8009548 <HAL_LTDC_Init+0x19c>)
 800944e:	400b      	ands	r3, r1
 8009450:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	041b      	lsls	r3, r3, #16
 8009458:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68d9      	ldr	r1, [r3, #12]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a1a      	ldr	r2, [r3, #32]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	431a      	orrs	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	430a      	orrs	r2, r1
 800946e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6919      	ldr	r1, [r3, #16]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	4b33      	ldr	r3, [pc, #204]	; (8009548 <HAL_LTDC_Init+0x19c>)
 800947c:	400b      	ands	r3, r1
 800947e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009484:	041b      	lsls	r3, r3, #16
 8009486:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6919      	ldr	r1, [r3, #16]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	431a      	orrs	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	430a      	orrs	r2, r1
 800949c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6959      	ldr	r1, [r3, #20]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	4b27      	ldr	r3, [pc, #156]	; (8009548 <HAL_LTDC_Init+0x19c>)
 80094aa:	400b      	ands	r3, r1
 80094ac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b2:	041b      	lsls	r3, r3, #16
 80094b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6959      	ldr	r1, [r3, #20]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	431a      	orrs	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	430a      	orrs	r2, r1
 80094ca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80094d2:	021b      	lsls	r3, r3, #8
 80094d4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80094dc:	041b      	lsls	r3, r3, #16
 80094de:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80094ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009502:	431a      	orrs	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	430a      	orrs	r2, r1
 800950a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f042 0206 	orr.w	r2, r2, #6
 800951a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	699a      	ldr	r2, [r3, #24]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f042 0201 	orr.w	r2, r2, #1
 800952a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	f000f800 	.word	0xf000f800

0800954c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800954c:	b5b0      	push	{r4, r5, r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800955e:	2b01      	cmp	r3, #1
 8009560:	d101      	bne.n	8009566 <HAL_LTDC_ConfigLayer+0x1a>
 8009562:	2302      	movs	r3, #2
 8009564:	e02c      	b.n	80095c0 <HAL_LTDC_ConfigLayer+0x74>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2202      	movs	r2, #2
 8009572:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2134      	movs	r1, #52	; 0x34
 800957c:	fb01 f303 	mul.w	r3, r1, r3
 8009580:	4413      	add	r3, r2
 8009582:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	4614      	mov	r4, r2
 800958a:	461d      	mov	r5, r3
 800958c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800958e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009598:	682b      	ldr	r3, [r5, #0]
 800959a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	68b9      	ldr	r1, [r7, #8]
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f000 f81f 	bl	80095e4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2201      	movs	r2, #1
 80095ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bdb0      	pop	{r4, r5, r7, pc}

080095c8 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80095d6:	b2db      	uxtb	r3, r3
}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b089      	sub	sp, #36	; 0x24
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	685a      	ldr	r2, [r3, #4]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	0c1b      	lsrs	r3, r3, #16
 80095fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009600:	4413      	add	r3, r2
 8009602:	041b      	lsls	r3, r3, #16
 8009604:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	01db      	lsls	r3, r3, #7
 8009610:	4413      	add	r3, r2
 8009612:	3384      	adds	r3, #132	; 0x84
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	6812      	ldr	r2, [r2, #0]
 800961a:	4611      	mov	r1, r2
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	01d2      	lsls	r2, r2, #7
 8009620:	440a      	add	r2, r1
 8009622:	3284      	adds	r2, #132	; 0x84
 8009624:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009628:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	0c1b      	lsrs	r3, r3, #16
 8009636:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800963a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800963c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4619      	mov	r1, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	01db      	lsls	r3, r3, #7
 8009648:	440b      	add	r3, r1
 800964a:	3384      	adds	r3, #132	; 0x84
 800964c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009652:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	68da      	ldr	r2, [r3, #12]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009662:	4413      	add	r3, r2
 8009664:	041b      	lsls	r3, r3, #16
 8009666:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	461a      	mov	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	01db      	lsls	r3, r3, #7
 8009672:	4413      	add	r3, r2
 8009674:	3384      	adds	r3, #132	; 0x84
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	6812      	ldr	r2, [r2, #0]
 800967c:	4611      	mov	r1, r2
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	01d2      	lsls	r2, r2, #7
 8009682:	440a      	add	r2, r1
 8009684:	3284      	adds	r2, #132	; 0x84
 8009686:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800968a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	689a      	ldr	r2, [r3, #8]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800969a:	4413      	add	r3, r2
 800969c:	1c5a      	adds	r2, r3, #1
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4619      	mov	r1, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	01db      	lsls	r3, r3, #7
 80096a8:	440b      	add	r3, r1
 80096aa:	3384      	adds	r3, #132	; 0x84
 80096ac:	4619      	mov	r1, r3
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	461a      	mov	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	01db      	lsls	r3, r3, #7
 80096be:	4413      	add	r3, r2
 80096c0:	3384      	adds	r3, #132	; 0x84
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	6812      	ldr	r2, [r2, #0]
 80096c8:	4611      	mov	r1, r2
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	01d2      	lsls	r2, r2, #7
 80096ce:	440a      	add	r2, r1
 80096d0:	3284      	adds	r2, #132	; 0x84
 80096d2:	f023 0307 	bic.w	r3, r3, #7
 80096d6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	461a      	mov	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	01db      	lsls	r3, r3, #7
 80096e2:	4413      	add	r3, r2
 80096e4:	3384      	adds	r3, #132	; 0x84
 80096e6:	461a      	mov	r2, r3
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80096f4:	021b      	lsls	r3, r3, #8
 80096f6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80096fe:	041b      	lsls	r3, r3, #16
 8009700:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	061b      	lsls	r3, r3, #24
 8009708:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	461a      	mov	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	01db      	lsls	r3, r3, #7
 8009714:	4413      	add	r3, r2
 8009716:	3384      	adds	r3, #132	; 0x84
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	01db      	lsls	r3, r3, #7
 8009724:	4413      	add	r3, r2
 8009726:	3384      	adds	r3, #132	; 0x84
 8009728:	461a      	mov	r2, r3
 800972a:	2300      	movs	r3, #0
 800972c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009734:	461a      	mov	r2, r3
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	431a      	orrs	r2, r3
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	431a      	orrs	r2, r3
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4619      	mov	r1, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	01db      	lsls	r3, r3, #7
 8009748:	440b      	add	r3, r1
 800974a:	3384      	adds	r3, #132	; 0x84
 800974c:	4619      	mov	r1, r3
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	4313      	orrs	r3, r2
 8009752:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	461a      	mov	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	01db      	lsls	r3, r3, #7
 800975e:	4413      	add	r3, r2
 8009760:	3384      	adds	r3, #132	; 0x84
 8009762:	695b      	ldr	r3, [r3, #20]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	6812      	ldr	r2, [r2, #0]
 8009768:	4611      	mov	r1, r2
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	01d2      	lsls	r2, r2, #7
 800976e:	440a      	add	r2, r1
 8009770:	3284      	adds	r2, #132	; 0x84
 8009772:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009776:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	461a      	mov	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	01db      	lsls	r3, r3, #7
 8009782:	4413      	add	r3, r2
 8009784:	3384      	adds	r3, #132	; 0x84
 8009786:	461a      	mov	r2, r3
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	461a      	mov	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	01db      	lsls	r3, r3, #7
 8009798:	4413      	add	r3, r2
 800979a:	3384      	adds	r3, #132	; 0x84
 800979c:	69da      	ldr	r2, [r3, #28]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4619      	mov	r1, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	01db      	lsls	r3, r3, #7
 80097a8:	440b      	add	r3, r1
 80097aa:	3384      	adds	r3, #132	; 0x84
 80097ac:	4619      	mov	r1, r3
 80097ae:	4b58      	ldr	r3, [pc, #352]	; (8009910 <LTDC_SetConfig+0x32c>)
 80097b0:	4013      	ands	r3, r2
 80097b2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	69da      	ldr	r2, [r3, #28]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	6a1b      	ldr	r3, [r3, #32]
 80097bc:	68f9      	ldr	r1, [r7, #12]
 80097be:	6809      	ldr	r1, [r1, #0]
 80097c0:	4608      	mov	r0, r1
 80097c2:	6879      	ldr	r1, [r7, #4]
 80097c4:	01c9      	lsls	r1, r1, #7
 80097c6:	4401      	add	r1, r0
 80097c8:	3184      	adds	r1, #132	; 0x84
 80097ca:	4313      	orrs	r3, r2
 80097cc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	461a      	mov	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	01db      	lsls	r3, r3, #7
 80097d8:	4413      	add	r3, r2
 80097da:	3384      	adds	r3, #132	; 0x84
 80097dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	01db      	lsls	r3, r3, #7
 80097e8:	4413      	add	r3, r2
 80097ea:	3384      	adds	r3, #132	; 0x84
 80097ec:	461a      	mov	r2, r3
 80097ee:	2300      	movs	r3, #0
 80097f0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	461a      	mov	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	01db      	lsls	r3, r3, #7
 80097fc:	4413      	add	r3, r2
 80097fe:	3384      	adds	r3, #132	; 0x84
 8009800:	461a      	mov	r2, r3
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009806:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d102      	bne.n	8009816 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009810:	2304      	movs	r3, #4
 8009812:	61fb      	str	r3, [r7, #28]
 8009814:	e01b      	b.n	800984e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d102      	bne.n	8009824 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800981e:	2303      	movs	r3, #3
 8009820:	61fb      	str	r3, [r7, #28]
 8009822:	e014      	b.n	800984e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	2b04      	cmp	r3, #4
 800982a:	d00b      	beq.n	8009844 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009830:	2b02      	cmp	r3, #2
 8009832:	d007      	beq.n	8009844 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009838:	2b03      	cmp	r3, #3
 800983a:	d003      	beq.n	8009844 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009840:	2b07      	cmp	r3, #7
 8009842:	d102      	bne.n	800984a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8009844:	2302      	movs	r3, #2
 8009846:	61fb      	str	r3, [r7, #28]
 8009848:	e001      	b.n	800984e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800984a:	2301      	movs	r3, #1
 800984c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	461a      	mov	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	01db      	lsls	r3, r3, #7
 8009858:	4413      	add	r3, r2
 800985a:	3384      	adds	r3, #132	; 0x84
 800985c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	6812      	ldr	r2, [r2, #0]
 8009862:	4611      	mov	r1, r2
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	01d2      	lsls	r2, r2, #7
 8009868:	440a      	add	r2, r1
 800986a:	3284      	adds	r2, #132	; 0x84
 800986c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009870:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009876:	69fa      	ldr	r2, [r7, #28]
 8009878:	fb02 f303 	mul.w	r3, r2, r3
 800987c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	6859      	ldr	r1, [r3, #4]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	1acb      	subs	r3, r1, r3
 8009888:	69f9      	ldr	r1, [r7, #28]
 800988a:	fb01 f303 	mul.w	r3, r1, r3
 800988e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009890:	68f9      	ldr	r1, [r7, #12]
 8009892:	6809      	ldr	r1, [r1, #0]
 8009894:	4608      	mov	r0, r1
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	01c9      	lsls	r1, r1, #7
 800989a:	4401      	add	r1, r0
 800989c:	3184      	adds	r1, #132	; 0x84
 800989e:	4313      	orrs	r3, r2
 80098a0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	461a      	mov	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	01db      	lsls	r3, r3, #7
 80098ac:	4413      	add	r3, r2
 80098ae:	3384      	adds	r3, #132	; 0x84
 80098b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4619      	mov	r1, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	01db      	lsls	r3, r3, #7
 80098bc:	440b      	add	r3, r1
 80098be:	3384      	adds	r3, #132	; 0x84
 80098c0:	4619      	mov	r1, r3
 80098c2:	4b14      	ldr	r3, [pc, #80]	; (8009914 <LTDC_SetConfig+0x330>)
 80098c4:	4013      	ands	r3, r2
 80098c6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	461a      	mov	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	01db      	lsls	r3, r3, #7
 80098d2:	4413      	add	r3, r2
 80098d4:	3384      	adds	r3, #132	; 0x84
 80098d6:	461a      	mov	r2, r3
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098dc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	461a      	mov	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	01db      	lsls	r3, r3, #7
 80098e8:	4413      	add	r3, r2
 80098ea:	3384      	adds	r3, #132	; 0x84
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	6812      	ldr	r2, [r2, #0]
 80098f2:	4611      	mov	r1, r2
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	01d2      	lsls	r2, r2, #7
 80098f8:	440a      	add	r2, r1
 80098fa:	3284      	adds	r2, #132	; 0x84
 80098fc:	f043 0301 	orr.w	r3, r3, #1
 8009900:	6013      	str	r3, [r2, #0]
}
 8009902:	bf00      	nop
 8009904:	3724      	adds	r7, #36	; 0x24
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	fffff8f8 	.word	0xfffff8f8
 8009914:	fffff800 	.word	0xfffff800

08009918 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009922:	4b23      	ldr	r3, [pc, #140]	; (80099b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009926:	4a22      	ldr	r2, [pc, #136]	; (80099b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800992c:	6413      	str	r3, [r2, #64]	; 0x40
 800992e:	4b20      	ldr	r3, [pc, #128]	; (80099b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009936:	603b      	str	r3, [r7, #0]
 8009938:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800993a:	4b1e      	ldr	r3, [pc, #120]	; (80099b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a1d      	ldr	r2, [pc, #116]	; (80099b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009944:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009946:	f7fd f81b 	bl	8006980 <HAL_GetTick>
 800994a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800994c:	e009      	b.n	8009962 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800994e:	f7fd f817 	bl	8006980 <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800995c:	d901      	bls.n	8009962 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800995e:	2303      	movs	r3, #3
 8009960:	e022      	b.n	80099a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009962:	4b14      	ldr	r3, [pc, #80]	; (80099b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800996a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800996e:	d1ee      	bne.n	800994e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009970:	4b10      	ldr	r3, [pc, #64]	; (80099b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a0f      	ldr	r2, [pc, #60]	; (80099b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800997a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800997c:	f7fd f800 	bl	8006980 <HAL_GetTick>
 8009980:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009982:	e009      	b.n	8009998 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009984:	f7fc fffc 	bl	8006980 <HAL_GetTick>
 8009988:	4602      	mov	r2, r0
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	1ad3      	subs	r3, r2, r3
 800998e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009992:	d901      	bls.n	8009998 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009994:	2303      	movs	r3, #3
 8009996:	e007      	b.n	80099a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009998:	4b06      	ldr	r3, [pc, #24]	; (80099b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099a4:	d1ee      	bne.n	8009984 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	40023800 	.word	0x40023800
 80099b4:	40007000 	.word	0x40007000

080099b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b086      	sub	sp, #24
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80099c0:	2300      	movs	r3, #0
 80099c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d101      	bne.n	80099ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	e291      	b.n	8009ef2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f003 0301 	and.w	r3, r3, #1
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f000 8087 	beq.w	8009aea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80099dc:	4b96      	ldr	r3, [pc, #600]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	f003 030c 	and.w	r3, r3, #12
 80099e4:	2b04      	cmp	r3, #4
 80099e6:	d00c      	beq.n	8009a02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80099e8:	4b93      	ldr	r3, [pc, #588]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	f003 030c 	and.w	r3, r3, #12
 80099f0:	2b08      	cmp	r3, #8
 80099f2:	d112      	bne.n	8009a1a <HAL_RCC_OscConfig+0x62>
 80099f4:	4b90      	ldr	r3, [pc, #576]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a00:	d10b      	bne.n	8009a1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a02:	4b8d      	ldr	r3, [pc, #564]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d06c      	beq.n	8009ae8 <HAL_RCC_OscConfig+0x130>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d168      	bne.n	8009ae8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e26b      	b.n	8009ef2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a22:	d106      	bne.n	8009a32 <HAL_RCC_OscConfig+0x7a>
 8009a24:	4b84      	ldr	r3, [pc, #528]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a83      	ldr	r2, [pc, #524]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a2e:	6013      	str	r3, [r2, #0]
 8009a30:	e02e      	b.n	8009a90 <HAL_RCC_OscConfig+0xd8>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10c      	bne.n	8009a54 <HAL_RCC_OscConfig+0x9c>
 8009a3a:	4b7f      	ldr	r3, [pc, #508]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a7e      	ldr	r2, [pc, #504]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a44:	6013      	str	r3, [r2, #0]
 8009a46:	4b7c      	ldr	r3, [pc, #496]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a7b      	ldr	r2, [pc, #492]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a50:	6013      	str	r3, [r2, #0]
 8009a52:	e01d      	b.n	8009a90 <HAL_RCC_OscConfig+0xd8>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a5c:	d10c      	bne.n	8009a78 <HAL_RCC_OscConfig+0xc0>
 8009a5e:	4b76      	ldr	r3, [pc, #472]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a75      	ldr	r2, [pc, #468]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a68:	6013      	str	r3, [r2, #0]
 8009a6a:	4b73      	ldr	r3, [pc, #460]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a72      	ldr	r2, [pc, #456]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a74:	6013      	str	r3, [r2, #0]
 8009a76:	e00b      	b.n	8009a90 <HAL_RCC_OscConfig+0xd8>
 8009a78:	4b6f      	ldr	r3, [pc, #444]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a6e      	ldr	r2, [pc, #440]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a82:	6013      	str	r3, [r2, #0]
 8009a84:	4b6c      	ldr	r3, [pc, #432]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a6b      	ldr	r2, [pc, #428]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d013      	beq.n	8009ac0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a98:	f7fc ff72 	bl	8006980 <HAL_GetTick>
 8009a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a9e:	e008      	b.n	8009ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009aa0:	f7fc ff6e 	bl	8006980 <HAL_GetTick>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	2b64      	cmp	r3, #100	; 0x64
 8009aac:	d901      	bls.n	8009ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e21f      	b.n	8009ef2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ab2:	4b61      	ldr	r3, [pc, #388]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d0f0      	beq.n	8009aa0 <HAL_RCC_OscConfig+0xe8>
 8009abe:	e014      	b.n	8009aea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac0:	f7fc ff5e 	bl	8006980 <HAL_GetTick>
 8009ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ac6:	e008      	b.n	8009ada <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ac8:	f7fc ff5a 	bl	8006980 <HAL_GetTick>
 8009acc:	4602      	mov	r2, r0
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	2b64      	cmp	r3, #100	; 0x64
 8009ad4:	d901      	bls.n	8009ada <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	e20b      	b.n	8009ef2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ada:	4b57      	ldr	r3, [pc, #348]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1f0      	bne.n	8009ac8 <HAL_RCC_OscConfig+0x110>
 8009ae6:	e000      	b.n	8009aea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 0302 	and.w	r3, r3, #2
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d069      	beq.n	8009bca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009af6:	4b50      	ldr	r3, [pc, #320]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	f003 030c 	and.w	r3, r3, #12
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00b      	beq.n	8009b1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b02:	4b4d      	ldr	r3, [pc, #308]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f003 030c 	and.w	r3, r3, #12
 8009b0a:	2b08      	cmp	r3, #8
 8009b0c:	d11c      	bne.n	8009b48 <HAL_RCC_OscConfig+0x190>
 8009b0e:	4b4a      	ldr	r3, [pc, #296]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d116      	bne.n	8009b48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b1a:	4b47      	ldr	r3, [pc, #284]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 0302 	and.w	r3, r3, #2
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d005      	beq.n	8009b32 <HAL_RCC_OscConfig+0x17a>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d001      	beq.n	8009b32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e1df      	b.n	8009ef2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b32:	4b41      	ldr	r3, [pc, #260]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	00db      	lsls	r3, r3, #3
 8009b40:	493d      	ldr	r1, [pc, #244]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009b42:	4313      	orrs	r3, r2
 8009b44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b46:	e040      	b.n	8009bca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d023      	beq.n	8009b98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b50:	4b39      	ldr	r3, [pc, #228]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a38      	ldr	r2, [pc, #224]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009b56:	f043 0301 	orr.w	r3, r3, #1
 8009b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b5c:	f7fc ff10 	bl	8006980 <HAL_GetTick>
 8009b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b62:	e008      	b.n	8009b76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b64:	f7fc ff0c 	bl	8006980 <HAL_GetTick>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d901      	bls.n	8009b76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e1bd      	b.n	8009ef2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b76:	4b30      	ldr	r3, [pc, #192]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0302 	and.w	r3, r3, #2
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d0f0      	beq.n	8009b64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b82:	4b2d      	ldr	r3, [pc, #180]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	00db      	lsls	r3, r3, #3
 8009b90:	4929      	ldr	r1, [pc, #164]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009b92:	4313      	orrs	r3, r2
 8009b94:	600b      	str	r3, [r1, #0]
 8009b96:	e018      	b.n	8009bca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b98:	4b27      	ldr	r3, [pc, #156]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a26      	ldr	r2, [pc, #152]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009b9e:	f023 0301 	bic.w	r3, r3, #1
 8009ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ba4:	f7fc feec 	bl	8006980 <HAL_GetTick>
 8009ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009baa:	e008      	b.n	8009bbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bac:	f7fc fee8 	bl	8006980 <HAL_GetTick>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d901      	bls.n	8009bbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e199      	b.n	8009ef2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bbe:	4b1e      	ldr	r3, [pc, #120]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f003 0302 	and.w	r3, r3, #2
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1f0      	bne.n	8009bac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 0308 	and.w	r3, r3, #8
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d038      	beq.n	8009c48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d019      	beq.n	8009c12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009bde:	4b16      	ldr	r3, [pc, #88]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009be2:	4a15      	ldr	r2, [pc, #84]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009be4:	f043 0301 	orr.w	r3, r3, #1
 8009be8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bea:	f7fc fec9 	bl	8006980 <HAL_GetTick>
 8009bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009bf0:	e008      	b.n	8009c04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bf2:	f7fc fec5 	bl	8006980 <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d901      	bls.n	8009c04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e176      	b.n	8009ef2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c04:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c08:	f003 0302 	and.w	r3, r3, #2
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0f0      	beq.n	8009bf2 <HAL_RCC_OscConfig+0x23a>
 8009c10:	e01a      	b.n	8009c48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c12:	4b09      	ldr	r3, [pc, #36]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c16:	4a08      	ldr	r2, [pc, #32]	; (8009c38 <HAL_RCC_OscConfig+0x280>)
 8009c18:	f023 0301 	bic.w	r3, r3, #1
 8009c1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c1e:	f7fc feaf 	bl	8006980 <HAL_GetTick>
 8009c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c24:	e00a      	b.n	8009c3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c26:	f7fc feab 	bl	8006980 <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d903      	bls.n	8009c3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e15c      	b.n	8009ef2 <HAL_RCC_OscConfig+0x53a>
 8009c38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c3c:	4b91      	ldr	r3, [pc, #580]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c40:	f003 0302 	and.w	r3, r3, #2
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d1ee      	bne.n	8009c26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0304 	and.w	r3, r3, #4
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f000 80a4 	beq.w	8009d9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c56:	4b8b      	ldr	r3, [pc, #556]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10d      	bne.n	8009c7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c62:	4b88      	ldr	r3, [pc, #544]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c66:	4a87      	ldr	r2, [pc, #540]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8009c6e:	4b85      	ldr	r3, [pc, #532]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c76:	60bb      	str	r3, [r7, #8]
 8009c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c7e:	4b82      	ldr	r3, [pc, #520]	; (8009e88 <HAL_RCC_OscConfig+0x4d0>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d118      	bne.n	8009cbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009c8a:	4b7f      	ldr	r3, [pc, #508]	; (8009e88 <HAL_RCC_OscConfig+0x4d0>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a7e      	ldr	r2, [pc, #504]	; (8009e88 <HAL_RCC_OscConfig+0x4d0>)
 8009c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c96:	f7fc fe73 	bl	8006980 <HAL_GetTick>
 8009c9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c9c:	e008      	b.n	8009cb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c9e:	f7fc fe6f 	bl	8006980 <HAL_GetTick>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	2b64      	cmp	r3, #100	; 0x64
 8009caa:	d901      	bls.n	8009cb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e120      	b.n	8009ef2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009cb0:	4b75      	ldr	r3, [pc, #468]	; (8009e88 <HAL_RCC_OscConfig+0x4d0>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d0f0      	beq.n	8009c9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d106      	bne.n	8009cd2 <HAL_RCC_OscConfig+0x31a>
 8009cc4:	4b6f      	ldr	r3, [pc, #444]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc8:	4a6e      	ldr	r2, [pc, #440]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009cca:	f043 0301 	orr.w	r3, r3, #1
 8009cce:	6713      	str	r3, [r2, #112]	; 0x70
 8009cd0:	e02d      	b.n	8009d2e <HAL_RCC_OscConfig+0x376>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10c      	bne.n	8009cf4 <HAL_RCC_OscConfig+0x33c>
 8009cda:	4b6a      	ldr	r3, [pc, #424]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cde:	4a69      	ldr	r2, [pc, #420]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009ce0:	f023 0301 	bic.w	r3, r3, #1
 8009ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ce6:	4b67      	ldr	r3, [pc, #412]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cea:	4a66      	ldr	r2, [pc, #408]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009cec:	f023 0304 	bic.w	r3, r3, #4
 8009cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8009cf2:	e01c      	b.n	8009d2e <HAL_RCC_OscConfig+0x376>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	2b05      	cmp	r3, #5
 8009cfa:	d10c      	bne.n	8009d16 <HAL_RCC_OscConfig+0x35e>
 8009cfc:	4b61      	ldr	r3, [pc, #388]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d00:	4a60      	ldr	r2, [pc, #384]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009d02:	f043 0304 	orr.w	r3, r3, #4
 8009d06:	6713      	str	r3, [r2, #112]	; 0x70
 8009d08:	4b5e      	ldr	r3, [pc, #376]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d0c:	4a5d      	ldr	r2, [pc, #372]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009d0e:	f043 0301 	orr.w	r3, r3, #1
 8009d12:	6713      	str	r3, [r2, #112]	; 0x70
 8009d14:	e00b      	b.n	8009d2e <HAL_RCC_OscConfig+0x376>
 8009d16:	4b5b      	ldr	r3, [pc, #364]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d1a:	4a5a      	ldr	r2, [pc, #360]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009d1c:	f023 0301 	bic.w	r3, r3, #1
 8009d20:	6713      	str	r3, [r2, #112]	; 0x70
 8009d22:	4b58      	ldr	r3, [pc, #352]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d26:	4a57      	ldr	r2, [pc, #348]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009d28:	f023 0304 	bic.w	r3, r3, #4
 8009d2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d015      	beq.n	8009d62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d36:	f7fc fe23 	bl	8006980 <HAL_GetTick>
 8009d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d3c:	e00a      	b.n	8009d54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d3e:	f7fc fe1f 	bl	8006980 <HAL_GetTick>
 8009d42:	4602      	mov	r2, r0
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d901      	bls.n	8009d54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e0ce      	b.n	8009ef2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d54:	4b4b      	ldr	r3, [pc, #300]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d58:	f003 0302 	and.w	r3, r3, #2
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d0ee      	beq.n	8009d3e <HAL_RCC_OscConfig+0x386>
 8009d60:	e014      	b.n	8009d8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d62:	f7fc fe0d 	bl	8006980 <HAL_GetTick>
 8009d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d68:	e00a      	b.n	8009d80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d6a:	f7fc fe09 	bl	8006980 <HAL_GetTick>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d901      	bls.n	8009d80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e0b8      	b.n	8009ef2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d80:	4b40      	ldr	r3, [pc, #256]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d84:	f003 0302 	and.w	r3, r3, #2
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1ee      	bne.n	8009d6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009d8c:	7dfb      	ldrb	r3, [r7, #23]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d105      	bne.n	8009d9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d92:	4b3c      	ldr	r3, [pc, #240]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d96:	4a3b      	ldr	r2, [pc, #236]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	699b      	ldr	r3, [r3, #24]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 80a4 	beq.w	8009ef0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009da8:	4b36      	ldr	r3, [pc, #216]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	f003 030c 	and.w	r3, r3, #12
 8009db0:	2b08      	cmp	r3, #8
 8009db2:	d06b      	beq.n	8009e8c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d149      	bne.n	8009e50 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009dbc:	4b31      	ldr	r3, [pc, #196]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a30      	ldr	r2, [pc, #192]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dc8:	f7fc fdda 	bl	8006980 <HAL_GetTick>
 8009dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dce:	e008      	b.n	8009de2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009dd0:	f7fc fdd6 	bl	8006980 <HAL_GetTick>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d901      	bls.n	8009de2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e087      	b.n	8009ef2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009de2:	4b28      	ldr	r3, [pc, #160]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1f0      	bne.n	8009dd0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	69da      	ldr	r2, [r3, #28]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	431a      	orrs	r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfc:	019b      	lsls	r3, r3, #6
 8009dfe:	431a      	orrs	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e04:	085b      	lsrs	r3, r3, #1
 8009e06:	3b01      	subs	r3, #1
 8009e08:	041b      	lsls	r3, r3, #16
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e10:	061b      	lsls	r3, r3, #24
 8009e12:	4313      	orrs	r3, r2
 8009e14:	4a1b      	ldr	r2, [pc, #108]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009e16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e1a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e1c:	4b19      	ldr	r3, [pc, #100]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a18      	ldr	r2, [pc, #96]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e28:	f7fc fdaa 	bl	8006980 <HAL_GetTick>
 8009e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e2e:	e008      	b.n	8009e42 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e30:	f7fc fda6 	bl	8006980 <HAL_GetTick>
 8009e34:	4602      	mov	r2, r0
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d901      	bls.n	8009e42 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e057      	b.n	8009ef2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e42:	4b10      	ldr	r3, [pc, #64]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0f0      	beq.n	8009e30 <HAL_RCC_OscConfig+0x478>
 8009e4e:	e04f      	b.n	8009ef0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e50:	4b0c      	ldr	r3, [pc, #48]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a0b      	ldr	r2, [pc, #44]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e5c:	f7fc fd90 	bl	8006980 <HAL_GetTick>
 8009e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e62:	e008      	b.n	8009e76 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e64:	f7fc fd8c 	bl	8006980 <HAL_GetTick>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d901      	bls.n	8009e76 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e03d      	b.n	8009ef2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e76:	4b03      	ldr	r3, [pc, #12]	; (8009e84 <HAL_RCC_OscConfig+0x4cc>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1f0      	bne.n	8009e64 <HAL_RCC_OscConfig+0x4ac>
 8009e82:	e035      	b.n	8009ef0 <HAL_RCC_OscConfig+0x538>
 8009e84:	40023800 	.word	0x40023800
 8009e88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009e8c:	4b1b      	ldr	r3, [pc, #108]	; (8009efc <HAL_RCC_OscConfig+0x544>)
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d028      	beq.n	8009eec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d121      	bne.n	8009eec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d11a      	bne.n	8009eec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ec2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d111      	bne.n	8009eec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed2:	085b      	lsrs	r3, r3, #1
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d107      	bne.n	8009eec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d001      	beq.n	8009ef0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e000      	b.n	8009ef2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3718      	adds	r7, #24
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	40023800 	.word	0x40023800

08009f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d101      	bne.n	8009f18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e0d0      	b.n	800a0ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f18:	4b6a      	ldr	r3, [pc, #424]	; (800a0c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 030f 	and.w	r3, r3, #15
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d910      	bls.n	8009f48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f26:	4b67      	ldr	r3, [pc, #412]	; (800a0c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f023 020f 	bic.w	r2, r3, #15
 8009f2e:	4965      	ldr	r1, [pc, #404]	; (800a0c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f36:	4b63      	ldr	r3, [pc, #396]	; (800a0c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 030f 	and.w	r3, r3, #15
 8009f3e:	683a      	ldr	r2, [r7, #0]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d001      	beq.n	8009f48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e0b8      	b.n	800a0ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0302 	and.w	r3, r3, #2
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d020      	beq.n	8009f96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 0304 	and.w	r3, r3, #4
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d005      	beq.n	8009f6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f60:	4b59      	ldr	r3, [pc, #356]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	4a58      	ldr	r2, [pc, #352]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009f66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009f6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0308 	and.w	r3, r3, #8
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d005      	beq.n	8009f84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f78:	4b53      	ldr	r3, [pc, #332]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	4a52      	ldr	r2, [pc, #328]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009f7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009f82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f84:	4b50      	ldr	r3, [pc, #320]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	494d      	ldr	r1, [pc, #308]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009f92:	4313      	orrs	r3, r2
 8009f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d040      	beq.n	800a024 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d107      	bne.n	8009fba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009faa:	4b47      	ldr	r3, [pc, #284]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d115      	bne.n	8009fe2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e07f      	b.n	800a0ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d107      	bne.n	8009fd2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fc2:	4b41      	ldr	r3, [pc, #260]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d109      	bne.n	8009fe2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e073      	b.n	800a0ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fd2:	4b3d      	ldr	r3, [pc, #244]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0302 	and.w	r3, r3, #2
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e06b      	b.n	800a0ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009fe2:	4b39      	ldr	r3, [pc, #228]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	f023 0203 	bic.w	r2, r3, #3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	4936      	ldr	r1, [pc, #216]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ff4:	f7fc fcc4 	bl	8006980 <HAL_GetTick>
 8009ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ffa:	e00a      	b.n	800a012 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ffc:	f7fc fcc0 	bl	8006980 <HAL_GetTick>
 800a000:	4602      	mov	r2, r0
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	f241 3288 	movw	r2, #5000	; 0x1388
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d901      	bls.n	800a012 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a00e:	2303      	movs	r3, #3
 800a010:	e053      	b.n	800a0ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a012:	4b2d      	ldr	r3, [pc, #180]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	f003 020c 	and.w	r2, r3, #12
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	429a      	cmp	r2, r3
 800a022:	d1eb      	bne.n	8009ffc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a024:	4b27      	ldr	r3, [pc, #156]	; (800a0c4 <HAL_RCC_ClockConfig+0x1c4>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 030f 	and.w	r3, r3, #15
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d210      	bcs.n	800a054 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a032:	4b24      	ldr	r3, [pc, #144]	; (800a0c4 <HAL_RCC_ClockConfig+0x1c4>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f023 020f 	bic.w	r2, r3, #15
 800a03a:	4922      	ldr	r1, [pc, #136]	; (800a0c4 <HAL_RCC_ClockConfig+0x1c4>)
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	4313      	orrs	r3, r2
 800a040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a042:	4b20      	ldr	r3, [pc, #128]	; (800a0c4 <HAL_RCC_ClockConfig+0x1c4>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 030f 	and.w	r3, r3, #15
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d001      	beq.n	800a054 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	e032      	b.n	800a0ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 0304 	and.w	r3, r3, #4
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d008      	beq.n	800a072 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a060:	4b19      	ldr	r3, [pc, #100]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	4916      	ldr	r1, [pc, #88]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 800a06e:	4313      	orrs	r3, r2
 800a070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0308 	and.w	r3, r3, #8
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d009      	beq.n	800a092 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a07e:	4b12      	ldr	r3, [pc, #72]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	00db      	lsls	r3, r3, #3
 800a08c:	490e      	ldr	r1, [pc, #56]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 800a08e:	4313      	orrs	r3, r2
 800a090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a092:	f000 f821 	bl	800a0d8 <HAL_RCC_GetSysClockFreq>
 800a096:	4602      	mov	r2, r0
 800a098:	4b0b      	ldr	r3, [pc, #44]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	091b      	lsrs	r3, r3, #4
 800a09e:	f003 030f 	and.w	r3, r3, #15
 800a0a2:	490a      	ldr	r1, [pc, #40]	; (800a0cc <HAL_RCC_ClockConfig+0x1cc>)
 800a0a4:	5ccb      	ldrb	r3, [r1, r3]
 800a0a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a0aa:	4a09      	ldr	r2, [pc, #36]	; (800a0d0 <HAL_RCC_ClockConfig+0x1d0>)
 800a0ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a0ae:	4b09      	ldr	r3, [pc, #36]	; (800a0d4 <HAL_RCC_ClockConfig+0x1d4>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fc fc20 	bl	80068f8 <HAL_InitTick>

  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	40023c00 	.word	0x40023c00
 800a0c8:	40023800 	.word	0x40023800
 800a0cc:	080d3e7c 	.word	0x080d3e7c
 800a0d0:	20000080 	.word	0x20000080
 800a0d4:	200000c8 	.word	0x200000c8

0800a0d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0dc:	b090      	sub	sp, #64	; 0x40
 800a0de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	637b      	str	r3, [r7, #52]	; 0x34
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a0f0:	4b59      	ldr	r3, [pc, #356]	; (800a258 <HAL_RCC_GetSysClockFreq+0x180>)
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	f003 030c 	and.w	r3, r3, #12
 800a0f8:	2b08      	cmp	r3, #8
 800a0fa:	d00d      	beq.n	800a118 <HAL_RCC_GetSysClockFreq+0x40>
 800a0fc:	2b08      	cmp	r3, #8
 800a0fe:	f200 80a1 	bhi.w	800a244 <HAL_RCC_GetSysClockFreq+0x16c>
 800a102:	2b00      	cmp	r3, #0
 800a104:	d002      	beq.n	800a10c <HAL_RCC_GetSysClockFreq+0x34>
 800a106:	2b04      	cmp	r3, #4
 800a108:	d003      	beq.n	800a112 <HAL_RCC_GetSysClockFreq+0x3a>
 800a10a:	e09b      	b.n	800a244 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a10c:	4b53      	ldr	r3, [pc, #332]	; (800a25c <HAL_RCC_GetSysClockFreq+0x184>)
 800a10e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a110:	e09b      	b.n	800a24a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a112:	4b53      	ldr	r3, [pc, #332]	; (800a260 <HAL_RCC_GetSysClockFreq+0x188>)
 800a114:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a116:	e098      	b.n	800a24a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a118:	4b4f      	ldr	r3, [pc, #316]	; (800a258 <HAL_RCC_GetSysClockFreq+0x180>)
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a120:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a122:	4b4d      	ldr	r3, [pc, #308]	; (800a258 <HAL_RCC_GetSysClockFreq+0x180>)
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d028      	beq.n	800a180 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a12e:	4b4a      	ldr	r3, [pc, #296]	; (800a258 <HAL_RCC_GetSysClockFreq+0x180>)
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	099b      	lsrs	r3, r3, #6
 800a134:	2200      	movs	r2, #0
 800a136:	623b      	str	r3, [r7, #32]
 800a138:	627a      	str	r2, [r7, #36]	; 0x24
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a140:	2100      	movs	r1, #0
 800a142:	4b47      	ldr	r3, [pc, #284]	; (800a260 <HAL_RCC_GetSysClockFreq+0x188>)
 800a144:	fb03 f201 	mul.w	r2, r3, r1
 800a148:	2300      	movs	r3, #0
 800a14a:	fb00 f303 	mul.w	r3, r0, r3
 800a14e:	4413      	add	r3, r2
 800a150:	4a43      	ldr	r2, [pc, #268]	; (800a260 <HAL_RCC_GetSysClockFreq+0x188>)
 800a152:	fba0 1202 	umull	r1, r2, r0, r2
 800a156:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a158:	460a      	mov	r2, r1
 800a15a:	62ba      	str	r2, [r7, #40]	; 0x28
 800a15c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a15e:	4413      	add	r3, r2
 800a160:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a164:	2200      	movs	r2, #0
 800a166:	61bb      	str	r3, [r7, #24]
 800a168:	61fa      	str	r2, [r7, #28]
 800a16a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a16e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a172:	f7f6 fd89 	bl	8000c88 <__aeabi_uldivmod>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4613      	mov	r3, r2
 800a17c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a17e:	e053      	b.n	800a228 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a180:	4b35      	ldr	r3, [pc, #212]	; (800a258 <HAL_RCC_GetSysClockFreq+0x180>)
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	099b      	lsrs	r3, r3, #6
 800a186:	2200      	movs	r2, #0
 800a188:	613b      	str	r3, [r7, #16]
 800a18a:	617a      	str	r2, [r7, #20]
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a192:	f04f 0b00 	mov.w	fp, #0
 800a196:	4652      	mov	r2, sl
 800a198:	465b      	mov	r3, fp
 800a19a:	f04f 0000 	mov.w	r0, #0
 800a19e:	f04f 0100 	mov.w	r1, #0
 800a1a2:	0159      	lsls	r1, r3, #5
 800a1a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a1a8:	0150      	lsls	r0, r2, #5
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	ebb2 080a 	subs.w	r8, r2, sl
 800a1b2:	eb63 090b 	sbc.w	r9, r3, fp
 800a1b6:	f04f 0200 	mov.w	r2, #0
 800a1ba:	f04f 0300 	mov.w	r3, #0
 800a1be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a1c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a1c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a1ca:	ebb2 0408 	subs.w	r4, r2, r8
 800a1ce:	eb63 0509 	sbc.w	r5, r3, r9
 800a1d2:	f04f 0200 	mov.w	r2, #0
 800a1d6:	f04f 0300 	mov.w	r3, #0
 800a1da:	00eb      	lsls	r3, r5, #3
 800a1dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a1e0:	00e2      	lsls	r2, r4, #3
 800a1e2:	4614      	mov	r4, r2
 800a1e4:	461d      	mov	r5, r3
 800a1e6:	eb14 030a 	adds.w	r3, r4, sl
 800a1ea:	603b      	str	r3, [r7, #0]
 800a1ec:	eb45 030b 	adc.w	r3, r5, fp
 800a1f0:	607b      	str	r3, [r7, #4]
 800a1f2:	f04f 0200 	mov.w	r2, #0
 800a1f6:	f04f 0300 	mov.w	r3, #0
 800a1fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a1fe:	4629      	mov	r1, r5
 800a200:	028b      	lsls	r3, r1, #10
 800a202:	4621      	mov	r1, r4
 800a204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a208:	4621      	mov	r1, r4
 800a20a:	028a      	lsls	r2, r1, #10
 800a20c:	4610      	mov	r0, r2
 800a20e:	4619      	mov	r1, r3
 800a210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a212:	2200      	movs	r2, #0
 800a214:	60bb      	str	r3, [r7, #8]
 800a216:	60fa      	str	r2, [r7, #12]
 800a218:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a21c:	f7f6 fd34 	bl	8000c88 <__aeabi_uldivmod>
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	4613      	mov	r3, r2
 800a226:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a228:	4b0b      	ldr	r3, [pc, #44]	; (800a258 <HAL_RCC_GetSysClockFreq+0x180>)
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	0c1b      	lsrs	r3, r3, #16
 800a22e:	f003 0303 	and.w	r3, r3, #3
 800a232:	3301      	adds	r3, #1
 800a234:	005b      	lsls	r3, r3, #1
 800a236:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800a238:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a240:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a242:	e002      	b.n	800a24a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a244:	4b05      	ldr	r3, [pc, #20]	; (800a25c <HAL_RCC_GetSysClockFreq+0x184>)
 800a246:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3740      	adds	r7, #64	; 0x40
 800a250:	46bd      	mov	sp, r7
 800a252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a256:	bf00      	nop
 800a258:	40023800 	.word	0x40023800
 800a25c:	00f42400 	.word	0x00f42400
 800a260:	017d7840 	.word	0x017d7840

0800a264 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a264:	b480      	push	{r7}
 800a266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a268:	4b03      	ldr	r3, [pc, #12]	; (800a278 <HAL_RCC_GetHCLKFreq+0x14>)
 800a26a:	681b      	ldr	r3, [r3, #0]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	20000080 	.word	0x20000080

0800a27c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a280:	f7ff fff0 	bl	800a264 <HAL_RCC_GetHCLKFreq>
 800a284:	4602      	mov	r2, r0
 800a286:	4b05      	ldr	r3, [pc, #20]	; (800a29c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	0a9b      	lsrs	r3, r3, #10
 800a28c:	f003 0307 	and.w	r3, r3, #7
 800a290:	4903      	ldr	r1, [pc, #12]	; (800a2a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a292:	5ccb      	ldrb	r3, [r1, r3]
 800a294:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a298:	4618      	mov	r0, r3
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	40023800 	.word	0x40023800
 800a2a0:	080d3e8c 	.word	0x080d3e8c

0800a2a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a2a8:	f7ff ffdc 	bl	800a264 <HAL_RCC_GetHCLKFreq>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	4b05      	ldr	r3, [pc, #20]	; (800a2c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	0b5b      	lsrs	r3, r3, #13
 800a2b4:	f003 0307 	and.w	r3, r3, #7
 800a2b8:	4903      	ldr	r1, [pc, #12]	; (800a2c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a2ba:	5ccb      	ldrb	r3, [r1, r3]
 800a2bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	40023800 	.word	0x40023800
 800a2c8:	080d3e8c 	.word	0x080d3e8c

0800a2cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b088      	sub	sp, #32
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 0301 	and.w	r3, r3, #1
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d012      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a2f4:	4b69      	ldr	r3, [pc, #420]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	4a68      	ldr	r2, [pc, #416]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a2fe:	6093      	str	r3, [r2, #8]
 800a300:	4b66      	ldr	r3, [pc, #408]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a302:	689a      	ldr	r2, [r3, #8]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a308:	4964      	ldr	r1, [pc, #400]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a30a:	4313      	orrs	r3, r2
 800a30c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a312:	2b00      	cmp	r3, #0
 800a314:	d101      	bne.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a316:	2301      	movs	r3, #1
 800a318:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a322:	2b00      	cmp	r3, #0
 800a324:	d017      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a326:	4b5d      	ldr	r3, [pc, #372]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a32c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a334:	4959      	ldr	r1, [pc, #356]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a336:	4313      	orrs	r3, r2
 800a338:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a344:	d101      	bne.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a346:	2301      	movs	r3, #1
 800a348:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a352:	2301      	movs	r3, #1
 800a354:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d017      	beq.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a362:	4b4e      	ldr	r3, [pc, #312]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a368:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a370:	494a      	ldr	r1, [pc, #296]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a372:	4313      	orrs	r3, r2
 800a374:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a380:	d101      	bne.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a382:	2301      	movs	r3, #1
 800a384:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d101      	bne.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a38e:	2301      	movs	r3, #1
 800a390:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d001      	beq.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f003 0320 	and.w	r3, r3, #32
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f000 808b 	beq.w	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a3b0:	4b3a      	ldr	r3, [pc, #232]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b4:	4a39      	ldr	r2, [pc, #228]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a3b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3ba:	6413      	str	r3, [r2, #64]	; 0x40
 800a3bc:	4b37      	ldr	r3, [pc, #220]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3c4:	60bb      	str	r3, [r7, #8]
 800a3c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a3c8:	4b35      	ldr	r3, [pc, #212]	; (800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a34      	ldr	r2, [pc, #208]	; (800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a3ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3d4:	f7fc fad4 	bl	8006980 <HAL_GetTick>
 800a3d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a3da:	e008      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3dc:	f7fc fad0 	bl	8006980 <HAL_GetTick>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	2b64      	cmp	r3, #100	; 0x64
 800a3e8:	d901      	bls.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	e357      	b.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a3ee:	4b2c      	ldr	r3, [pc, #176]	; (800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d0f0      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a3fa:	4b28      	ldr	r3, [pc, #160]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a402:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d035      	beq.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	429a      	cmp	r2, r3
 800a416:	d02e      	beq.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a418:	4b20      	ldr	r3, [pc, #128]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a41a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a41c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a420:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a422:	4b1e      	ldr	r3, [pc, #120]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a426:	4a1d      	ldr	r2, [pc, #116]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a42c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a42e:	4b1b      	ldr	r3, [pc, #108]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a432:	4a1a      	ldr	r2, [pc, #104]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a438:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a43a:	4a18      	ldr	r2, [pc, #96]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a440:	4b16      	ldr	r3, [pc, #88]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a444:	f003 0301 	and.w	r3, r3, #1
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d114      	bne.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a44c:	f7fc fa98 	bl	8006980 <HAL_GetTick>
 800a450:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a452:	e00a      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a454:	f7fc fa94 	bl	8006980 <HAL_GetTick>
 800a458:	4602      	mov	r2, r0
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a462:	4293      	cmp	r3, r2
 800a464:	d901      	bls.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a466:	2303      	movs	r3, #3
 800a468:	e319      	b.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a46a:	4b0c      	ldr	r3, [pc, #48]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a46c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a46e:	f003 0302 	and.w	r3, r3, #2
 800a472:	2b00      	cmp	r3, #0
 800a474:	d0ee      	beq.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a47e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a482:	d111      	bne.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a484:	4b05      	ldr	r3, [pc, #20]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a490:	4b04      	ldr	r3, [pc, #16]	; (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a492:	400b      	ands	r3, r1
 800a494:	4901      	ldr	r1, [pc, #4]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a496:	4313      	orrs	r3, r2
 800a498:	608b      	str	r3, [r1, #8]
 800a49a:	e00b      	b.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a49c:	40023800 	.word	0x40023800
 800a4a0:	40007000 	.word	0x40007000
 800a4a4:	0ffffcff 	.word	0x0ffffcff
 800a4a8:	4baa      	ldr	r3, [pc, #680]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	4aa9      	ldr	r2, [pc, #676]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a4b2:	6093      	str	r3, [r2, #8]
 800a4b4:	4ba7      	ldr	r3, [pc, #668]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4c0:	49a4      	ldr	r1, [pc, #656]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 0310 	and.w	r3, r3, #16
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d010      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4d2:	4ba0      	ldr	r3, [pc, #640]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4d8:	4a9e      	ldr	r2, [pc, #632]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a4e2:	4b9c      	ldr	r3, [pc, #624]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ec:	4999      	ldr	r1, [pc, #612]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00a      	beq.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a500:	4b94      	ldr	r3, [pc, #592]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a506:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a50e:	4991      	ldr	r1, [pc, #580]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a510:	4313      	orrs	r3, r2
 800a512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00a      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a522:	4b8c      	ldr	r3, [pc, #560]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a528:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a530:	4988      	ldr	r1, [pc, #544]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a532:	4313      	orrs	r3, r2
 800a534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00a      	beq.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a544:	4b83      	ldr	r3, [pc, #524]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a54a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a552:	4980      	ldr	r1, [pc, #512]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a554:	4313      	orrs	r3, r2
 800a556:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00a      	beq.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a566:	4b7b      	ldr	r3, [pc, #492]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a56c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a574:	4977      	ldr	r1, [pc, #476]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a576:	4313      	orrs	r3, r2
 800a578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00a      	beq.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a588:	4b72      	ldr	r3, [pc, #456]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a58a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a58e:	f023 0203 	bic.w	r2, r3, #3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a596:	496f      	ldr	r1, [pc, #444]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a598:	4313      	orrs	r3, r2
 800a59a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a5aa:	4b6a      	ldr	r3, [pc, #424]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5b0:	f023 020c 	bic.w	r2, r3, #12
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5b8:	4966      	ldr	r1, [pc, #408]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00a      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a5cc:	4b61      	ldr	r3, [pc, #388]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5da:	495e      	ldr	r1, [pc, #376]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00a      	beq.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a5ee:	4b59      	ldr	r3, [pc, #356]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5fc:	4955      	ldr	r1, [pc, #340]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5fe:	4313      	orrs	r3, r2
 800a600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d00a      	beq.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a610:	4b50      	ldr	r3, [pc, #320]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a616:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a61e:	494d      	ldr	r1, [pc, #308]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a620:	4313      	orrs	r3, r2
 800a622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00a      	beq.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a632:	4b48      	ldr	r3, [pc, #288]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a638:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a640:	4944      	ldr	r1, [pc, #272]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a642:	4313      	orrs	r3, r2
 800a644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00a      	beq.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a654:	4b3f      	ldr	r3, [pc, #252]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a65a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a662:	493c      	ldr	r1, [pc, #240]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a664:	4313      	orrs	r3, r2
 800a666:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00a      	beq.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a676:	4b37      	ldr	r3, [pc, #220]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a67c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a684:	4933      	ldr	r1, [pc, #204]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a686:	4313      	orrs	r3, r2
 800a688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00a      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a698:	4b2e      	ldr	r3, [pc, #184]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a69a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a69e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6a6:	492b      	ldr	r1, [pc, #172]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d011      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a6ba:	4b26      	ldr	r3, [pc, #152]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a6bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6c8:	4922      	ldr	r1, [pc, #136]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6d8:	d101      	bne.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 0308 	and.w	r3, r3, #8
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d001      	beq.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00a      	beq.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a6fa:	4b16      	ldr	r3, [pc, #88]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a6fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a700:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a708:	4912      	ldr	r1, [pc, #72]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a70a:	4313      	orrs	r3, r2
 800a70c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00b      	beq.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a71c:	4b0d      	ldr	r3, [pc, #52]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a71e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a722:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a72c:	4909      	ldr	r1, [pc, #36]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a72e:	4313      	orrs	r3, r2
 800a730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	2b01      	cmp	r3, #1
 800a738:	d006      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a742:	2b00      	cmp	r3, #0
 800a744:	f000 80d9 	beq.w	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a748:	4b02      	ldr	r3, [pc, #8]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a01      	ldr	r2, [pc, #4]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a74e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a752:	e001      	b.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800a754:	40023800 	.word	0x40023800
 800a758:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a75a:	f7fc f911 	bl	8006980 <HAL_GetTick>
 800a75e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a760:	e008      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a762:	f7fc f90d 	bl	8006980 <HAL_GetTick>
 800a766:	4602      	mov	r2, r0
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	2b64      	cmp	r3, #100	; 0x64
 800a76e:	d901      	bls.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	e194      	b.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a774:	4b6c      	ldr	r3, [pc, #432]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1f0      	bne.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f003 0301 	and.w	r3, r3, #1
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d021      	beq.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a790:	2b00      	cmp	r3, #0
 800a792:	d11d      	bne.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a794:	4b64      	ldr	r3, [pc, #400]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a79a:	0c1b      	lsrs	r3, r3, #16
 800a79c:	f003 0303 	and.w	r3, r3, #3
 800a7a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a7a2:	4b61      	ldr	r3, [pc, #388]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7a8:	0e1b      	lsrs	r3, r3, #24
 800a7aa:	f003 030f 	and.w	r3, r3, #15
 800a7ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	019a      	lsls	r2, r3, #6
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	041b      	lsls	r3, r3, #16
 800a7ba:	431a      	orrs	r2, r3
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	061b      	lsls	r3, r3, #24
 800a7c0:	431a      	orrs	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	071b      	lsls	r3, r3, #28
 800a7c8:	4957      	ldr	r1, [pc, #348]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d004      	beq.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7e4:	d00a      	beq.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d02e      	beq.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7fa:	d129      	bne.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a7fc:	4b4a      	ldr	r3, [pc, #296]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a802:	0c1b      	lsrs	r3, r3, #16
 800a804:	f003 0303 	and.w	r3, r3, #3
 800a808:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a80a:	4b47      	ldr	r3, [pc, #284]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a80c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a810:	0f1b      	lsrs	r3, r3, #28
 800a812:	f003 0307 	and.w	r3, r3, #7
 800a816:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	019a      	lsls	r2, r3, #6
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	041b      	lsls	r3, r3, #16
 800a822:	431a      	orrs	r2, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	061b      	lsls	r3, r3, #24
 800a82a:	431a      	orrs	r2, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	071b      	lsls	r3, r3, #28
 800a830:	493d      	ldr	r1, [pc, #244]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a832:	4313      	orrs	r3, r2
 800a834:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a838:	4b3b      	ldr	r3, [pc, #236]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a83a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a83e:	f023 021f 	bic.w	r2, r3, #31
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a846:	3b01      	subs	r3, #1
 800a848:	4937      	ldr	r1, [pc, #220]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a84a:	4313      	orrs	r3, r2
 800a84c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d01d      	beq.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a85c:	4b32      	ldr	r3, [pc, #200]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a85e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a862:	0e1b      	lsrs	r3, r3, #24
 800a864:	f003 030f 	and.w	r3, r3, #15
 800a868:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a86a:	4b2f      	ldr	r3, [pc, #188]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a86c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a870:	0f1b      	lsrs	r3, r3, #28
 800a872:	f003 0307 	and.w	r3, r3, #7
 800a876:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	019a      	lsls	r2, r3, #6
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	041b      	lsls	r3, r3, #16
 800a884:	431a      	orrs	r2, r3
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	061b      	lsls	r3, r3, #24
 800a88a:	431a      	orrs	r2, r3
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	071b      	lsls	r3, r3, #28
 800a890:	4925      	ldr	r1, [pc, #148]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a892:	4313      	orrs	r3, r2
 800a894:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d011      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	019a      	lsls	r2, r3, #6
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	041b      	lsls	r3, r3, #16
 800a8b0:	431a      	orrs	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	061b      	lsls	r3, r3, #24
 800a8b8:	431a      	orrs	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	071b      	lsls	r3, r3, #28
 800a8c0:	4919      	ldr	r1, [pc, #100]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a8c8:	4b17      	ldr	r3, [pc, #92]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a16      	ldr	r2, [pc, #88]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a8ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a8d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8d4:	f7fc f854 	bl	8006980 <HAL_GetTick>
 800a8d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a8da:	e008      	b.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a8dc:	f7fc f850 	bl	8006980 <HAL_GetTick>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	2b64      	cmp	r3, #100	; 0x64
 800a8e8:	d901      	bls.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e0d7      	b.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a8ee:	4b0e      	ldr	r3, [pc, #56]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d0f0      	beq.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	f040 80cd 	bne.w	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a902:	4b09      	ldr	r3, [pc, #36]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a08      	ldr	r2, [pc, #32]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a90c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a90e:	f7fc f837 	bl	8006980 <HAL_GetTick>
 800a912:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a914:	e00a      	b.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a916:	f7fc f833 	bl	8006980 <HAL_GetTick>
 800a91a:	4602      	mov	r2, r0
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	2b64      	cmp	r3, #100	; 0x64
 800a922:	d903      	bls.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a924:	2303      	movs	r3, #3
 800a926:	e0ba      	b.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a928:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a92c:	4b5e      	ldr	r3, [pc, #376]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a938:	d0ed      	beq.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a942:	2b00      	cmp	r3, #0
 800a944:	d003      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d009      	beq.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a956:	2b00      	cmp	r3, #0
 800a958:	d02e      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d12a      	bne.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a962:	4b51      	ldr	r3, [pc, #324]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a968:	0c1b      	lsrs	r3, r3, #16
 800a96a:	f003 0303 	and.w	r3, r3, #3
 800a96e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a970:	4b4d      	ldr	r3, [pc, #308]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a976:	0f1b      	lsrs	r3, r3, #28
 800a978:	f003 0307 	and.w	r3, r3, #7
 800a97c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	019a      	lsls	r2, r3, #6
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	041b      	lsls	r3, r3, #16
 800a988:	431a      	orrs	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	061b      	lsls	r3, r3, #24
 800a990:	431a      	orrs	r2, r3
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	071b      	lsls	r3, r3, #28
 800a996:	4944      	ldr	r1, [pc, #272]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a998:	4313      	orrs	r3, r2
 800a99a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a99e:	4b42      	ldr	r3, [pc, #264]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a9a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	021b      	lsls	r3, r3, #8
 800a9b0:	493d      	ldr	r1, [pc, #244]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d022      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9cc:	d11d      	bne.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a9ce:	4b36      	ldr	r3, [pc, #216]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a9d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d4:	0e1b      	lsrs	r3, r3, #24
 800a9d6:	f003 030f 	and.w	r3, r3, #15
 800a9da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a9dc:	4b32      	ldr	r3, [pc, #200]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a9de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9e2:	0f1b      	lsrs	r3, r3, #28
 800a9e4:	f003 0307 	and.w	r3, r3, #7
 800a9e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	019a      	lsls	r2, r3, #6
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a1b      	ldr	r3, [r3, #32]
 800a9f4:	041b      	lsls	r3, r3, #16
 800a9f6:	431a      	orrs	r2, r3
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	061b      	lsls	r3, r3, #24
 800a9fc:	431a      	orrs	r2, r3
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	071b      	lsls	r3, r3, #28
 800aa02:	4929      	ldr	r1, [pc, #164]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa04:	4313      	orrs	r3, r2
 800aa06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f003 0308 	and.w	r3, r3, #8
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d028      	beq.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800aa16:	4b24      	ldr	r3, [pc, #144]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa1c:	0e1b      	lsrs	r3, r3, #24
 800aa1e:	f003 030f 	and.w	r3, r3, #15
 800aa22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800aa24:	4b20      	ldr	r3, [pc, #128]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa2a:	0c1b      	lsrs	r3, r3, #16
 800aa2c:	f003 0303 	and.w	r3, r3, #3
 800aa30:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	019a      	lsls	r2, r3, #6
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	041b      	lsls	r3, r3, #16
 800aa3c:	431a      	orrs	r2, r3
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	061b      	lsls	r3, r3, #24
 800aa42:	431a      	orrs	r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	69db      	ldr	r3, [r3, #28]
 800aa48:	071b      	lsls	r3, r3, #28
 800aa4a:	4917      	ldr	r1, [pc, #92]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800aa52:	4b15      	ldr	r3, [pc, #84]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa60:	4911      	ldr	r1, [pc, #68]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa62:	4313      	orrs	r3, r2
 800aa64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800aa68:	4b0f      	ldr	r3, [pc, #60]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a0e      	ldr	r2, [pc, #56]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa74:	f7fb ff84 	bl	8006980 <HAL_GetTick>
 800aa78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aa7a:	e008      	b.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800aa7c:	f7fb ff80 	bl	8006980 <HAL_GetTick>
 800aa80:	4602      	mov	r2, r0
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	2b64      	cmp	r3, #100	; 0x64
 800aa88:	d901      	bls.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	e007      	b.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aa8e:	4b06      	ldr	r3, [pc, #24]	; (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa9a:	d1ef      	bne.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3720      	adds	r7, #32
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	40023800 	.word	0x40023800

0800aaac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e071      	b.n	800aba6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	7f5b      	ldrb	r3, [r3, #29]
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d105      	bne.n	800aad8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f7f8 fea6 	bl	8003824 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2202      	movs	r2, #2
 800aadc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	f003 0310 	and.w	r3, r3, #16
 800aae8:	2b10      	cmp	r3, #16
 800aaea:	d053      	beq.n	800ab94 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	22ca      	movs	r2, #202	; 0xca
 800aaf2:	625a      	str	r2, [r3, #36]	; 0x24
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2253      	movs	r2, #83	; 0x53
 800aafa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fa4d 	bl	800af9c <RTC_EnterInitMode>
 800ab02:	4603      	mov	r3, r0
 800ab04:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800ab06:	7bfb      	ldrb	r3, [r7, #15]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d12a      	bne.n	800ab62 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6899      	ldr	r1, [r3, #8]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	4b26      	ldr	r3, [pc, #152]	; (800abb0 <HAL_RTC_Init+0x104>)
 800ab18:	400b      	ands	r3, r1
 800ab1a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6899      	ldr	r1, [r3, #8]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	685a      	ldr	r2, [r3, #4]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	431a      	orrs	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	695b      	ldr	r3, [r3, #20]
 800ab30:	431a      	orrs	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	430a      	orrs	r2, r1
 800ab38:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	68d2      	ldr	r2, [r2, #12]
 800ab42:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6919      	ldr	r1, [r3, #16]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	041a      	lsls	r2, r3, #16
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	430a      	orrs	r2, r1
 800ab56:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 fa56 	bl	800b00a <RTC_ExitInitMode>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ab62:	7bfb      	ldrb	r3, [r7, #15]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d110      	bne.n	800ab8a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f022 0208 	bic.w	r2, r2, #8
 800ab76:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	699a      	ldr	r2, [r3, #24]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	430a      	orrs	r2, r1
 800ab88:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	22ff      	movs	r2, #255	; 0xff
 800ab90:	625a      	str	r2, [r3, #36]	; 0x24
 800ab92:	e001      	b.n	800ab98 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800ab94:	2300      	movs	r3, #0
 800ab96:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d102      	bne.n	800aba4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2201      	movs	r2, #1
 800aba2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800aba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	ff8fffbf 	.word	0xff8fffbf

0800abb4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800abb4:	b590      	push	{r4, r7, lr}
 800abb6:	b087      	sub	sp, #28
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800abc0:	2300      	movs	r3, #0
 800abc2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	7f1b      	ldrb	r3, [r3, #28]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d101      	bne.n	800abd0 <HAL_RTC_SetTime+0x1c>
 800abcc:	2302      	movs	r3, #2
 800abce:	e085      	b.n	800acdc <HAL_RTC_SetTime+0x128>
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2201      	movs	r2, #1
 800abd4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2202      	movs	r2, #2
 800abda:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d126      	bne.n	800ac30 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abec:	2b00      	cmp	r3, #0
 800abee:	d102      	bne.n	800abf6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	2200      	movs	r2, #0
 800abf4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 fa2a 	bl	800b054 <RTC_ByteToBcd2>
 800ac00:	4603      	mov	r3, r0
 800ac02:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	785b      	ldrb	r3, [r3, #1]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f000 fa23 	bl	800b054 <RTC_ByteToBcd2>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ac12:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	789b      	ldrb	r3, [r3, #2]
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f000 fa1b 	bl	800b054 <RTC_ByteToBcd2>
 800ac1e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ac20:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	78db      	ldrb	r3, [r3, #3]
 800ac28:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	617b      	str	r3, [r7, #20]
 800ac2e:	e018      	b.n	800ac62 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d102      	bne.n	800ac44 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	2200      	movs	r2, #0
 800ac42:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	785b      	ldrb	r3, [r3, #1]
 800ac4e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ac50:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800ac52:	68ba      	ldr	r2, [r7, #8]
 800ac54:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ac56:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	78db      	ldrb	r3, [r3, #3]
 800ac5c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	22ca      	movs	r2, #202	; 0xca
 800ac68:	625a      	str	r2, [r3, #36]	; 0x24
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2253      	movs	r2, #83	; 0x53
 800ac70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	f000 f992 	bl	800af9c <RTC_EnterInitMode>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ac7c:	7cfb      	ldrb	r3, [r7, #19]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d11e      	bne.n	800acc0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	6979      	ldr	r1, [r7, #20]
 800ac88:	4b16      	ldr	r3, [pc, #88]	; (800ace4 <HAL_RTC_SetTime+0x130>)
 800ac8a:	400b      	ands	r3, r1
 800ac8c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	689a      	ldr	r2, [r3, #8]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ac9c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	6899      	ldr	r1, [r3, #8]
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	68da      	ldr	r2, [r3, #12]
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	431a      	orrs	r2, r3
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	430a      	orrs	r2, r1
 800acb4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f000 f9a7 	bl	800b00a <RTC_ExitInitMode>
 800acbc:	4603      	mov	r3, r0
 800acbe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800acc0:	7cfb      	ldrb	r3, [r7, #19]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d102      	bne.n	800accc <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2201      	movs	r2, #1
 800acca:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	22ff      	movs	r2, #255	; 0xff
 800acd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2200      	movs	r2, #0
 800acd8:	771a      	strb	r2, [r3, #28]

  return status;
 800acda:	7cfb      	ldrb	r3, [r7, #19]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	371c      	adds	r7, #28
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd90      	pop	{r4, r7, pc}
 800ace4:	007f7f7f 	.word	0x007f7f7f

0800ace8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800acf4:	2300      	movs	r3, #0
 800acf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	4b22      	ldr	r3, [pc, #136]	; (800ada0 <HAL_RTC_GetTime+0xb8>)
 800ad18:	4013      	ands	r3, r2
 800ad1a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	0c1b      	lsrs	r3, r3, #16
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	0a1b      	lsrs	r3, r3, #8
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	0d9b      	lsrs	r3, r3, #22
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	f003 0301 	and.w	r3, r3, #1
 800ad54:	b2da      	uxtb	r2, r3
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d11a      	bne.n	800ad96 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	4618      	mov	r0, r3
 800ad66:	f000 f993 	bl	800b090 <RTC_Bcd2ToByte>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	785b      	ldrb	r3, [r3, #1]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f000 f98a 	bl	800b090 <RTC_Bcd2ToByte>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	461a      	mov	r2, r3
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	789b      	ldrb	r3, [r3, #2]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 f981 	bl	800b090 <RTC_Bcd2ToByte>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	461a      	mov	r2, r3
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3718      	adds	r7, #24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	007f7f7f 	.word	0x007f7f7f

0800ada4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ada4:	b590      	push	{r4, r7, lr}
 800ada6:	b087      	sub	sp, #28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800adb0:	2300      	movs	r3, #0
 800adb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	7f1b      	ldrb	r3, [r3, #28]
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d101      	bne.n	800adc0 <HAL_RTC_SetDate+0x1c>
 800adbc:	2302      	movs	r3, #2
 800adbe:	e06f      	b.n	800aea0 <HAL_RTC_SetDate+0xfc>
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2201      	movs	r2, #1
 800adc4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2202      	movs	r2, #2
 800adca:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10e      	bne.n	800adf0 <HAL_RTC_SetDate+0x4c>
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	785b      	ldrb	r3, [r3, #1]
 800add6:	f003 0310 	and.w	r3, r3, #16
 800adda:	2b00      	cmp	r3, #0
 800addc:	d008      	beq.n	800adf0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	785b      	ldrb	r3, [r3, #1]
 800ade2:	f023 0310 	bic.w	r3, r3, #16
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	330a      	adds	r3, #10
 800adea:	b2da      	uxtb	r2, r3
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d11c      	bne.n	800ae30 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	78db      	ldrb	r3, [r3, #3]
 800adfa:	4618      	mov	r0, r3
 800adfc:	f000 f92a 	bl	800b054 <RTC_ByteToBcd2>
 800ae00:	4603      	mov	r3, r0
 800ae02:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	785b      	ldrb	r3, [r3, #1]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f000 f923 	bl	800b054 <RTC_ByteToBcd2>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ae12:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	789b      	ldrb	r3, [r3, #2]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f000 f91b 	bl	800b054 <RTC_ByteToBcd2>
 800ae1e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ae20:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	617b      	str	r3, [r7, #20]
 800ae2e:	e00e      	b.n	800ae4e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	78db      	ldrb	r3, [r3, #3]
 800ae34:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	785b      	ldrb	r3, [r3, #1]
 800ae3a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ae3c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800ae3e:	68ba      	ldr	r2, [r7, #8]
 800ae40:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ae42:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	22ca      	movs	r2, #202	; 0xca
 800ae54:	625a      	str	r2, [r3, #36]	; 0x24
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2253      	movs	r2, #83	; 0x53
 800ae5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ae5e:	68f8      	ldr	r0, [r7, #12]
 800ae60:	f000 f89c 	bl	800af9c <RTC_EnterInitMode>
 800ae64:	4603      	mov	r3, r0
 800ae66:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ae68:	7cfb      	ldrb	r3, [r7, #19]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10a      	bne.n	800ae84 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	6979      	ldr	r1, [r7, #20]
 800ae74:	4b0c      	ldr	r3, [pc, #48]	; (800aea8 <HAL_RTC_SetDate+0x104>)
 800ae76:	400b      	ands	r3, r1
 800ae78:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f000 f8c5 	bl	800b00a <RTC_ExitInitMode>
 800ae80:	4603      	mov	r3, r0
 800ae82:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ae84:	7cfb      	ldrb	r3, [r7, #19]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d102      	bne.n	800ae90 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	22ff      	movs	r2, #255	; 0xff
 800ae96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	771a      	strb	r2, [r3, #28]

  return status;
 800ae9e:	7cfb      	ldrb	r3, [r7, #19]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	371c      	adds	r7, #28
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd90      	pop	{r4, r7, pc}
 800aea8:	00ffff3f 	.word	0x00ffff3f

0800aeac <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	685a      	ldr	r2, [r3, #4]
 800aec2:	4b21      	ldr	r3, [pc, #132]	; (800af48 <HAL_RTC_GetDate+0x9c>)
 800aec4:	4013      	ands	r3, r2
 800aec6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	0c1b      	lsrs	r3, r3, #16
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	0a1b      	lsrs	r3, r3, #8
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	f003 031f 	and.w	r3, r3, #31
 800aedc:	b2da      	uxtb	r2, r3
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aeea:	b2da      	uxtb	r2, r3
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	0b5b      	lsrs	r3, r3, #13
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	f003 0307 	and.w	r3, r3, #7
 800aefa:	b2da      	uxtb	r2, r3
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d11a      	bne.n	800af3c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	78db      	ldrb	r3, [r3, #3]
 800af0a:	4618      	mov	r0, r3
 800af0c:	f000 f8c0 	bl	800b090 <RTC_Bcd2ToByte>
 800af10:	4603      	mov	r3, r0
 800af12:	461a      	mov	r2, r3
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	785b      	ldrb	r3, [r3, #1]
 800af1c:	4618      	mov	r0, r3
 800af1e:	f000 f8b7 	bl	800b090 <RTC_Bcd2ToByte>
 800af22:	4603      	mov	r3, r0
 800af24:	461a      	mov	r2, r3
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	789b      	ldrb	r3, [r3, #2]
 800af2e:	4618      	mov	r0, r3
 800af30:	f000 f8ae 	bl	800b090 <RTC_Bcd2ToByte>
 800af34:	4603      	mov	r3, r0
 800af36:	461a      	mov	r2, r3
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3718      	adds	r7, #24
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	00ffff3f 	.word	0x00ffff3f

0800af4c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800af54:	2300      	movs	r3, #0
 800af56:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68da      	ldr	r2, [r3, #12]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800af66:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800af68:	f7fb fd0a 	bl	8006980 <HAL_GetTick>
 800af6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800af6e:	e009      	b.n	800af84 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800af70:	f7fb fd06 	bl	8006980 <HAL_GetTick>
 800af74:	4602      	mov	r2, r0
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	1ad3      	subs	r3, r2, r3
 800af7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af7e:	d901      	bls.n	800af84 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800af80:	2303      	movs	r3, #3
 800af82:	e007      	b.n	800af94 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	f003 0320 	and.w	r3, r3, #32
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d0ee      	beq.n	800af70 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800afa4:	2300      	movs	r3, #0
 800afa6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800afa8:	2300      	movs	r3, #0
 800afaa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d122      	bne.n	800b000 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68da      	ldr	r2, [r3, #12]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800afc8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800afca:	f7fb fcd9 	bl	8006980 <HAL_GetTick>
 800afce:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800afd0:	e00c      	b.n	800afec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800afd2:	f7fb fcd5 	bl	8006980 <HAL_GetTick>
 800afd6:	4602      	mov	r2, r0
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800afe0:	d904      	bls.n	800afec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2204      	movs	r2, #4
 800afe6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800afe8:	2301      	movs	r3, #1
 800afea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d102      	bne.n	800b000 <RTC_EnterInitMode+0x64>
 800affa:	7bfb      	ldrb	r3, [r7, #15]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d1e8      	bne.n	800afd2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b000:	7bfb      	ldrb	r3, [r7, #15]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b084      	sub	sp, #16
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b012:	2300      	movs	r3, #0
 800b014:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68da      	ldr	r2, [r3, #12]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b024:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	f003 0320 	and.w	r3, r3, #32
 800b030:	2b00      	cmp	r3, #0
 800b032:	d10a      	bne.n	800b04a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f7ff ff89 	bl	800af4c <HAL_RTC_WaitForSynchro>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d004      	beq.n	800b04a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2204      	movs	r2, #4
 800b044:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800b04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b05e:	2300      	movs	r3, #0
 800b060:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800b062:	e005      	b.n	800b070 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	3301      	adds	r3, #1
 800b068:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800b06a:	79fb      	ldrb	r3, [r7, #7]
 800b06c:	3b0a      	subs	r3, #10
 800b06e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800b070:	79fb      	ldrb	r3, [r7, #7]
 800b072:	2b09      	cmp	r3, #9
 800b074:	d8f6      	bhi.n	800b064 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	011b      	lsls	r3, r3, #4
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	79fb      	ldrb	r3, [r7, #7]
 800b080:	4313      	orrs	r3, r2
 800b082:	b2db      	uxtb	r3, r3
}
 800b084:	4618      	mov	r0, r3
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	4603      	mov	r3, r0
 800b098:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800b09a:	2300      	movs	r3, #0
 800b09c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800b09e:	79fb      	ldrb	r3, [r7, #7]
 800b0a0:	091b      	lsrs	r3, r3, #4
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	005b      	lsls	r3, r3, #1
 800b0ae:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	b2da      	uxtb	r2, r3
 800b0b4:	79fb      	ldrb	r3, [r7, #7]
 800b0b6:	f003 030f 	and.w	r3, r3, #15
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	4413      	add	r3, r2
 800b0be:	b2db      	uxtb	r3, r3
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3714      	adds	r7, #20
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e022      	b.n	800b124 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d105      	bne.n	800b0f6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f7f8 fbe5 	bl	80038c0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2203      	movs	r2, #3
 800b0fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f814 	bl	800b12c <HAL_SD_InitCard>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	e00a      	b.n	800b124 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b12c:	b5b0      	push	{r4, r5, r7, lr}
 800b12e:	b08e      	sub	sp, #56	; 0x38
 800b130:	af04      	add	r7, sp, #16
 800b132:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b134:	2300      	movs	r3, #0
 800b136:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800b138:	2300      	movs	r3, #0
 800b13a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b13c:	2300      	movs	r3, #0
 800b13e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b140:	2300      	movs	r3, #0
 800b142:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b144:	2300      	movs	r3, #0
 800b146:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800b148:	2376      	movs	r3, #118	; 0x76
 800b14a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681d      	ldr	r5, [r3, #0]
 800b150:	466c      	mov	r4, sp
 800b152:	f107 0314 	add.w	r3, r7, #20
 800b156:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b15a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b15e:	f107 0308 	add.w	r3, r7, #8
 800b162:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b164:	4628      	mov	r0, r5
 800b166:	f002 ff0f 	bl	800df88 <SDMMC_Init>
 800b16a:	4603      	mov	r3, r0
 800b16c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b174:	2b00      	cmp	r3, #0
 800b176:	d001      	beq.n	800b17c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	e059      	b.n	800b230 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	685a      	ldr	r2, [r3, #4]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b18a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4618      	mov	r0, r3
 800b192:	f002 ff43 	bl	800e01c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	685a      	ldr	r2, [r3, #4]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1a4:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800b1a6:	2002      	movs	r0, #2
 800b1a8:	f7fb fbf6 	bl	8006998 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 ff59 	bl	800c064 <SD_PowerON>
 800b1b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1b4:	6a3b      	ldr	r3, [r7, #32]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00b      	beq.n	800b1d2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2201      	movs	r2, #1
 800b1be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1c6:	6a3b      	ldr	r3, [r7, #32]
 800b1c8:	431a      	orrs	r2, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e02e      	b.n	800b230 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fe78 	bl	800bec8 <SD_InitCard>
 800b1d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1da:	6a3b      	ldr	r3, [r7, #32]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d00b      	beq.n	800b1f8 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1ec:	6a3b      	ldr	r3, [r7, #32]
 800b1ee:	431a      	orrs	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e01b      	b.n	800b230 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b200:	4618      	mov	r0, r3
 800b202:	f002 ff9d 	bl	800e140 <SDMMC_CmdBlockLength>
 800b206:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00f      	beq.n	800b22e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a09      	ldr	r2, [pc, #36]	; (800b238 <HAL_SD_InitCard+0x10c>)
 800b214:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b21a:	6a3b      	ldr	r3, [r7, #32]
 800b21c:	431a      	orrs	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2201      	movs	r2, #1
 800b226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	e000      	b.n	800b230 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3728      	adds	r7, #40	; 0x28
 800b234:	46bd      	mov	sp, r7
 800b236:	bdb0      	pop	{r4, r5, r7, pc}
 800b238:	004005ff 	.word	0x004005ff

0800b23c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b08c      	sub	sp, #48	; 0x30
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
 800b248:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d107      	bne.n	800b264 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b258:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	e0c3      	b.n	800b3ec <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	f040 80bc 	bne.w	800b3ea <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2200      	movs	r2, #0
 800b276:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	441a      	add	r2, r3
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b282:	429a      	cmp	r2, r3
 800b284:	d907      	bls.n	800b296 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b28a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b292:	2301      	movs	r3, #1
 800b294:	e0aa      	b.n	800b3ec <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2203      	movs	r2, #3
 800b29a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800b2b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ba:	4a4e      	ldr	r2, [pc, #312]	; (800b3f4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800b2bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c2:	4a4d      	ldr	r2, [pc, #308]	; (800b3f8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800b2c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e6:	689a      	ldr	r2, [r3, #8]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	430a      	orrs	r2, r1
 800b2f0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	3380      	adds	r3, #128	; 0x80
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	025b      	lsls	r3, r3, #9
 800b304:	089b      	lsrs	r3, r3, #2
 800b306:	f7fc f983 	bl	8007610 <HAL_DMA_Start_IT>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d017      	beq.n	800b340 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800b31e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a35      	ldr	r2, [pc, #212]	; (800b3fc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b326:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b32c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	e055      	b.n	800b3ec <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f042 0208 	orr.w	r2, r2, #8
 800b34e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b354:	2b01      	cmp	r3, #1
 800b356:	d002      	beq.n	800b35e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800b358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35a:	025b      	lsls	r3, r3, #9
 800b35c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b35e:	f04f 33ff 	mov.w	r3, #4294967295
 800b362:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	025b      	lsls	r3, r3, #9
 800b368:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b36a:	2390      	movs	r3, #144	; 0x90
 800b36c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b36e:	2302      	movs	r3, #2
 800b370:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b372:	2300      	movs	r3, #0
 800b374:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b376:	2301      	movs	r3, #1
 800b378:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f107 0210 	add.w	r2, r7, #16
 800b382:	4611      	mov	r1, r2
 800b384:	4618      	mov	r0, r3
 800b386:	f002 feaf 	bl	800e0e8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d90a      	bls.n	800b3a6 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2282      	movs	r2, #130	; 0x82
 800b394:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b39c:	4618      	mov	r0, r3
 800b39e:	f002 ff13 	bl	800e1c8 <SDMMC_CmdReadMultiBlock>
 800b3a2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b3a4:	e009      	b.n	800b3ba <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2281      	movs	r2, #129	; 0x81
 800b3aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f002 fee6 	bl	800e184 <SDMMC_CmdReadSingleBlock>
 800b3b8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d012      	beq.n	800b3e6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a0d      	ldr	r2, [pc, #52]	; (800b3fc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b3c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ce:	431a      	orrs	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e002      	b.n	800b3ec <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	e000      	b.n	800b3ec <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800b3ea:	2302      	movs	r3, #2
  }
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3730      	adds	r7, #48	; 0x30
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	0800bcd7 	.word	0x0800bcd7
 800b3f8:	0800bd49 	.word	0x0800bd49
 800b3fc:	004005ff 	.word	0x004005ff

0800b400 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b08c      	sub	sp, #48	; 0x30
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	607a      	str	r2, [r7, #4]
 800b40c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d107      	bne.n	800b428 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b41c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b424:	2301      	movs	r3, #1
 800b426:	e0c6      	b.n	800b5b6 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	2b01      	cmp	r3, #1
 800b432:	f040 80bf 	bne.w	800b5b4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2200      	movs	r2, #0
 800b43a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b43c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	441a      	add	r2, r3
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b446:	429a      	cmp	r2, r3
 800b448:	d907      	bls.n	800b45a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b456:	2301      	movs	r3, #1
 800b458:	e0ad      	b.n	800b5b6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2203      	movs	r2, #3
 800b45e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2200      	movs	r2, #0
 800b468:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f042 021a 	orr.w	r2, r2, #26
 800b478:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b47e:	4a50      	ldr	r2, [pc, #320]	; (800b5c0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800b480:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b486:	4a4f      	ldr	r2, [pc, #316]	; (800b5c4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800b488:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b48e:	2200      	movs	r2, #0
 800b490:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b496:	2b01      	cmp	r3, #1
 800b498:	d002      	beq.n	800b4a0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800b49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49c:	025b      	lsls	r3, r3, #9
 800b49e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d90a      	bls.n	800b4bc <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	22a0      	movs	r2, #160	; 0xa0
 800b4aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f002 fecc 	bl	800e250 <SDMMC_CmdWriteMultiBlock>
 800b4b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b4ba:	e009      	b.n	800b4d0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2290      	movs	r2, #144	; 0x90
 800b4c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f002 fe9f 	bl	800e20c <SDMMC_CmdWriteSingleBlock>
 800b4ce:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d012      	beq.n	800b4fc <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a3b      	ldr	r2, [pc, #236]	; (800b5c8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b4dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e4:	431a      	orrs	r2, r3
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e05c      	b.n	800b5b6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f042 0208 	orr.w	r2, r2, #8
 800b50a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b510:	2240      	movs	r2, #64	; 0x40
 800b512:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b524:	689a      	ldr	r2, [r3, #8]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	430a      	orrs	r2, r1
 800b52e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b534:	68b9      	ldr	r1, [r7, #8]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3380      	adds	r3, #128	; 0x80
 800b53c:	461a      	mov	r2, r3
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	025b      	lsls	r3, r3, #9
 800b542:	089b      	lsrs	r3, r3, #2
 800b544:	f7fc f864 	bl	8007610 <HAL_DMA_Start_IT>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d01a      	beq.n	800b584 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f022 021a 	bic.w	r2, r2, #26
 800b55c:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a19      	ldr	r2, [pc, #100]	; (800b5c8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b564:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2201      	movs	r2, #1
 800b576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	e018      	b.n	800b5b6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b584:	f04f 33ff 	mov.w	r3, #4294967295
 800b588:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	025b      	lsls	r3, r3, #9
 800b58e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b590:	2390      	movs	r3, #144	; 0x90
 800b592:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b594:	2300      	movs	r3, #0
 800b596:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b598:	2300      	movs	r3, #0
 800b59a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b59c:	2301      	movs	r3, #1
 800b59e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f107 0210 	add.w	r2, r7, #16
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f002 fd9c 	bl	800e0e8 <SDMMC_ConfigData>

      return HAL_OK;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	e000      	b.n	800b5b6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800b5b4:	2302      	movs	r3, #2
  }
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3730      	adds	r7, #48	; 0x30
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	0800bcad 	.word	0x0800bcad
 800b5c4:	0800bd49 	.word	0x0800bd49
 800b5c8:	004005ff 	.word	0x004005ff

0800b5cc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d008      	beq.n	800b5fa <HAL_SD_IRQHandler+0x2e>
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f003 0308 	and.w	r3, r3, #8
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d003      	beq.n	800b5fa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fdec 	bl	800c1d0 <SD_Read_IT>
 800b5f8:	e15a      	b.n	800b8b0 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b604:	2b00      	cmp	r3, #0
 800b606:	f000 808d 	beq.w	800b724 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b612:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	4b9a      	ldr	r3, [pc, #616]	; (800b888 <HAL_SD_IRQHandler+0x2bc>)
 800b620:	400b      	ands	r3, r1
 800b622:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f022 0201 	bic.w	r2, r2, #1
 800b632:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f003 0308 	and.w	r3, r3, #8
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d039      	beq.n	800b6b2 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f003 0302 	and.w	r3, r3, #2
 800b644:	2b00      	cmp	r3, #0
 800b646:	d104      	bne.n	800b652 <HAL_SD_IRQHandler+0x86>
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f003 0320 	and.w	r3, r3, #32
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d011      	beq.n	800b676 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4618      	mov	r0, r3
 800b658:	f002 fe1c 	bl	800e294 <SDMMC_CmdStopTransfer>
 800b65c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d008      	beq.n	800b676 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	431a      	orrs	r2, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 f921 	bl	800b8b8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f240 523a 	movw	r2, #1338	; 0x53a
 800b67e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f003 0301 	and.w	r3, r3, #1
 800b694:	2b00      	cmp	r3, #0
 800b696:	d104      	bne.n	800b6a2 <HAL_SD_IRQHandler+0xd6>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f003 0302 	and.w	r3, r3, #2
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d003      	beq.n	800b6aa <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f003 fa3a 	bl	800eb1c <HAL_SD_RxCpltCallback>
 800b6a8:	e102      	b.n	800b8b0 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f003 fa2c 	bl	800eb08 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b6b0:	e0fe      	b.n	800b8b0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 80f9 	beq.w	800b8b0 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f003 0320 	and.w	r3, r3, #32
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d011      	beq.n	800b6ec <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f002 fde1 	bl	800e294 <SDMMC_CmdStopTransfer>
 800b6d2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d008      	beq.n	800b6ec <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	431a      	orrs	r2, r3
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f8e6 	bl	800b8b8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f003 0301 	and.w	r3, r3, #1
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f040 80dc 	bne.w	800b8b0 <HAL_SD_IRQHandler+0x2e4>
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f003 0302 	and.w	r3, r3, #2
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f040 80d6 	bne.w	800b8b0 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f022 0208 	bic.w	r2, r2, #8
 800b712:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2201      	movs	r2, #1
 800b718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f003 f9f3 	bl	800eb08 <HAL_SD_TxCpltCallback>
}
 800b722:	e0c5      	b.n	800b8b0 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b72a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d008      	beq.n	800b744 <HAL_SD_IRQHandler+0x178>
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f003 0308 	and.w	r3, r3, #8
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d003      	beq.n	800b744 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fd98 	bl	800c272 <SD_Write_IT>
 800b742:	e0b5      	b.n	800b8b0 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b74a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800b74e:	2b00      	cmp	r3, #0
 800b750:	f000 80ae 	beq.w	800b8b0 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b75a:	f003 0302 	and.w	r3, r3, #2
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d005      	beq.n	800b76e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b766:	f043 0202 	orr.w	r2, r3, #2
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b774:	f003 0308 	and.w	r3, r3, #8
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d005      	beq.n	800b788 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b780:	f043 0208 	orr.w	r2, r3, #8
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b78e:	f003 0320 	and.w	r3, r3, #32
 800b792:	2b00      	cmp	r3, #0
 800b794:	d005      	beq.n	800b7a2 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b79a:	f043 0220 	orr.w	r2, r3, #32
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a8:	f003 0310 	and.w	r3, r3, #16
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d005      	beq.n	800b7bc <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b4:	f043 0210 	orr.w	r2, r3, #16
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f240 523a 	movw	r2, #1338	; 0x53a
 800b7c4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b7d4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f002 fd5a 	bl	800e294 <SDMMC_CmdStopTransfer>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e6:	431a      	orrs	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f003 0308 	and.w	r3, r3, #8
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00a      	beq.n	800b80c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f857 	bl	800b8b8 <HAL_SD_ErrorCallback>
}
 800b80a:	e051      	b.n	800b8b0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b812:	2b00      	cmp	r3, #0
 800b814:	d04c      	beq.n	800b8b0 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f003 0310 	and.w	r3, r3, #16
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d104      	bne.n	800b82a <HAL_SD_IRQHandler+0x25e>
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f003 0320 	and.w	r3, r3, #32
 800b826:	2b00      	cmp	r3, #0
 800b828:	d011      	beq.n	800b84e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b82e:	4a17      	ldr	r2, [pc, #92]	; (800b88c <HAL_SD_IRQHandler+0x2c0>)
 800b830:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b836:	4618      	mov	r0, r3
 800b838:	f7fb ff4a 	bl	80076d0 <HAL_DMA_Abort_IT>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d036      	beq.n	800b8b0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b846:	4618      	mov	r0, r3
 800b848:	f000 fad0 	bl	800bdec <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b84c:	e030      	b.n	800b8b0 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f003 0301 	and.w	r3, r3, #1
 800b854:	2b00      	cmp	r3, #0
 800b856:	d104      	bne.n	800b862 <HAL_SD_IRQHandler+0x296>
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f003 0302 	and.w	r3, r3, #2
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d018      	beq.n	800b894 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b866:	4a0a      	ldr	r2, [pc, #40]	; (800b890 <HAL_SD_IRQHandler+0x2c4>)
 800b868:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b86e:	4618      	mov	r0, r3
 800b870:	f7fb ff2e 	bl	80076d0 <HAL_DMA_Abort_IT>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d01a      	beq.n	800b8b0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b87e:	4618      	mov	r0, r3
 800b880:	f000 faeb 	bl	800be5a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b884:	e014      	b.n	800b8b0 <HAL_SD_IRQHandler+0x2e4>
 800b886:	bf00      	nop
 800b888:	ffff3ec5 	.word	0xffff3ec5
 800b88c:	0800bded 	.word	0x0800bded
 800b890:	0800be5b 	.word	0x0800be5b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f003 f923 	bl	800eaf4 <HAL_SD_AbortCallback>
}
 800b8ae:	e7ff      	b.n	800b8b0 <HAL_SD_IRQHandler+0x2e4>
 800b8b0:	bf00      	nop
 800b8b2:	3710      	adds	r7, #16
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b8c0:	bf00      	nop
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8da:	0f9b      	lsrs	r3, r3, #30
 800b8dc:	b2da      	uxtb	r2, r3
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8e6:	0e9b      	lsrs	r3, r3, #26
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	f003 030f 	and.w	r3, r3, #15
 800b8ee:	b2da      	uxtb	r2, r3
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8f8:	0e1b      	lsrs	r3, r3, #24
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	f003 0303 	and.w	r3, r3, #3
 800b900:	b2da      	uxtb	r2, r3
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b90a:	0c1b      	lsrs	r3, r3, #16
 800b90c:	b2da      	uxtb	r2, r3
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b916:	0a1b      	lsrs	r3, r3, #8
 800b918:	b2da      	uxtb	r2, r3
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b922:	b2da      	uxtb	r2, r3
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b92c:	0d1b      	lsrs	r3, r3, #20
 800b92e:	b29a      	uxth	r2, r3
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b938:	0c1b      	lsrs	r3, r3, #16
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	f003 030f 	and.w	r3, r3, #15
 800b940:	b2da      	uxtb	r2, r3
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b94a:	0bdb      	lsrs	r3, r3, #15
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	f003 0301 	and.w	r3, r3, #1
 800b952:	b2da      	uxtb	r2, r3
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b95c:	0b9b      	lsrs	r3, r3, #14
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	f003 0301 	and.w	r3, r3, #1
 800b964:	b2da      	uxtb	r2, r3
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b96e:	0b5b      	lsrs	r3, r3, #13
 800b970:	b2db      	uxtb	r3, r3
 800b972:	f003 0301 	and.w	r3, r3, #1
 800b976:	b2da      	uxtb	r2, r3
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b980:	0b1b      	lsrs	r3, r3, #12
 800b982:	b2db      	uxtb	r3, r3
 800b984:	f003 0301 	and.w	r3, r3, #1
 800b988:	b2da      	uxtb	r2, r3
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	2200      	movs	r2, #0
 800b992:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d163      	bne.n	800ba64 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9a0:	009a      	lsls	r2, r3, #2
 800b9a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b9ac:	0f92      	lsrs	r2, r2, #30
 800b9ae:	431a      	orrs	r2, r3
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9b8:	0edb      	lsrs	r3, r3, #27
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	f003 0307 	and.w	r3, r3, #7
 800b9c0:	b2da      	uxtb	r2, r3
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9ca:	0e1b      	lsrs	r3, r3, #24
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	f003 0307 	and.w	r3, r3, #7
 800b9d2:	b2da      	uxtb	r2, r3
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9dc:	0d5b      	lsrs	r3, r3, #21
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	f003 0307 	and.w	r3, r3, #7
 800b9e4:	b2da      	uxtb	r2, r3
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9ee:	0c9b      	lsrs	r3, r3, #18
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	f003 0307 	and.w	r3, r3, #7
 800b9f6:	b2da      	uxtb	r2, r3
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba00:	0bdb      	lsrs	r3, r3, #15
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	f003 0307 	and.w	r3, r3, #7
 800ba08:	b2da      	uxtb	r2, r3
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	1c5a      	adds	r2, r3, #1
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	7e1b      	ldrb	r3, [r3, #24]
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	f003 0307 	and.w	r3, r3, #7
 800ba22:	3302      	adds	r3, #2
 800ba24:	2201      	movs	r2, #1
 800ba26:	fa02 f303 	lsl.w	r3, r2, r3
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ba2e:	fb03 f202 	mul.w	r2, r3, r2
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	7a1b      	ldrb	r3, [r3, #8]
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	f003 030f 	and.w	r3, r3, #15
 800ba40:	2201      	movs	r2, #1
 800ba42:	409a      	lsls	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ba50:	0a52      	lsrs	r2, r2, #9
 800ba52:	fb03 f202 	mul.w	r2, r3, r2
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba60:	661a      	str	r2, [r3, #96]	; 0x60
 800ba62:	e031      	b.n	800bac8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d11d      	bne.n	800baa8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba70:	041b      	lsls	r3, r3, #16
 800ba72:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba7a:	0c1b      	lsrs	r3, r3, #16
 800ba7c:	431a      	orrs	r2, r3
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	691b      	ldr	r3, [r3, #16]
 800ba86:	3301      	adds	r3, #1
 800ba88:	029a      	lsls	r2, r3, #10
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba9c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	661a      	str	r2, [r3, #96]	; 0x60
 800baa6:	e00f      	b.n	800bac8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a58      	ldr	r2, [pc, #352]	; (800bc10 <HAL_SD_GetCardCSD+0x344>)
 800baae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bac4:	2301      	movs	r3, #1
 800bac6:	e09d      	b.n	800bc04 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bacc:	0b9b      	lsrs	r3, r3, #14
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	f003 0301 	and.w	r3, r3, #1
 800bad4:	b2da      	uxtb	r2, r3
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bade:	09db      	lsrs	r3, r3, #7
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bae6:	b2da      	uxtb	r2, r3
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb00:	0fdb      	lsrs	r3, r3, #31
 800bb02:	b2da      	uxtb	r2, r3
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb0c:	0f5b      	lsrs	r3, r3, #29
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	f003 0303 	and.w	r3, r3, #3
 800bb14:	b2da      	uxtb	r2, r3
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb1e:	0e9b      	lsrs	r3, r3, #26
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	f003 0307 	and.w	r3, r3, #7
 800bb26:	b2da      	uxtb	r2, r3
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb30:	0d9b      	lsrs	r3, r3, #22
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	f003 030f 	and.w	r3, r3, #15
 800bb38:	b2da      	uxtb	r2, r3
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb42:	0d5b      	lsrs	r3, r3, #21
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	f003 0301 	and.w	r3, r3, #1
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	2200      	movs	r2, #0
 800bb56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb5e:	0c1b      	lsrs	r3, r3, #16
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	f003 0301 	and.w	r3, r3, #1
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb72:	0bdb      	lsrs	r3, r3, #15
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	f003 0301 	and.w	r3, r3, #1
 800bb7a:	b2da      	uxtb	r2, r3
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb86:	0b9b      	lsrs	r3, r3, #14
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	f003 0301 	and.w	r3, r3, #1
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb9a:	0b5b      	lsrs	r3, r3, #13
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	f003 0301 	and.w	r3, r3, #1
 800bba2:	b2da      	uxtb	r2, r3
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbae:	0b1b      	lsrs	r3, r3, #12
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	f003 0301 	and.w	r3, r3, #1
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbc2:	0a9b      	lsrs	r3, r3, #10
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	f003 0303 	and.w	r3, r3, #3
 800bbca:	b2da      	uxtb	r2, r3
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbd6:	0a1b      	lsrs	r3, r3, #8
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	f003 0303 	and.w	r3, r3, #3
 800bbde:	b2da      	uxtb	r2, r3
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbea:	085b      	lsrs	r3, r3, #1
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800bc02:	2300      	movs	r3, #0
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr
 800bc10:	004005ff 	.word	0x004005ff

0800bc14 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800bc74:	2300      	movs	r3, #0
 800bc76:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800bc78:	f107 030c 	add.w	r3, r7, #12
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 fa7e 	bl	800c180 <SD_SendStatus>
 800bc84:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d005      	beq.n	800bc98 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	431a      	orrs	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	0a5b      	lsrs	r3, r3, #9
 800bc9c:	f003 030f 	and.w	r3, r3, #15
 800bca0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800bca2:	693b      	ldr	r3, [r7, #16]
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3718      	adds	r7, #24
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bcc8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800bcca:	bf00      	nop
 800bccc:	3714      	adds	r7, #20
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b084      	sub	sp, #16
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce8:	2b82      	cmp	r3, #130	; 0x82
 800bcea:	d111      	bne.n	800bd10 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f002 facf 	bl	800e294 <SDMMC_CmdStopTransfer>
 800bcf6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d008      	beq.n	800bd10 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	431a      	orrs	r2, r3
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	f7ff fdd4 	bl	800b8b8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f022 0208 	bic.w	r2, r2, #8
 800bd1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f240 523a 	movw	r2, #1338	; 0x53a
 800bd28:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	f002 feef 	bl	800eb1c <HAL_SD_RxCpltCallback>
#endif
}
 800bd3e:	bf00      	nop
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
	...

0800bd48 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b086      	sub	sp, #24
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd54:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f7fb fe66 	bl	8007a28 <HAL_DMA_GetError>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b02      	cmp	r3, #2
 800bd60:	d03e      	beq.n	800bde0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd68:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd70:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d002      	beq.n	800bd7e <SD_DMAError+0x36>
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d12d      	bne.n	800bdda <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a19      	ldr	r2, [pc, #100]	; (800bde8 <SD_DMAError+0xa0>)
 800bd84:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800bd94:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800bda2:	6978      	ldr	r0, [r7, #20]
 800bda4:	f7ff ff62 	bl	800bc6c <HAL_SD_GetCardState>
 800bda8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	2b06      	cmp	r3, #6
 800bdae:	d002      	beq.n	800bdb6 <SD_DMAError+0x6e>
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	2b05      	cmp	r3, #5
 800bdb4:	d10a      	bne.n	800bdcc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f002 fa6a 	bl	800e294 <SDMMC_CmdStopTransfer>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc6:	431a      	orrs	r2, r3
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800bdda:	6978      	ldr	r0, [r7, #20]
 800bddc:	f7ff fd6c 	bl	800b8b8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800bde0:	bf00      	nop
 800bde2:	3718      	adds	r7, #24
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	004005ff 	.word	0x004005ff

0800bdec <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f240 523a 	movw	r2, #1338	; 0x53a
 800be02:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f7ff ff31 	bl	800bc6c <HAL_SD_GetCardState>
 800be0a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2201      	movs	r2, #1
 800be10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2200      	movs	r2, #0
 800be18:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	2b06      	cmp	r3, #6
 800be1e:	d002      	beq.n	800be26 <SD_DMATxAbort+0x3a>
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	2b05      	cmp	r3, #5
 800be24:	d10a      	bne.n	800be3c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4618      	mov	r0, r3
 800be2c:	f002 fa32 	bl	800e294 <SDMMC_CmdStopTransfer>
 800be30:	4602      	mov	r2, r0
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be36:	431a      	orrs	r2, r3
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be40:	2b00      	cmp	r3, #0
 800be42:	d103      	bne.n	800be4c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	f002 fe55 	bl	800eaf4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800be4a:	e002      	b.n	800be52 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f7ff fd33 	bl	800b8b8 <HAL_SD_ErrorCallback>
}
 800be52:	bf00      	nop
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b084      	sub	sp, #16
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be66:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f240 523a 	movw	r2, #1338	; 0x53a
 800be70:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800be72:	68f8      	ldr	r0, [r7, #12]
 800be74:	f7ff fefa 	bl	800bc6c <HAL_SD_GetCardState>
 800be78:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2201      	movs	r2, #1
 800be7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2200      	movs	r2, #0
 800be86:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2b06      	cmp	r3, #6
 800be8c:	d002      	beq.n	800be94 <SD_DMARxAbort+0x3a>
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	2b05      	cmp	r3, #5
 800be92:	d10a      	bne.n	800beaa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4618      	mov	r0, r3
 800be9a:	f002 f9fb 	bl	800e294 <SDMMC_CmdStopTransfer>
 800be9e:	4602      	mov	r2, r0
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea4:	431a      	orrs	r2, r3
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d103      	bne.n	800beba <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f002 fe1e 	bl	800eaf4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800beb8:	e002      	b.n	800bec0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f7ff fcfc 	bl	800b8b8 <HAL_SD_ErrorCallback>
}
 800bec0:	bf00      	nop
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bec8:	b5b0      	push	{r4, r5, r7, lr}
 800beca:	b094      	sub	sp, #80	; 0x50
 800becc:	af04      	add	r7, sp, #16
 800bece:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bed0:	2301      	movs	r3, #1
 800bed2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4618      	mov	r0, r3
 800beda:	f002 f8ad 	bl	800e038 <SDMMC_GetPowerState>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d102      	bne.n	800beea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bee4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bee8:	e0b8      	b.n	800c05c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beee:	2b03      	cmp	r3, #3
 800bef0:	d02f      	beq.n	800bf52 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4618      	mov	r0, r3
 800bef8:	f002 fa94 	bl	800e424 <SDMMC_CmdSendCID>
 800befc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800befe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d001      	beq.n	800bf08 <SD_InitCard+0x40>
    {
      return errorstate;
 800bf04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf06:	e0a9      	b.n	800c05c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2100      	movs	r1, #0
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f002 f8d7 	bl	800e0c2 <SDMMC_GetResponse>
 800bf14:	4602      	mov	r2, r0
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2104      	movs	r1, #4
 800bf20:	4618      	mov	r0, r3
 800bf22:	f002 f8ce 	bl	800e0c2 <SDMMC_GetResponse>
 800bf26:	4602      	mov	r2, r0
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2108      	movs	r1, #8
 800bf32:	4618      	mov	r0, r3
 800bf34:	f002 f8c5 	bl	800e0c2 <SDMMC_GetResponse>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	210c      	movs	r1, #12
 800bf44:	4618      	mov	r0, r3
 800bf46:	f002 f8bc 	bl	800e0c2 <SDMMC_GetResponse>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf56:	2b03      	cmp	r3, #3
 800bf58:	d00d      	beq.n	800bf76 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f107 020e 	add.w	r2, r7, #14
 800bf62:	4611      	mov	r1, r2
 800bf64:	4618      	mov	r0, r3
 800bf66:	f002 fa9a 	bl	800e49e <SDMMC_CmdSetRelAdd>
 800bf6a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d001      	beq.n	800bf76 <SD_InitCard+0xae>
    {
      return errorstate;
 800bf72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf74:	e072      	b.n	800c05c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf7a:	2b03      	cmp	r3, #3
 800bf7c:	d036      	beq.n	800bfec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bf7e:	89fb      	ldrh	r3, [r7, #14]
 800bf80:	461a      	mov	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf8e:	041b      	lsls	r3, r3, #16
 800bf90:	4619      	mov	r1, r3
 800bf92:	4610      	mov	r0, r2
 800bf94:	f002 fa64 	bl	800e460 <SDMMC_CmdSendCSD>
 800bf98:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d001      	beq.n	800bfa4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800bfa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfa2:	e05b      	b.n	800c05c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f002 f889 	bl	800e0c2 <SDMMC_GetResponse>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	2104      	movs	r1, #4
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f002 f880 	bl	800e0c2 <SDMMC_GetResponse>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2108      	movs	r1, #8
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f002 f877 	bl	800e0c2 <SDMMC_GetResponse>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	210c      	movs	r1, #12
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f002 f86e 	bl	800e0c2 <SDMMC_GetResponse>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2104      	movs	r1, #4
 800bff2:	4618      	mov	r0, r3
 800bff4:	f002 f865 	bl	800e0c2 <SDMMC_GetResponse>
 800bff8:	4603      	mov	r3, r0
 800bffa:	0d1a      	lsrs	r2, r3, #20
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c000:	f107 0310 	add.w	r3, r7, #16
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f7ff fc60 	bl	800b8cc <HAL_SD_GetCardCSD>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d002      	beq.n	800c018 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c012:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c016:	e021      	b.n	800c05c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6819      	ldr	r1, [r3, #0]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c020:	041b      	lsls	r3, r3, #16
 800c022:	2200      	movs	r2, #0
 800c024:	461c      	mov	r4, r3
 800c026:	4615      	mov	r5, r2
 800c028:	4622      	mov	r2, r4
 800c02a:	462b      	mov	r3, r5
 800c02c:	4608      	mov	r0, r1
 800c02e:	f002 f953 	bl	800e2d8 <SDMMC_CmdSelDesel>
 800c032:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c036:	2b00      	cmp	r3, #0
 800c038:	d001      	beq.n	800c03e <SD_InitCard+0x176>
  {
    return errorstate;
 800c03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c03c:	e00e      	b.n	800c05c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681d      	ldr	r5, [r3, #0]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	466c      	mov	r4, sp
 800c046:	f103 0210 	add.w	r2, r3, #16
 800c04a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c04c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c050:	3304      	adds	r3, #4
 800c052:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c054:	4628      	mov	r0, r5
 800c056:	f001 ff97 	bl	800df88 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3740      	adds	r7, #64	; 0x40
 800c060:	46bd      	mov	sp, r7
 800c062:	bdb0      	pop	{r4, r5, r7, pc}

0800c064 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c06c:	2300      	movs	r3, #0
 800c06e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c070:	2300      	movs	r3, #0
 800c072:	617b      	str	r3, [r7, #20]
 800c074:	2300      	movs	r3, #0
 800c076:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4618      	mov	r0, r3
 800c07e:	f002 f94e 	bl	800e31e <SDMMC_CmdGoIdleState>
 800c082:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d001      	beq.n	800c08e <SD_PowerON+0x2a>
  {
    return errorstate;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	e072      	b.n	800c174 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4618      	mov	r0, r3
 800c094:	f002 f961 	bl	800e35a <SDMMC_CmdOperCond>
 800c098:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00d      	beq.n	800c0bc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f002 f937 	bl	800e31e <SDMMC_CmdGoIdleState>
 800c0b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d004      	beq.n	800c0c2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	e05b      	b.n	800c174 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d137      	bne.n	800c13a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f002 f961 	bl	800e398 <SDMMC_CmdAppCommand>
 800c0d6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d02d      	beq.n	800c13a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c0de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c0e2:	e047      	b.n	800c174 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2100      	movs	r1, #0
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f002 f954 	bl	800e398 <SDMMC_CmdAppCommand>
 800c0f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d001      	beq.n	800c0fc <SD_PowerON+0x98>
    {
      return errorstate;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	e03b      	b.n	800c174 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	491e      	ldr	r1, [pc, #120]	; (800c17c <SD_PowerON+0x118>)
 800c102:	4618      	mov	r0, r3
 800c104:	f002 f96a 	bl	800e3dc <SDMMC_CmdAppOperCommand>
 800c108:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d002      	beq.n	800c116 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c110:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c114:	e02e      	b.n	800c174 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2100      	movs	r1, #0
 800c11c:	4618      	mov	r0, r3
 800c11e:	f001 ffd0 	bl	800e0c2 <SDMMC_GetResponse>
 800c122:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	0fdb      	lsrs	r3, r3, #31
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d101      	bne.n	800c130 <SD_PowerON+0xcc>
 800c12c:	2301      	movs	r3, #1
 800c12e:	e000      	b.n	800c132 <SD_PowerON+0xce>
 800c130:	2300      	movs	r3, #0
 800c132:	613b      	str	r3, [r7, #16]

    count++;
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	3301      	adds	r3, #1
 800c138:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c140:	4293      	cmp	r3, r2
 800c142:	d802      	bhi.n	800c14a <SD_PowerON+0xe6>
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d0cc      	beq.n	800c0e4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c150:	4293      	cmp	r3, r2
 800c152:	d902      	bls.n	800c15a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c158:	e00c      	b.n	800c174 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c160:	2b00      	cmp	r3, #0
 800c162:	d003      	beq.n	800c16c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2201      	movs	r2, #1
 800c168:	645a      	str	r2, [r3, #68]	; 0x44
 800c16a:	e002      	b.n	800c172 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c172:	2300      	movs	r3, #0
}
 800c174:	4618      	mov	r0, r3
 800c176:	3718      	adds	r7, #24
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	c1100000 	.word	0xc1100000

0800c180 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d102      	bne.n	800c196 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c190:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c194:	e018      	b.n	800c1c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c19e:	041b      	lsls	r3, r3, #16
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	4610      	mov	r0, r2
 800c1a4:	f002 f99c 	bl	800e4e0 <SDMMC_CmdSendStatus>
 800c1a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d001      	beq.n	800c1b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	e009      	b.n	800c1c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f001 ff81 	bl	800e0c2 <SDMMC_GetResponse>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c1c6:	2300      	movs	r3, #0
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3710      	adds	r7, #16
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1dc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d03f      	beq.n	800c26a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	617b      	str	r3, [r7, #20]
 800c1ee:	e033      	b.n	800c258 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f001 fef3 	bl	800dfe0 <SDMMC_ReadFIFO>
 800c1fa:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	b2da      	uxtb	r2, r3
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	3301      	adds	r3, #1
 800c208:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	3b01      	subs	r3, #1
 800c20e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	0a1b      	lsrs	r3, r3, #8
 800c214:	b2da      	uxtb	r2, r3
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	3301      	adds	r3, #1
 800c21e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	3b01      	subs	r3, #1
 800c224:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	0c1b      	lsrs	r3, r3, #16
 800c22a:	b2da      	uxtb	r2, r3
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	3301      	adds	r3, #1
 800c234:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	3b01      	subs	r3, #1
 800c23a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	0e1b      	lsrs	r3, r3, #24
 800c240:	b2da      	uxtb	r2, r3
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	3301      	adds	r3, #1
 800c24a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	3b01      	subs	r3, #1
 800c250:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	3301      	adds	r3, #1
 800c256:	617b      	str	r3, [r7, #20]
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	2b07      	cmp	r3, #7
 800c25c:	d9c8      	bls.n	800c1f0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	68fa      	ldr	r2, [r7, #12]
 800c262:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	693a      	ldr	r2, [r7, #16]
 800c268:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c26a:	bf00      	nop
 800c26c:	3718      	adds	r7, #24
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b086      	sub	sp, #24
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6a1b      	ldr	r3, [r3, #32]
 800c27e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c284:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d043      	beq.n	800c314 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c28c:	2300      	movs	r3, #0
 800c28e:	617b      	str	r3, [r7, #20]
 800c290:	e037      	b.n	800c302 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	3301      	adds	r3, #1
 800c29c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	3b01      	subs	r3, #1
 800c2a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	021a      	lsls	r2, r3, #8
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	041a      	lsls	r2, r3, #16
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	061a      	lsls	r2, r3, #24
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f107 0208 	add.w	r2, r7, #8
 800c2f4:	4611      	mov	r1, r2
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f001 fe7f 	bl	800dffa <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	3301      	adds	r3, #1
 800c300:	617b      	str	r3, [r7, #20]
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	2b07      	cmp	r3, #7
 800c306:	d9c4      	bls.n	800c292 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	693a      	ldr	r2, [r7, #16]
 800c312:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c314:	bf00      	nop
 800c316:	3718      	adds	r7, #24
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d101      	bne.n	800c330 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	e025      	b.n	800c37c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c336:	b2db      	uxtb	r3, r3
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d106      	bne.n	800c34a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2200      	movs	r2, #0
 800c340:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7f4 fff5 	bl	8001334 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2202      	movs	r2, #2
 800c34e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	3304      	adds	r3, #4
 800c35a:	4619      	mov	r1, r3
 800c35c:	4610      	mov	r0, r2
 800c35e:	f001 fd11 	bl	800dd84 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6818      	ldr	r0, [r3, #0]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	461a      	mov	r2, r3
 800c36c:	6839      	ldr	r1, [r7, #0]
 800c36e:	f001 fd65 	bl	800de3c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2201      	movs	r2, #1
 800c376:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3708      	adds	r7, #8
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b086      	sub	sp, #24
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c396:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800c398:	7dfb      	ldrb	r3, [r7, #23]
 800c39a:	2b02      	cmp	r3, #2
 800c39c:	d101      	bne.n	800c3a2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800c39e:	2302      	movs	r3, #2
 800c3a0:	e021      	b.n	800c3e6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800c3a2:	7dfb      	ldrb	r3, [r7, #23]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d002      	beq.n	800c3ae <HAL_SDRAM_SendCommand+0x2a>
 800c3a8:	7dfb      	ldrb	r3, [r7, #23]
 800c3aa:	2b05      	cmp	r3, #5
 800c3ac:	d118      	bne.n	800c3e0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2202      	movs	r2, #2
 800c3b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	68b9      	ldr	r1, [r7, #8]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f001 fda6 	bl	800df10 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2b02      	cmp	r3, #2
 800c3ca:	d104      	bne.n	800c3d6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2205      	movs	r2, #5
 800c3d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c3d4:	e006      	b.n	800c3e4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2201      	movs	r2, #1
 800c3da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c3de:	e001      	b.n	800c3e4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e000      	b.n	800c3e6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800c3e4:	2300      	movs	r3, #0
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3718      	adds	r7, #24
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b082      	sub	sp, #8
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	2b02      	cmp	r3, #2
 800c402:	d101      	bne.n	800c408 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800c404:	2302      	movs	r3, #2
 800c406:	e016      	b.n	800c436 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	2b01      	cmp	r3, #1
 800c412:	d10f      	bne.n	800c434 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2202      	movs	r2, #2
 800c418:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	6839      	ldr	r1, [r7, #0]
 800c422:	4618      	mov	r0, r3
 800c424:	f001 fd98 	bl	800df58 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c430:	2300      	movs	r3, #0
 800c432:	e000      	b.n	800c436 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800c434:	2301      	movs	r3, #1
}
 800c436:	4618      	mov	r0, r3
 800c438:	3708      	adds	r7, #8
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c43e:	b580      	push	{r7, lr}
 800c440:	b082      	sub	sp, #8
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d101      	bne.n	800c450 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	e049      	b.n	800c4e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c456:	b2db      	uxtb	r3, r3
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d106      	bne.n	800c46a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f7f7 fd95 	bl	8003f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2202      	movs	r2, #2
 800c46e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	3304      	adds	r3, #4
 800c47a:	4619      	mov	r1, r3
 800c47c:	4610      	mov	r0, r2
 800c47e:	f000 fcf9 	bl	800ce74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2201      	movs	r2, #1
 800c486:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2201      	movs	r2, #1
 800c48e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2201      	movs	r2, #1
 800c496:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2201      	movs	r2, #1
 800c49e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3708      	adds	r7, #8
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b085      	sub	sp, #20
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d001      	beq.n	800c504 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c500:	2301      	movs	r3, #1
 800c502:	e054      	b.n	800c5ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2202      	movs	r2, #2
 800c508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	68da      	ldr	r2, [r3, #12]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f042 0201 	orr.w	r2, r2, #1
 800c51a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a26      	ldr	r2, [pc, #152]	; (800c5bc <HAL_TIM_Base_Start_IT+0xd0>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d022      	beq.n	800c56c <HAL_TIM_Base_Start_IT+0x80>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c52e:	d01d      	beq.n	800c56c <HAL_TIM_Base_Start_IT+0x80>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a22      	ldr	r2, [pc, #136]	; (800c5c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d018      	beq.n	800c56c <HAL_TIM_Base_Start_IT+0x80>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4a21      	ldr	r2, [pc, #132]	; (800c5c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d013      	beq.n	800c56c <HAL_TIM_Base_Start_IT+0x80>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a1f      	ldr	r2, [pc, #124]	; (800c5c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d00e      	beq.n	800c56c <HAL_TIM_Base_Start_IT+0x80>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4a1e      	ldr	r2, [pc, #120]	; (800c5cc <HAL_TIM_Base_Start_IT+0xe0>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d009      	beq.n	800c56c <HAL_TIM_Base_Start_IT+0x80>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a1c      	ldr	r2, [pc, #112]	; (800c5d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d004      	beq.n	800c56c <HAL_TIM_Base_Start_IT+0x80>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a1b      	ldr	r2, [pc, #108]	; (800c5d4 <HAL_TIM_Base_Start_IT+0xe8>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d115      	bne.n	800c598 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	689a      	ldr	r2, [r3, #8]
 800c572:	4b19      	ldr	r3, [pc, #100]	; (800c5d8 <HAL_TIM_Base_Start_IT+0xec>)
 800c574:	4013      	ands	r3, r2
 800c576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2b06      	cmp	r3, #6
 800c57c:	d015      	beq.n	800c5aa <HAL_TIM_Base_Start_IT+0xbe>
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c584:	d011      	beq.n	800c5aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f042 0201 	orr.w	r2, r2, #1
 800c594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c596:	e008      	b.n	800c5aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f042 0201 	orr.w	r2, r2, #1
 800c5a6:	601a      	str	r2, [r3, #0]
 800c5a8:	e000      	b.n	800c5ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c5ac:	2300      	movs	r3, #0
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3714      	adds	r7, #20
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	40010000 	.word	0x40010000
 800c5c0:	40000400 	.word	0x40000400
 800c5c4:	40000800 	.word	0x40000800
 800c5c8:	40000c00 	.word	0x40000c00
 800c5cc:	40010400 	.word	0x40010400
 800c5d0:	40014000 	.word	0x40014000
 800c5d4:	40001800 	.word	0x40001800
 800c5d8:	00010007 	.word	0x00010007

0800c5dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d101      	bne.n	800c5ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e049      	b.n	800c682 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d106      	bne.n	800c608 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7f7 fc7a 	bl	8003efc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2202      	movs	r2, #2
 800c60c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	3304      	adds	r3, #4
 800c618:	4619      	mov	r1, r3
 800c61a:	4610      	mov	r0, r2
 800c61c:	f000 fc2a 	bl	800ce74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2201      	movs	r2, #1
 800c63c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2201      	movs	r2, #1
 800c644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2201      	movs	r2, #1
 800c64c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2201      	movs	r2, #1
 800c65c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2201      	movs	r2, #1
 800c674:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c680:	2300      	movs	r3, #0
}
 800c682:	4618      	mov	r0, r3
 800c684:	3708      	adds	r7, #8
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
	...

0800c68c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c696:	2300      	movs	r3, #0
 800c698:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d104      	bne.n	800c6aa <HAL_TIM_IC_Start_IT+0x1e>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	e023      	b.n	800c6f2 <HAL_TIM_IC_Start_IT+0x66>
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	2b04      	cmp	r3, #4
 800c6ae:	d104      	bne.n	800c6ba <HAL_TIM_IC_Start_IT+0x2e>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	e01b      	b.n	800c6f2 <HAL_TIM_IC_Start_IT+0x66>
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	2b08      	cmp	r3, #8
 800c6be:	d104      	bne.n	800c6ca <HAL_TIM_IC_Start_IT+0x3e>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	e013      	b.n	800c6f2 <HAL_TIM_IC_Start_IT+0x66>
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	2b0c      	cmp	r3, #12
 800c6ce:	d104      	bne.n	800c6da <HAL_TIM_IC_Start_IT+0x4e>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	e00b      	b.n	800c6f2 <HAL_TIM_IC_Start_IT+0x66>
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	2b10      	cmp	r3, #16
 800c6de:	d104      	bne.n	800c6ea <HAL_TIM_IC_Start_IT+0x5e>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	e003      	b.n	800c6f2 <HAL_TIM_IC_Start_IT+0x66>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d104      	bne.n	800c704 <HAL_TIM_IC_Start_IT+0x78>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c700:	b2db      	uxtb	r3, r3
 800c702:	e013      	b.n	800c72c <HAL_TIM_IC_Start_IT+0xa0>
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	2b04      	cmp	r3, #4
 800c708:	d104      	bne.n	800c714 <HAL_TIM_IC_Start_IT+0x88>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c710:	b2db      	uxtb	r3, r3
 800c712:	e00b      	b.n	800c72c <HAL_TIM_IC_Start_IT+0xa0>
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	2b08      	cmp	r3, #8
 800c718:	d104      	bne.n	800c724 <HAL_TIM_IC_Start_IT+0x98>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c720:	b2db      	uxtb	r3, r3
 800c722:	e003      	b.n	800c72c <HAL_TIM_IC_Start_IT+0xa0>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c72e:	7bbb      	ldrb	r3, [r7, #14]
 800c730:	2b01      	cmp	r3, #1
 800c732:	d102      	bne.n	800c73a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c734:	7b7b      	ldrb	r3, [r7, #13]
 800c736:	2b01      	cmp	r3, #1
 800c738:	d001      	beq.n	800c73e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800c73a:	2301      	movs	r3, #1
 800c73c:	e0e2      	b.n	800c904 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d104      	bne.n	800c74e <HAL_TIM_IC_Start_IT+0xc2>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2202      	movs	r2, #2
 800c748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c74c:	e023      	b.n	800c796 <HAL_TIM_IC_Start_IT+0x10a>
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	2b04      	cmp	r3, #4
 800c752:	d104      	bne.n	800c75e <HAL_TIM_IC_Start_IT+0xd2>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2202      	movs	r2, #2
 800c758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c75c:	e01b      	b.n	800c796 <HAL_TIM_IC_Start_IT+0x10a>
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	2b08      	cmp	r3, #8
 800c762:	d104      	bne.n	800c76e <HAL_TIM_IC_Start_IT+0xe2>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2202      	movs	r2, #2
 800c768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c76c:	e013      	b.n	800c796 <HAL_TIM_IC_Start_IT+0x10a>
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	2b0c      	cmp	r3, #12
 800c772:	d104      	bne.n	800c77e <HAL_TIM_IC_Start_IT+0xf2>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2202      	movs	r2, #2
 800c778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c77c:	e00b      	b.n	800c796 <HAL_TIM_IC_Start_IT+0x10a>
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	2b10      	cmp	r3, #16
 800c782:	d104      	bne.n	800c78e <HAL_TIM_IC_Start_IT+0x102>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2202      	movs	r2, #2
 800c788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c78c:	e003      	b.n	800c796 <HAL_TIM_IC_Start_IT+0x10a>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2202      	movs	r2, #2
 800c792:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d104      	bne.n	800c7a6 <HAL_TIM_IC_Start_IT+0x11a>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2202      	movs	r2, #2
 800c7a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7a4:	e013      	b.n	800c7ce <HAL_TIM_IC_Start_IT+0x142>
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	2b04      	cmp	r3, #4
 800c7aa:	d104      	bne.n	800c7b6 <HAL_TIM_IC_Start_IT+0x12a>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2202      	movs	r2, #2
 800c7b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7b4:	e00b      	b.n	800c7ce <HAL_TIM_IC_Start_IT+0x142>
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	2b08      	cmp	r3, #8
 800c7ba:	d104      	bne.n	800c7c6 <HAL_TIM_IC_Start_IT+0x13a>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2202      	movs	r2, #2
 800c7c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c7c4:	e003      	b.n	800c7ce <HAL_TIM_IC_Start_IT+0x142>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	2b0c      	cmp	r3, #12
 800c7d2:	d841      	bhi.n	800c858 <HAL_TIM_IC_Start_IT+0x1cc>
 800c7d4:	a201      	add	r2, pc, #4	; (adr r2, 800c7dc <HAL_TIM_IC_Start_IT+0x150>)
 800c7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7da:	bf00      	nop
 800c7dc:	0800c811 	.word	0x0800c811
 800c7e0:	0800c859 	.word	0x0800c859
 800c7e4:	0800c859 	.word	0x0800c859
 800c7e8:	0800c859 	.word	0x0800c859
 800c7ec:	0800c823 	.word	0x0800c823
 800c7f0:	0800c859 	.word	0x0800c859
 800c7f4:	0800c859 	.word	0x0800c859
 800c7f8:	0800c859 	.word	0x0800c859
 800c7fc:	0800c835 	.word	0x0800c835
 800c800:	0800c859 	.word	0x0800c859
 800c804:	0800c859 	.word	0x0800c859
 800c808:	0800c859 	.word	0x0800c859
 800c80c:	0800c847 	.word	0x0800c847
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68da      	ldr	r2, [r3, #12]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f042 0202 	orr.w	r2, r2, #2
 800c81e:	60da      	str	r2, [r3, #12]
      break;
 800c820:	e01d      	b.n	800c85e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	68da      	ldr	r2, [r3, #12]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f042 0204 	orr.w	r2, r2, #4
 800c830:	60da      	str	r2, [r3, #12]
      break;
 800c832:	e014      	b.n	800c85e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	68da      	ldr	r2, [r3, #12]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f042 0208 	orr.w	r2, r2, #8
 800c842:	60da      	str	r2, [r3, #12]
      break;
 800c844:	e00b      	b.n	800c85e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	68da      	ldr	r2, [r3, #12]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f042 0210 	orr.w	r2, r2, #16
 800c854:	60da      	str	r2, [r3, #12]
      break;
 800c856:	e002      	b.n	800c85e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800c858:	2301      	movs	r3, #1
 800c85a:	73fb      	strb	r3, [r7, #15]
      break;
 800c85c:	bf00      	nop
  }

  if (status == HAL_OK)
 800c85e:	7bfb      	ldrb	r3, [r7, #15]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d14e      	bne.n	800c902 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	2201      	movs	r2, #1
 800c86a:	6839      	ldr	r1, [r7, #0]
 800c86c:	4618      	mov	r0, r3
 800c86e:	f000 fd65 	bl	800d33c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a25      	ldr	r2, [pc, #148]	; (800c90c <HAL_TIM_IC_Start_IT+0x280>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d022      	beq.n	800c8c2 <HAL_TIM_IC_Start_IT+0x236>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c884:	d01d      	beq.n	800c8c2 <HAL_TIM_IC_Start_IT+0x236>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a21      	ldr	r2, [pc, #132]	; (800c910 <HAL_TIM_IC_Start_IT+0x284>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d018      	beq.n	800c8c2 <HAL_TIM_IC_Start_IT+0x236>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a1f      	ldr	r2, [pc, #124]	; (800c914 <HAL_TIM_IC_Start_IT+0x288>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d013      	beq.n	800c8c2 <HAL_TIM_IC_Start_IT+0x236>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4a1e      	ldr	r2, [pc, #120]	; (800c918 <HAL_TIM_IC_Start_IT+0x28c>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d00e      	beq.n	800c8c2 <HAL_TIM_IC_Start_IT+0x236>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a1c      	ldr	r2, [pc, #112]	; (800c91c <HAL_TIM_IC_Start_IT+0x290>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d009      	beq.n	800c8c2 <HAL_TIM_IC_Start_IT+0x236>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a1b      	ldr	r2, [pc, #108]	; (800c920 <HAL_TIM_IC_Start_IT+0x294>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d004      	beq.n	800c8c2 <HAL_TIM_IC_Start_IT+0x236>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a19      	ldr	r2, [pc, #100]	; (800c924 <HAL_TIM_IC_Start_IT+0x298>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d115      	bne.n	800c8ee <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	689a      	ldr	r2, [r3, #8]
 800c8c8:	4b17      	ldr	r3, [pc, #92]	; (800c928 <HAL_TIM_IC_Start_IT+0x29c>)
 800c8ca:	4013      	ands	r3, r2
 800c8cc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	2b06      	cmp	r3, #6
 800c8d2:	d015      	beq.n	800c900 <HAL_TIM_IC_Start_IT+0x274>
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8da:	d011      	beq.n	800c900 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f042 0201 	orr.w	r2, r2, #1
 800c8ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8ec:	e008      	b.n	800c900 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f042 0201 	orr.w	r2, r2, #1
 800c8fc:	601a      	str	r2, [r3, #0]
 800c8fe:	e000      	b.n	800c902 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c900:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c902:	7bfb      	ldrb	r3, [r7, #15]
}
 800c904:	4618      	mov	r0, r3
 800c906:	3710      	adds	r7, #16
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	40010000 	.word	0x40010000
 800c910:	40000400 	.word	0x40000400
 800c914:	40000800 	.word	0x40000800
 800c918:	40000c00 	.word	0x40000c00
 800c91c:	40010400 	.word	0x40010400
 800c920:	40014000 	.word	0x40014000
 800c924:	40001800 	.word	0x40001800
 800c928:	00010007 	.word	0x00010007

0800c92c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	691b      	ldr	r3, [r3, #16]
 800c93a:	f003 0302 	and.w	r3, r3, #2
 800c93e:	2b02      	cmp	r3, #2
 800c940:	d122      	bne.n	800c988 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	68db      	ldr	r3, [r3, #12]
 800c948:	f003 0302 	and.w	r3, r3, #2
 800c94c:	2b02      	cmp	r3, #2
 800c94e:	d11b      	bne.n	800c988 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f06f 0202 	mvn.w	r2, #2
 800c958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2201      	movs	r2, #1
 800c95e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	699b      	ldr	r3, [r3, #24]
 800c966:	f003 0303 	and.w	r3, r3, #3
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d003      	beq.n	800c976 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f7f6 fd2e 	bl	80033d0 <HAL_TIM_IC_CaptureCallback>
 800c974:	e005      	b.n	800c982 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 fa5e 	bl	800ce38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 fa65 	bl	800ce4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	691b      	ldr	r3, [r3, #16]
 800c98e:	f003 0304 	and.w	r3, r3, #4
 800c992:	2b04      	cmp	r3, #4
 800c994:	d122      	bne.n	800c9dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	f003 0304 	and.w	r3, r3, #4
 800c9a0:	2b04      	cmp	r3, #4
 800c9a2:	d11b      	bne.n	800c9dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f06f 0204 	mvn.w	r2, #4
 800c9ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2202      	movs	r2, #2
 800c9b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	699b      	ldr	r3, [r3, #24]
 800c9ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d003      	beq.n	800c9ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f7f6 fd04 	bl	80033d0 <HAL_TIM_IC_CaptureCallback>
 800c9c8:	e005      	b.n	800c9d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fa34 	bl	800ce38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 fa3b 	bl	800ce4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	f003 0308 	and.w	r3, r3, #8
 800c9e6:	2b08      	cmp	r3, #8
 800c9e8:	d122      	bne.n	800ca30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	68db      	ldr	r3, [r3, #12]
 800c9f0:	f003 0308 	and.w	r3, r3, #8
 800c9f4:	2b08      	cmp	r3, #8
 800c9f6:	d11b      	bne.n	800ca30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f06f 0208 	mvn.w	r2, #8
 800ca00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2204      	movs	r2, #4
 800ca06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	69db      	ldr	r3, [r3, #28]
 800ca0e:	f003 0303 	and.w	r3, r3, #3
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d003      	beq.n	800ca1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f7f6 fcda 	bl	80033d0 <HAL_TIM_IC_CaptureCallback>
 800ca1c:	e005      	b.n	800ca2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 fa0a 	bl	800ce38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 fa11 	bl	800ce4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	691b      	ldr	r3, [r3, #16]
 800ca36:	f003 0310 	and.w	r3, r3, #16
 800ca3a:	2b10      	cmp	r3, #16
 800ca3c:	d122      	bne.n	800ca84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	68db      	ldr	r3, [r3, #12]
 800ca44:	f003 0310 	and.w	r3, r3, #16
 800ca48:	2b10      	cmp	r3, #16
 800ca4a:	d11b      	bne.n	800ca84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f06f 0210 	mvn.w	r2, #16
 800ca54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2208      	movs	r2, #8
 800ca5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	69db      	ldr	r3, [r3, #28]
 800ca62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d003      	beq.n	800ca72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f7f6 fcb0 	bl	80033d0 <HAL_TIM_IC_CaptureCallback>
 800ca70:	e005      	b.n	800ca7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 f9e0 	bl	800ce38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 f9e7 	bl	800ce4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	f003 0301 	and.w	r3, r3, #1
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d10e      	bne.n	800cab0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	f003 0301 	and.w	r3, r3, #1
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d107      	bne.n	800cab0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f06f 0201 	mvn.w	r2, #1
 800caa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7f6 fca4 	bl	80033f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caba:	2b80      	cmp	r3, #128	; 0x80
 800cabc:	d10e      	bne.n	800cadc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cac8:	2b80      	cmp	r3, #128	; 0x80
 800caca:	d107      	bne.n	800cadc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 fcee 	bl	800d4b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caea:	d10e      	bne.n	800cb0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caf6:	2b80      	cmp	r3, #128	; 0x80
 800caf8:	d107      	bne.n	800cb0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cb02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 fce1 	bl	800d4cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	691b      	ldr	r3, [r3, #16]
 800cb10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb14:	2b40      	cmp	r3, #64	; 0x40
 800cb16:	d10e      	bne.n	800cb36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	68db      	ldr	r3, [r3, #12]
 800cb1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb22:	2b40      	cmp	r3, #64	; 0x40
 800cb24:	d107      	bne.n	800cb36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cb2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 f995 	bl	800ce60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	691b      	ldr	r3, [r3, #16]
 800cb3c:	f003 0320 	and.w	r3, r3, #32
 800cb40:	2b20      	cmp	r3, #32
 800cb42:	d10e      	bne.n	800cb62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	f003 0320 	and.w	r3, r3, #32
 800cb4e:	2b20      	cmp	r3, #32
 800cb50:	d107      	bne.n	800cb62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f06f 0220 	mvn.w	r2, #32
 800cb5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 fca1 	bl	800d4a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cb62:	bf00      	nop
 800cb64:	3708      	adds	r7, #8
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b086      	sub	sp, #24
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	60f8      	str	r0, [r7, #12]
 800cb72:	60b9      	str	r1, [r7, #8]
 800cb74:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cb76:	2300      	movs	r3, #0
 800cb78:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d101      	bne.n	800cb88 <HAL_TIM_IC_ConfigChannel+0x1e>
 800cb84:	2302      	movs	r3, #2
 800cb86:	e088      	b.n	800cc9a <HAL_TIM_IC_ConfigChannel+0x130>
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d11b      	bne.n	800cbce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800cba6:	f000 fa05 	bl	800cfb4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	699a      	ldr	r2, [r3, #24]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f022 020c 	bic.w	r2, r2, #12
 800cbb8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	6999      	ldr	r1, [r3, #24]
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	689a      	ldr	r2, [r3, #8]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	430a      	orrs	r2, r1
 800cbca:	619a      	str	r2, [r3, #24]
 800cbcc:	e060      	b.n	800cc90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2b04      	cmp	r3, #4
 800cbd2:	d11c      	bne.n	800cc0e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800cbe4:	f000 fa89 	bl	800d0fa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	699a      	ldr	r2, [r3, #24]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800cbf6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	6999      	ldr	r1, [r3, #24]
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	021a      	lsls	r2, r3, #8
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	430a      	orrs	r2, r1
 800cc0a:	619a      	str	r2, [r3, #24]
 800cc0c:	e040      	b.n	800cc90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2b08      	cmp	r3, #8
 800cc12:	d11b      	bne.n	800cc4c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800cc24:	f000 fad6 	bl	800d1d4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	69da      	ldr	r2, [r3, #28]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f022 020c 	bic.w	r2, r2, #12
 800cc36:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	69d9      	ldr	r1, [r3, #28]
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	689a      	ldr	r2, [r3, #8]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	430a      	orrs	r2, r1
 800cc48:	61da      	str	r2, [r3, #28]
 800cc4a:	e021      	b.n	800cc90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2b0c      	cmp	r3, #12
 800cc50:	d11c      	bne.n	800cc8c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800cc62:	f000 faf3 	bl	800d24c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	69da      	ldr	r2, [r3, #28]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800cc74:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	69d9      	ldr	r1, [r3, #28]
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	021a      	lsls	r2, r3, #8
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	430a      	orrs	r2, r1
 800cc88:	61da      	str	r2, [r3, #28]
 800cc8a:	e001      	b.n	800cc90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2200      	movs	r2, #0
 800cc94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cc98:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3718      	adds	r7, #24
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
	...

0800cca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d101      	bne.n	800ccc0 <HAL_TIM_ConfigClockSource+0x1c>
 800ccbc:	2302      	movs	r3, #2
 800ccbe:	e0b4      	b.n	800ce2a <HAL_TIM_ConfigClockSource+0x186>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2202      	movs	r2, #2
 800cccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	4b56      	ldr	r3, [pc, #344]	; (800ce34 <HAL_TIM_ConfigClockSource+0x190>)
 800ccdc:	4013      	ands	r3, r2
 800ccde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	68ba      	ldr	r2, [r7, #8]
 800ccee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccf8:	d03e      	beq.n	800cd78 <HAL_TIM_ConfigClockSource+0xd4>
 800ccfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccfe:	f200 8087 	bhi.w	800ce10 <HAL_TIM_ConfigClockSource+0x16c>
 800cd02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd06:	f000 8086 	beq.w	800ce16 <HAL_TIM_ConfigClockSource+0x172>
 800cd0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd0e:	d87f      	bhi.n	800ce10 <HAL_TIM_ConfigClockSource+0x16c>
 800cd10:	2b70      	cmp	r3, #112	; 0x70
 800cd12:	d01a      	beq.n	800cd4a <HAL_TIM_ConfigClockSource+0xa6>
 800cd14:	2b70      	cmp	r3, #112	; 0x70
 800cd16:	d87b      	bhi.n	800ce10 <HAL_TIM_ConfigClockSource+0x16c>
 800cd18:	2b60      	cmp	r3, #96	; 0x60
 800cd1a:	d050      	beq.n	800cdbe <HAL_TIM_ConfigClockSource+0x11a>
 800cd1c:	2b60      	cmp	r3, #96	; 0x60
 800cd1e:	d877      	bhi.n	800ce10 <HAL_TIM_ConfigClockSource+0x16c>
 800cd20:	2b50      	cmp	r3, #80	; 0x50
 800cd22:	d03c      	beq.n	800cd9e <HAL_TIM_ConfigClockSource+0xfa>
 800cd24:	2b50      	cmp	r3, #80	; 0x50
 800cd26:	d873      	bhi.n	800ce10 <HAL_TIM_ConfigClockSource+0x16c>
 800cd28:	2b40      	cmp	r3, #64	; 0x40
 800cd2a:	d058      	beq.n	800cdde <HAL_TIM_ConfigClockSource+0x13a>
 800cd2c:	2b40      	cmp	r3, #64	; 0x40
 800cd2e:	d86f      	bhi.n	800ce10 <HAL_TIM_ConfigClockSource+0x16c>
 800cd30:	2b30      	cmp	r3, #48	; 0x30
 800cd32:	d064      	beq.n	800cdfe <HAL_TIM_ConfigClockSource+0x15a>
 800cd34:	2b30      	cmp	r3, #48	; 0x30
 800cd36:	d86b      	bhi.n	800ce10 <HAL_TIM_ConfigClockSource+0x16c>
 800cd38:	2b20      	cmp	r3, #32
 800cd3a:	d060      	beq.n	800cdfe <HAL_TIM_ConfigClockSource+0x15a>
 800cd3c:	2b20      	cmp	r3, #32
 800cd3e:	d867      	bhi.n	800ce10 <HAL_TIM_ConfigClockSource+0x16c>
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d05c      	beq.n	800cdfe <HAL_TIM_ConfigClockSource+0x15a>
 800cd44:	2b10      	cmp	r3, #16
 800cd46:	d05a      	beq.n	800cdfe <HAL_TIM_ConfigClockSource+0x15a>
 800cd48:	e062      	b.n	800ce10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cd5a:	f000 facf 	bl	800d2fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	689b      	ldr	r3, [r3, #8]
 800cd64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cd6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	609a      	str	r2, [r3, #8]
      break;
 800cd76:	e04f      	b.n	800ce18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cd88:	f000 fab8 	bl	800d2fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	689a      	ldr	r2, [r3, #8]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cd9a:	609a      	str	r2, [r3, #8]
      break;
 800cd9c:	e03c      	b.n	800ce18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdaa:	461a      	mov	r2, r3
 800cdac:	f000 f976 	bl	800d09c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2150      	movs	r1, #80	; 0x50
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f000 fa85 	bl	800d2c6 <TIM_ITRx_SetConfig>
      break;
 800cdbc:	e02c      	b.n	800ce18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cdca:	461a      	mov	r2, r3
 800cdcc:	f000 f9d2 	bl	800d174 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2160      	movs	r1, #96	; 0x60
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f000 fa75 	bl	800d2c6 <TIM_ITRx_SetConfig>
      break;
 800cddc:	e01c      	b.n	800ce18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdea:	461a      	mov	r2, r3
 800cdec:	f000 f956 	bl	800d09c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2140      	movs	r1, #64	; 0x40
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f000 fa65 	bl	800d2c6 <TIM_ITRx_SetConfig>
      break;
 800cdfc:	e00c      	b.n	800ce18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4619      	mov	r1, r3
 800ce08:	4610      	mov	r0, r2
 800ce0a:	f000 fa5c 	bl	800d2c6 <TIM_ITRx_SetConfig>
      break;
 800ce0e:	e003      	b.n	800ce18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ce10:	2301      	movs	r3, #1
 800ce12:	73fb      	strb	r3, [r7, #15]
      break;
 800ce14:	e000      	b.n	800ce18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ce16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ce28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	fffeff88 	.word	0xfffeff88

0800ce38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b083      	sub	sp, #12
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ce40:	bf00      	nop
 800ce42:	370c      	adds	r7, #12
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr

0800ce4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ce54:	bf00      	nop
 800ce56:	370c      	adds	r7, #12
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b083      	sub	sp, #12
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ce68:	bf00      	nop
 800ce6a:	370c      	adds	r7, #12
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b085      	sub	sp, #20
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	4a40      	ldr	r2, [pc, #256]	; (800cf88 <TIM_Base_SetConfig+0x114>)
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d013      	beq.n	800ceb4 <TIM_Base_SetConfig+0x40>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce92:	d00f      	beq.n	800ceb4 <TIM_Base_SetConfig+0x40>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	4a3d      	ldr	r2, [pc, #244]	; (800cf8c <TIM_Base_SetConfig+0x118>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d00b      	beq.n	800ceb4 <TIM_Base_SetConfig+0x40>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	4a3c      	ldr	r2, [pc, #240]	; (800cf90 <TIM_Base_SetConfig+0x11c>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d007      	beq.n	800ceb4 <TIM_Base_SetConfig+0x40>
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	4a3b      	ldr	r2, [pc, #236]	; (800cf94 <TIM_Base_SetConfig+0x120>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d003      	beq.n	800ceb4 <TIM_Base_SetConfig+0x40>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	4a3a      	ldr	r2, [pc, #232]	; (800cf98 <TIM_Base_SetConfig+0x124>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d108      	bne.n	800cec6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ceba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	4313      	orrs	r3, r2
 800cec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	4a2f      	ldr	r2, [pc, #188]	; (800cf88 <TIM_Base_SetConfig+0x114>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d02b      	beq.n	800cf26 <TIM_Base_SetConfig+0xb2>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ced4:	d027      	beq.n	800cf26 <TIM_Base_SetConfig+0xb2>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	4a2c      	ldr	r2, [pc, #176]	; (800cf8c <TIM_Base_SetConfig+0x118>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d023      	beq.n	800cf26 <TIM_Base_SetConfig+0xb2>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	4a2b      	ldr	r2, [pc, #172]	; (800cf90 <TIM_Base_SetConfig+0x11c>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d01f      	beq.n	800cf26 <TIM_Base_SetConfig+0xb2>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	4a2a      	ldr	r2, [pc, #168]	; (800cf94 <TIM_Base_SetConfig+0x120>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d01b      	beq.n	800cf26 <TIM_Base_SetConfig+0xb2>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4a29      	ldr	r2, [pc, #164]	; (800cf98 <TIM_Base_SetConfig+0x124>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d017      	beq.n	800cf26 <TIM_Base_SetConfig+0xb2>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	4a28      	ldr	r2, [pc, #160]	; (800cf9c <TIM_Base_SetConfig+0x128>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d013      	beq.n	800cf26 <TIM_Base_SetConfig+0xb2>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4a27      	ldr	r2, [pc, #156]	; (800cfa0 <TIM_Base_SetConfig+0x12c>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d00f      	beq.n	800cf26 <TIM_Base_SetConfig+0xb2>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4a26      	ldr	r2, [pc, #152]	; (800cfa4 <TIM_Base_SetConfig+0x130>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d00b      	beq.n	800cf26 <TIM_Base_SetConfig+0xb2>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4a25      	ldr	r2, [pc, #148]	; (800cfa8 <TIM_Base_SetConfig+0x134>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d007      	beq.n	800cf26 <TIM_Base_SetConfig+0xb2>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	4a24      	ldr	r2, [pc, #144]	; (800cfac <TIM_Base_SetConfig+0x138>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d003      	beq.n	800cf26 <TIM_Base_SetConfig+0xb2>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	4a23      	ldr	r2, [pc, #140]	; (800cfb0 <TIM_Base_SetConfig+0x13c>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d108      	bne.n	800cf38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	4313      	orrs	r3, r2
 800cf36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	695b      	ldr	r3, [r3, #20]
 800cf42:	4313      	orrs	r3, r2
 800cf44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	689a      	ldr	r2, [r3, #8]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	4a0a      	ldr	r2, [pc, #40]	; (800cf88 <TIM_Base_SetConfig+0x114>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d003      	beq.n	800cf6c <TIM_Base_SetConfig+0xf8>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	4a0c      	ldr	r2, [pc, #48]	; (800cf98 <TIM_Base_SetConfig+0x124>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d103      	bne.n	800cf74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	691a      	ldr	r2, [r3, #16]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2201      	movs	r2, #1
 800cf78:	615a      	str	r2, [r3, #20]
}
 800cf7a:	bf00      	nop
 800cf7c:	3714      	adds	r7, #20
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	40010000 	.word	0x40010000
 800cf8c:	40000400 	.word	0x40000400
 800cf90:	40000800 	.word	0x40000800
 800cf94:	40000c00 	.word	0x40000c00
 800cf98:	40010400 	.word	0x40010400
 800cf9c:	40014000 	.word	0x40014000
 800cfa0:	40014400 	.word	0x40014400
 800cfa4:	40014800 	.word	0x40014800
 800cfa8:	40001800 	.word	0x40001800
 800cfac:	40001c00 	.word	0x40001c00
 800cfb0:	40002000 	.word	0x40002000

0800cfb4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b087      	sub	sp, #28
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]
 800cfc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	6a1b      	ldr	r3, [r3, #32]
 800cfc6:	f023 0201 	bic.w	r2, r3, #1
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	699b      	ldr	r3, [r3, #24]
 800cfd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	6a1b      	ldr	r3, [r3, #32]
 800cfd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	4a28      	ldr	r2, [pc, #160]	; (800d080 <TIM_TI1_SetConfig+0xcc>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d01b      	beq.n	800d01a <TIM_TI1_SetConfig+0x66>
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfe8:	d017      	beq.n	800d01a <TIM_TI1_SetConfig+0x66>
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	4a25      	ldr	r2, [pc, #148]	; (800d084 <TIM_TI1_SetConfig+0xd0>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d013      	beq.n	800d01a <TIM_TI1_SetConfig+0x66>
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	4a24      	ldr	r2, [pc, #144]	; (800d088 <TIM_TI1_SetConfig+0xd4>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d00f      	beq.n	800d01a <TIM_TI1_SetConfig+0x66>
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	4a23      	ldr	r2, [pc, #140]	; (800d08c <TIM_TI1_SetConfig+0xd8>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d00b      	beq.n	800d01a <TIM_TI1_SetConfig+0x66>
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	4a22      	ldr	r2, [pc, #136]	; (800d090 <TIM_TI1_SetConfig+0xdc>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d007      	beq.n	800d01a <TIM_TI1_SetConfig+0x66>
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	4a21      	ldr	r2, [pc, #132]	; (800d094 <TIM_TI1_SetConfig+0xe0>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d003      	beq.n	800d01a <TIM_TI1_SetConfig+0x66>
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	4a20      	ldr	r2, [pc, #128]	; (800d098 <TIM_TI1_SetConfig+0xe4>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d101      	bne.n	800d01e <TIM_TI1_SetConfig+0x6a>
 800d01a:	2301      	movs	r3, #1
 800d01c:	e000      	b.n	800d020 <TIM_TI1_SetConfig+0x6c>
 800d01e:	2300      	movs	r3, #0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d008      	beq.n	800d036 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	f023 0303 	bic.w	r3, r3, #3
 800d02a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d02c:	697a      	ldr	r2, [r7, #20]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	4313      	orrs	r3, r2
 800d032:	617b      	str	r3, [r7, #20]
 800d034:	e003      	b.n	800d03e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	f043 0301 	orr.w	r3, r3, #1
 800d03c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	011b      	lsls	r3, r3, #4
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	697a      	ldr	r2, [r7, #20]
 800d04e:	4313      	orrs	r3, r2
 800d050:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	f023 030a 	bic.w	r3, r3, #10
 800d058:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	f003 030a 	and.w	r3, r3, #10
 800d060:	693a      	ldr	r2, [r7, #16]
 800d062:	4313      	orrs	r3, r2
 800d064:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	697a      	ldr	r2, [r7, #20]
 800d06a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	693a      	ldr	r2, [r7, #16]
 800d070:	621a      	str	r2, [r3, #32]
}
 800d072:	bf00      	nop
 800d074:	371c      	adds	r7, #28
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	40010000 	.word	0x40010000
 800d084:	40000400 	.word	0x40000400
 800d088:	40000800 	.word	0x40000800
 800d08c:	40000c00 	.word	0x40000c00
 800d090:	40010400 	.word	0x40010400
 800d094:	40014000 	.word	0x40014000
 800d098:	40001800 	.word	0x40001800

0800d09c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b087      	sub	sp, #28
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6a1b      	ldr	r3, [r3, #32]
 800d0ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6a1b      	ldr	r3, [r3, #32]
 800d0b2:	f023 0201 	bic.w	r2, r3, #1
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	699b      	ldr	r3, [r3, #24]
 800d0be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d0c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	011b      	lsls	r3, r3, #4
 800d0cc:	693a      	ldr	r2, [r7, #16]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	f023 030a 	bic.w	r3, r3, #10
 800d0d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d0da:	697a      	ldr	r2, [r7, #20]
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	693a      	ldr	r2, [r7, #16]
 800d0e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	697a      	ldr	r2, [r7, #20]
 800d0ec:	621a      	str	r2, [r3, #32]
}
 800d0ee:	bf00      	nop
 800d0f0:	371c      	adds	r7, #28
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr

0800d0fa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d0fa:	b480      	push	{r7}
 800d0fc:	b087      	sub	sp, #28
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	60f8      	str	r0, [r7, #12]
 800d102:	60b9      	str	r1, [r7, #8]
 800d104:	607a      	str	r2, [r7, #4]
 800d106:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6a1b      	ldr	r3, [r3, #32]
 800d10c:	f023 0210 	bic.w	r2, r3, #16
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	699b      	ldr	r3, [r3, #24]
 800d118:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	6a1b      	ldr	r3, [r3, #32]
 800d11e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d126:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	021b      	lsls	r3, r3, #8
 800d12c:	697a      	ldr	r2, [r7, #20]
 800d12e:	4313      	orrs	r3, r2
 800d130:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	031b      	lsls	r3, r3, #12
 800d13e:	b29b      	uxth	r3, r3
 800d140:	697a      	ldr	r2, [r7, #20]
 800d142:	4313      	orrs	r3, r2
 800d144:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d14c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	011b      	lsls	r3, r3, #4
 800d152:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d156:	693a      	ldr	r2, [r7, #16]
 800d158:	4313      	orrs	r3, r2
 800d15a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	697a      	ldr	r2, [r7, #20]
 800d160:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	693a      	ldr	r2, [r7, #16]
 800d166:	621a      	str	r2, [r3, #32]
}
 800d168:	bf00      	nop
 800d16a:	371c      	adds	r7, #28
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d174:	b480      	push	{r7}
 800d176:	b087      	sub	sp, #28
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	6a1b      	ldr	r3, [r3, #32]
 800d184:	f023 0210 	bic.w	r2, r3, #16
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	699b      	ldr	r3, [r3, #24]
 800d190:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	6a1b      	ldr	r3, [r3, #32]
 800d196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d19e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	031b      	lsls	r3, r3, #12
 800d1a4:	697a      	ldr	r2, [r7, #20]
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d1b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	011b      	lsls	r3, r3, #4
 800d1b6:	693a      	ldr	r2, [r7, #16]
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	697a      	ldr	r2, [r7, #20]
 800d1c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	693a      	ldr	r2, [r7, #16]
 800d1c6:	621a      	str	r2, [r3, #32]
}
 800d1c8:	bf00      	nop
 800d1ca:	371c      	adds	r7, #28
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b087      	sub	sp, #28
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
 800d1e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	6a1b      	ldr	r3, [r3, #32]
 800d1e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	69db      	ldr	r3, [r3, #28]
 800d1f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	6a1b      	ldr	r3, [r3, #32]
 800d1f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	f023 0303 	bic.w	r3, r3, #3
 800d200:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800d202:	697a      	ldr	r2, [r7, #20]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4313      	orrs	r3, r2
 800d208:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d210:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	011b      	lsls	r3, r3, #4
 800d216:	b2db      	uxtb	r3, r3
 800d218:	697a      	ldr	r2, [r7, #20]
 800d21a:	4313      	orrs	r3, r2
 800d21c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d224:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	021b      	lsls	r3, r3, #8
 800d22a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800d22e:	693a      	ldr	r2, [r7, #16]
 800d230:	4313      	orrs	r3, r2
 800d232:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	697a      	ldr	r2, [r7, #20]
 800d238:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	693a      	ldr	r2, [r7, #16]
 800d23e:	621a      	str	r2, [r3, #32]
}
 800d240:	bf00      	nop
 800d242:	371c      	adds	r7, #28
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr

0800d24c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b087      	sub	sp, #28
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
 800d258:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	6a1b      	ldr	r3, [r3, #32]
 800d25e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	69db      	ldr	r3, [r3, #28]
 800d26a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	6a1b      	ldr	r3, [r3, #32]
 800d270:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d278:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	021b      	lsls	r3, r3, #8
 800d27e:	697a      	ldr	r2, [r7, #20]
 800d280:	4313      	orrs	r3, r2
 800d282:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d28a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	031b      	lsls	r3, r3, #12
 800d290:	b29b      	uxth	r3, r3
 800d292:	697a      	ldr	r2, [r7, #20]
 800d294:	4313      	orrs	r3, r2
 800d296:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800d29e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	031b      	lsls	r3, r3, #12
 800d2a4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800d2a8:	693a      	ldr	r2, [r7, #16]
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	697a      	ldr	r2, [r7, #20]
 800d2b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	693a      	ldr	r2, [r7, #16]
 800d2b8:	621a      	str	r2, [r3, #32]
}
 800d2ba:	bf00      	nop
 800d2bc:	371c      	adds	r7, #28
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c4:	4770      	bx	lr

0800d2c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d2c6:	b480      	push	{r7}
 800d2c8:	b085      	sub	sp, #20
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	689b      	ldr	r3, [r3, #8]
 800d2d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d2de:	683a      	ldr	r2, [r7, #0]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	f043 0307 	orr.w	r3, r3, #7
 800d2e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	609a      	str	r2, [r3, #8]
}
 800d2f0:	bf00      	nop
 800d2f2:	3714      	adds	r7, #20
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b087      	sub	sp, #28
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	607a      	str	r2, [r7, #4]
 800d308:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d316:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	021a      	lsls	r2, r3, #8
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	431a      	orrs	r2, r3
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	4313      	orrs	r3, r2
 800d324:	697a      	ldr	r2, [r7, #20]
 800d326:	4313      	orrs	r3, r2
 800d328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	697a      	ldr	r2, [r7, #20]
 800d32e:	609a      	str	r2, [r3, #8]
}
 800d330:	bf00      	nop
 800d332:	371c      	adds	r7, #28
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b087      	sub	sp, #28
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	f003 031f 	and.w	r3, r3, #31
 800d34e:	2201      	movs	r2, #1
 800d350:	fa02 f303 	lsl.w	r3, r2, r3
 800d354:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6a1a      	ldr	r2, [r3, #32]
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	43db      	mvns	r3, r3
 800d35e:	401a      	ands	r2, r3
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6a1a      	ldr	r2, [r3, #32]
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	f003 031f 	and.w	r3, r3, #31
 800d36e:	6879      	ldr	r1, [r7, #4]
 800d370:	fa01 f303 	lsl.w	r3, r1, r3
 800d374:	431a      	orrs	r2, r3
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	621a      	str	r2, [r3, #32]
}
 800d37a:	bf00      	nop
 800d37c:	371c      	adds	r7, #28
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
	...

0800d388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d101      	bne.n	800d3a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d39c:	2302      	movs	r3, #2
 800d39e:	e06d      	b.n	800d47c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2202      	movs	r2, #2
 800d3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a30      	ldr	r2, [pc, #192]	; (800d488 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d004      	beq.n	800d3d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	4a2f      	ldr	r2, [pc, #188]	; (800d48c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d108      	bne.n	800d3e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d3da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	68fa      	ldr	r2, [r7, #12]
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	68fa      	ldr	r2, [r7, #12]
 800d3fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4a20      	ldr	r2, [pc, #128]	; (800d488 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d022      	beq.n	800d450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d412:	d01d      	beq.n	800d450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a1d      	ldr	r2, [pc, #116]	; (800d490 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d018      	beq.n	800d450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4a1c      	ldr	r2, [pc, #112]	; (800d494 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d013      	beq.n	800d450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a1a      	ldr	r2, [pc, #104]	; (800d498 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d00e      	beq.n	800d450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a15      	ldr	r2, [pc, #84]	; (800d48c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d009      	beq.n	800d450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a16      	ldr	r2, [pc, #88]	; (800d49c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d004      	beq.n	800d450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4a15      	ldr	r2, [pc, #84]	; (800d4a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d10c      	bne.n	800d46a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d456:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	689b      	ldr	r3, [r3, #8]
 800d45c:	68ba      	ldr	r2, [r7, #8]
 800d45e:	4313      	orrs	r3, r2
 800d460:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	68ba      	ldr	r2, [r7, #8]
 800d468:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2201      	movs	r2, #1
 800d46e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2200      	movs	r2, #0
 800d476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d47a:	2300      	movs	r3, #0
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3714      	adds	r7, #20
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr
 800d488:	40010000 	.word	0x40010000
 800d48c:	40010400 	.word	0x40010400
 800d490:	40000400 	.word	0x40000400
 800d494:	40000800 	.word	0x40000800
 800d498:	40000c00 	.word	0x40000c00
 800d49c:	40014000 	.word	0x40014000
 800d4a0:	40001800 	.word	0x40001800

0800d4a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d4ac:	bf00      	nop
 800d4ae:	370c      	adds	r7, #12
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr

0800d4b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d4c0:	bf00      	nop
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d4d4:	bf00      	nop
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d101      	bne.n	800d4f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	e040      	b.n	800d574 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d106      	bne.n	800d508 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f7f6 fdc0 	bl	8004088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2224      	movs	r2, #36	; 0x24
 800d50c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f022 0201 	bic.w	r2, r2, #1
 800d51c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 f82c 	bl	800d57c <UART_SetConfig>
 800d524:	4603      	mov	r3, r0
 800d526:	2b01      	cmp	r3, #1
 800d528:	d101      	bne.n	800d52e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d52a:	2301      	movs	r3, #1
 800d52c:	e022      	b.n	800d574 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d532:	2b00      	cmp	r3, #0
 800d534:	d002      	beq.n	800d53c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 fa84 	bl	800da44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	685a      	ldr	r2, [r3, #4]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d54a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	689a      	ldr	r2, [r3, #8]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d55a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	681a      	ldr	r2, [r3, #0]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f042 0201 	orr.w	r2, r2, #1
 800d56a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 fb0b 	bl	800db88 <UART_CheckIdleState>
 800d572:	4603      	mov	r3, r0
}
 800d574:	4618      	mov	r0, r3
 800d576:	3708      	adds	r7, #8
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b088      	sub	sp, #32
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d584:	2300      	movs	r3, #0
 800d586:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	689a      	ldr	r2, [r3, #8]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	691b      	ldr	r3, [r3, #16]
 800d590:	431a      	orrs	r2, r3
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	695b      	ldr	r3, [r3, #20]
 800d596:	431a      	orrs	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	69db      	ldr	r3, [r3, #28]
 800d59c:	4313      	orrs	r3, r2
 800d59e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	4ba6      	ldr	r3, [pc, #664]	; (800d840 <UART_SetConfig+0x2c4>)
 800d5a8:	4013      	ands	r3, r2
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	6812      	ldr	r2, [r2, #0]
 800d5ae:	6979      	ldr	r1, [r7, #20]
 800d5b0:	430b      	orrs	r3, r1
 800d5b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	68da      	ldr	r2, [r3, #12]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	430a      	orrs	r2, r1
 800d5c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	699b      	ldr	r3, [r3, #24]
 800d5ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6a1b      	ldr	r3, [r3, #32]
 800d5d4:	697a      	ldr	r2, [r7, #20]
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	697a      	ldr	r2, [r7, #20]
 800d5ea:	430a      	orrs	r2, r1
 800d5ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4a94      	ldr	r2, [pc, #592]	; (800d844 <UART_SetConfig+0x2c8>)
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	d120      	bne.n	800d63a <UART_SetConfig+0xbe>
 800d5f8:	4b93      	ldr	r3, [pc, #588]	; (800d848 <UART_SetConfig+0x2cc>)
 800d5fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5fe:	f003 0303 	and.w	r3, r3, #3
 800d602:	2b03      	cmp	r3, #3
 800d604:	d816      	bhi.n	800d634 <UART_SetConfig+0xb8>
 800d606:	a201      	add	r2, pc, #4	; (adr r2, 800d60c <UART_SetConfig+0x90>)
 800d608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d60c:	0800d61d 	.word	0x0800d61d
 800d610:	0800d629 	.word	0x0800d629
 800d614:	0800d623 	.word	0x0800d623
 800d618:	0800d62f 	.word	0x0800d62f
 800d61c:	2301      	movs	r3, #1
 800d61e:	77fb      	strb	r3, [r7, #31]
 800d620:	e150      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d622:	2302      	movs	r3, #2
 800d624:	77fb      	strb	r3, [r7, #31]
 800d626:	e14d      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d628:	2304      	movs	r3, #4
 800d62a:	77fb      	strb	r3, [r7, #31]
 800d62c:	e14a      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d62e:	2308      	movs	r3, #8
 800d630:	77fb      	strb	r3, [r7, #31]
 800d632:	e147      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d634:	2310      	movs	r3, #16
 800d636:	77fb      	strb	r3, [r7, #31]
 800d638:	e144      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4a83      	ldr	r2, [pc, #524]	; (800d84c <UART_SetConfig+0x2d0>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d132      	bne.n	800d6aa <UART_SetConfig+0x12e>
 800d644:	4b80      	ldr	r3, [pc, #512]	; (800d848 <UART_SetConfig+0x2cc>)
 800d646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d64a:	f003 030c 	and.w	r3, r3, #12
 800d64e:	2b0c      	cmp	r3, #12
 800d650:	d828      	bhi.n	800d6a4 <UART_SetConfig+0x128>
 800d652:	a201      	add	r2, pc, #4	; (adr r2, 800d658 <UART_SetConfig+0xdc>)
 800d654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d658:	0800d68d 	.word	0x0800d68d
 800d65c:	0800d6a5 	.word	0x0800d6a5
 800d660:	0800d6a5 	.word	0x0800d6a5
 800d664:	0800d6a5 	.word	0x0800d6a5
 800d668:	0800d699 	.word	0x0800d699
 800d66c:	0800d6a5 	.word	0x0800d6a5
 800d670:	0800d6a5 	.word	0x0800d6a5
 800d674:	0800d6a5 	.word	0x0800d6a5
 800d678:	0800d693 	.word	0x0800d693
 800d67c:	0800d6a5 	.word	0x0800d6a5
 800d680:	0800d6a5 	.word	0x0800d6a5
 800d684:	0800d6a5 	.word	0x0800d6a5
 800d688:	0800d69f 	.word	0x0800d69f
 800d68c:	2300      	movs	r3, #0
 800d68e:	77fb      	strb	r3, [r7, #31]
 800d690:	e118      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d692:	2302      	movs	r3, #2
 800d694:	77fb      	strb	r3, [r7, #31]
 800d696:	e115      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d698:	2304      	movs	r3, #4
 800d69a:	77fb      	strb	r3, [r7, #31]
 800d69c:	e112      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d69e:	2308      	movs	r3, #8
 800d6a0:	77fb      	strb	r3, [r7, #31]
 800d6a2:	e10f      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d6a4:	2310      	movs	r3, #16
 800d6a6:	77fb      	strb	r3, [r7, #31]
 800d6a8:	e10c      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4a68      	ldr	r2, [pc, #416]	; (800d850 <UART_SetConfig+0x2d4>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d120      	bne.n	800d6f6 <UART_SetConfig+0x17a>
 800d6b4:	4b64      	ldr	r3, [pc, #400]	; (800d848 <UART_SetConfig+0x2cc>)
 800d6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d6be:	2b30      	cmp	r3, #48	; 0x30
 800d6c0:	d013      	beq.n	800d6ea <UART_SetConfig+0x16e>
 800d6c2:	2b30      	cmp	r3, #48	; 0x30
 800d6c4:	d814      	bhi.n	800d6f0 <UART_SetConfig+0x174>
 800d6c6:	2b20      	cmp	r3, #32
 800d6c8:	d009      	beq.n	800d6de <UART_SetConfig+0x162>
 800d6ca:	2b20      	cmp	r3, #32
 800d6cc:	d810      	bhi.n	800d6f0 <UART_SetConfig+0x174>
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d002      	beq.n	800d6d8 <UART_SetConfig+0x15c>
 800d6d2:	2b10      	cmp	r3, #16
 800d6d4:	d006      	beq.n	800d6e4 <UART_SetConfig+0x168>
 800d6d6:	e00b      	b.n	800d6f0 <UART_SetConfig+0x174>
 800d6d8:	2300      	movs	r3, #0
 800d6da:	77fb      	strb	r3, [r7, #31]
 800d6dc:	e0f2      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d6de:	2302      	movs	r3, #2
 800d6e0:	77fb      	strb	r3, [r7, #31]
 800d6e2:	e0ef      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d6e4:	2304      	movs	r3, #4
 800d6e6:	77fb      	strb	r3, [r7, #31]
 800d6e8:	e0ec      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d6ea:	2308      	movs	r3, #8
 800d6ec:	77fb      	strb	r3, [r7, #31]
 800d6ee:	e0e9      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d6f0:	2310      	movs	r3, #16
 800d6f2:	77fb      	strb	r3, [r7, #31]
 800d6f4:	e0e6      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4a56      	ldr	r2, [pc, #344]	; (800d854 <UART_SetConfig+0x2d8>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d120      	bne.n	800d742 <UART_SetConfig+0x1c6>
 800d700:	4b51      	ldr	r3, [pc, #324]	; (800d848 <UART_SetConfig+0x2cc>)
 800d702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d706:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d70a:	2bc0      	cmp	r3, #192	; 0xc0
 800d70c:	d013      	beq.n	800d736 <UART_SetConfig+0x1ba>
 800d70e:	2bc0      	cmp	r3, #192	; 0xc0
 800d710:	d814      	bhi.n	800d73c <UART_SetConfig+0x1c0>
 800d712:	2b80      	cmp	r3, #128	; 0x80
 800d714:	d009      	beq.n	800d72a <UART_SetConfig+0x1ae>
 800d716:	2b80      	cmp	r3, #128	; 0x80
 800d718:	d810      	bhi.n	800d73c <UART_SetConfig+0x1c0>
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d002      	beq.n	800d724 <UART_SetConfig+0x1a8>
 800d71e:	2b40      	cmp	r3, #64	; 0x40
 800d720:	d006      	beq.n	800d730 <UART_SetConfig+0x1b4>
 800d722:	e00b      	b.n	800d73c <UART_SetConfig+0x1c0>
 800d724:	2300      	movs	r3, #0
 800d726:	77fb      	strb	r3, [r7, #31]
 800d728:	e0cc      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d72a:	2302      	movs	r3, #2
 800d72c:	77fb      	strb	r3, [r7, #31]
 800d72e:	e0c9      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d730:	2304      	movs	r3, #4
 800d732:	77fb      	strb	r3, [r7, #31]
 800d734:	e0c6      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d736:	2308      	movs	r3, #8
 800d738:	77fb      	strb	r3, [r7, #31]
 800d73a:	e0c3      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d73c:	2310      	movs	r3, #16
 800d73e:	77fb      	strb	r3, [r7, #31]
 800d740:	e0c0      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4a44      	ldr	r2, [pc, #272]	; (800d858 <UART_SetConfig+0x2dc>)
 800d748:	4293      	cmp	r3, r2
 800d74a:	d125      	bne.n	800d798 <UART_SetConfig+0x21c>
 800d74c:	4b3e      	ldr	r3, [pc, #248]	; (800d848 <UART_SetConfig+0x2cc>)
 800d74e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d75a:	d017      	beq.n	800d78c <UART_SetConfig+0x210>
 800d75c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d760:	d817      	bhi.n	800d792 <UART_SetConfig+0x216>
 800d762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d766:	d00b      	beq.n	800d780 <UART_SetConfig+0x204>
 800d768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d76c:	d811      	bhi.n	800d792 <UART_SetConfig+0x216>
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d003      	beq.n	800d77a <UART_SetConfig+0x1fe>
 800d772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d776:	d006      	beq.n	800d786 <UART_SetConfig+0x20a>
 800d778:	e00b      	b.n	800d792 <UART_SetConfig+0x216>
 800d77a:	2300      	movs	r3, #0
 800d77c:	77fb      	strb	r3, [r7, #31]
 800d77e:	e0a1      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d780:	2302      	movs	r3, #2
 800d782:	77fb      	strb	r3, [r7, #31]
 800d784:	e09e      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d786:	2304      	movs	r3, #4
 800d788:	77fb      	strb	r3, [r7, #31]
 800d78a:	e09b      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d78c:	2308      	movs	r3, #8
 800d78e:	77fb      	strb	r3, [r7, #31]
 800d790:	e098      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d792:	2310      	movs	r3, #16
 800d794:	77fb      	strb	r3, [r7, #31]
 800d796:	e095      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4a2f      	ldr	r2, [pc, #188]	; (800d85c <UART_SetConfig+0x2e0>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d125      	bne.n	800d7ee <UART_SetConfig+0x272>
 800d7a2:	4b29      	ldr	r3, [pc, #164]	; (800d848 <UART_SetConfig+0x2cc>)
 800d7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d7ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d7b0:	d017      	beq.n	800d7e2 <UART_SetConfig+0x266>
 800d7b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d7b6:	d817      	bhi.n	800d7e8 <UART_SetConfig+0x26c>
 800d7b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7bc:	d00b      	beq.n	800d7d6 <UART_SetConfig+0x25a>
 800d7be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7c2:	d811      	bhi.n	800d7e8 <UART_SetConfig+0x26c>
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d003      	beq.n	800d7d0 <UART_SetConfig+0x254>
 800d7c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7cc:	d006      	beq.n	800d7dc <UART_SetConfig+0x260>
 800d7ce:	e00b      	b.n	800d7e8 <UART_SetConfig+0x26c>
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	77fb      	strb	r3, [r7, #31]
 800d7d4:	e076      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d7d6:	2302      	movs	r3, #2
 800d7d8:	77fb      	strb	r3, [r7, #31]
 800d7da:	e073      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d7dc:	2304      	movs	r3, #4
 800d7de:	77fb      	strb	r3, [r7, #31]
 800d7e0:	e070      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d7e2:	2308      	movs	r3, #8
 800d7e4:	77fb      	strb	r3, [r7, #31]
 800d7e6:	e06d      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d7e8:	2310      	movs	r3, #16
 800d7ea:	77fb      	strb	r3, [r7, #31]
 800d7ec:	e06a      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a1b      	ldr	r2, [pc, #108]	; (800d860 <UART_SetConfig+0x2e4>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d138      	bne.n	800d86a <UART_SetConfig+0x2ee>
 800d7f8:	4b13      	ldr	r3, [pc, #76]	; (800d848 <UART_SetConfig+0x2cc>)
 800d7fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d802:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d806:	d017      	beq.n	800d838 <UART_SetConfig+0x2bc>
 800d808:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d80c:	d82a      	bhi.n	800d864 <UART_SetConfig+0x2e8>
 800d80e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d812:	d00b      	beq.n	800d82c <UART_SetConfig+0x2b0>
 800d814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d818:	d824      	bhi.n	800d864 <UART_SetConfig+0x2e8>
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d003      	beq.n	800d826 <UART_SetConfig+0x2aa>
 800d81e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d822:	d006      	beq.n	800d832 <UART_SetConfig+0x2b6>
 800d824:	e01e      	b.n	800d864 <UART_SetConfig+0x2e8>
 800d826:	2300      	movs	r3, #0
 800d828:	77fb      	strb	r3, [r7, #31]
 800d82a:	e04b      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d82c:	2302      	movs	r3, #2
 800d82e:	77fb      	strb	r3, [r7, #31]
 800d830:	e048      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d832:	2304      	movs	r3, #4
 800d834:	77fb      	strb	r3, [r7, #31]
 800d836:	e045      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d838:	2308      	movs	r3, #8
 800d83a:	77fb      	strb	r3, [r7, #31]
 800d83c:	e042      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d83e:	bf00      	nop
 800d840:	efff69f3 	.word	0xefff69f3
 800d844:	40011000 	.word	0x40011000
 800d848:	40023800 	.word	0x40023800
 800d84c:	40004400 	.word	0x40004400
 800d850:	40004800 	.word	0x40004800
 800d854:	40004c00 	.word	0x40004c00
 800d858:	40005000 	.word	0x40005000
 800d85c:	40011400 	.word	0x40011400
 800d860:	40007800 	.word	0x40007800
 800d864:	2310      	movs	r3, #16
 800d866:	77fb      	strb	r3, [r7, #31]
 800d868:	e02c      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4a72      	ldr	r2, [pc, #456]	; (800da38 <UART_SetConfig+0x4bc>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d125      	bne.n	800d8c0 <UART_SetConfig+0x344>
 800d874:	4b71      	ldr	r3, [pc, #452]	; (800da3c <UART_SetConfig+0x4c0>)
 800d876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d87a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d87e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d882:	d017      	beq.n	800d8b4 <UART_SetConfig+0x338>
 800d884:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d888:	d817      	bhi.n	800d8ba <UART_SetConfig+0x33e>
 800d88a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d88e:	d00b      	beq.n	800d8a8 <UART_SetConfig+0x32c>
 800d890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d894:	d811      	bhi.n	800d8ba <UART_SetConfig+0x33e>
 800d896:	2b00      	cmp	r3, #0
 800d898:	d003      	beq.n	800d8a2 <UART_SetConfig+0x326>
 800d89a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d89e:	d006      	beq.n	800d8ae <UART_SetConfig+0x332>
 800d8a0:	e00b      	b.n	800d8ba <UART_SetConfig+0x33e>
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	77fb      	strb	r3, [r7, #31]
 800d8a6:	e00d      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d8a8:	2302      	movs	r3, #2
 800d8aa:	77fb      	strb	r3, [r7, #31]
 800d8ac:	e00a      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d8ae:	2304      	movs	r3, #4
 800d8b0:	77fb      	strb	r3, [r7, #31]
 800d8b2:	e007      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d8b4:	2308      	movs	r3, #8
 800d8b6:	77fb      	strb	r3, [r7, #31]
 800d8b8:	e004      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d8ba:	2310      	movs	r3, #16
 800d8bc:	77fb      	strb	r3, [r7, #31]
 800d8be:	e001      	b.n	800d8c4 <UART_SetConfig+0x348>
 800d8c0:	2310      	movs	r3, #16
 800d8c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	69db      	ldr	r3, [r3, #28]
 800d8c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8cc:	d15b      	bne.n	800d986 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800d8ce:	7ffb      	ldrb	r3, [r7, #31]
 800d8d0:	2b08      	cmp	r3, #8
 800d8d2:	d828      	bhi.n	800d926 <UART_SetConfig+0x3aa>
 800d8d4:	a201      	add	r2, pc, #4	; (adr r2, 800d8dc <UART_SetConfig+0x360>)
 800d8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8da:	bf00      	nop
 800d8dc:	0800d901 	.word	0x0800d901
 800d8e0:	0800d909 	.word	0x0800d909
 800d8e4:	0800d911 	.word	0x0800d911
 800d8e8:	0800d927 	.word	0x0800d927
 800d8ec:	0800d917 	.word	0x0800d917
 800d8f0:	0800d927 	.word	0x0800d927
 800d8f4:	0800d927 	.word	0x0800d927
 800d8f8:	0800d927 	.word	0x0800d927
 800d8fc:	0800d91f 	.word	0x0800d91f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d900:	f7fc fcbc 	bl	800a27c <HAL_RCC_GetPCLK1Freq>
 800d904:	61b8      	str	r0, [r7, #24]
        break;
 800d906:	e013      	b.n	800d930 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d908:	f7fc fccc 	bl	800a2a4 <HAL_RCC_GetPCLK2Freq>
 800d90c:	61b8      	str	r0, [r7, #24]
        break;
 800d90e:	e00f      	b.n	800d930 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d910:	4b4b      	ldr	r3, [pc, #300]	; (800da40 <UART_SetConfig+0x4c4>)
 800d912:	61bb      	str	r3, [r7, #24]
        break;
 800d914:	e00c      	b.n	800d930 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d916:	f7fc fbdf 	bl	800a0d8 <HAL_RCC_GetSysClockFreq>
 800d91a:	61b8      	str	r0, [r7, #24]
        break;
 800d91c:	e008      	b.n	800d930 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d91e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d922:	61bb      	str	r3, [r7, #24]
        break;
 800d924:	e004      	b.n	800d930 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800d926:	2300      	movs	r3, #0
 800d928:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d92a:	2301      	movs	r3, #1
 800d92c:	77bb      	strb	r3, [r7, #30]
        break;
 800d92e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d074      	beq.n	800da20 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d936:	69bb      	ldr	r3, [r7, #24]
 800d938:	005a      	lsls	r2, r3, #1
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	085b      	lsrs	r3, r3, #1
 800d940:	441a      	add	r2, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	fbb2 f3f3 	udiv	r3, r2, r3
 800d94a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	2b0f      	cmp	r3, #15
 800d950:	d916      	bls.n	800d980 <UART_SetConfig+0x404>
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d958:	d212      	bcs.n	800d980 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	f023 030f 	bic.w	r3, r3, #15
 800d962:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	085b      	lsrs	r3, r3, #1
 800d968:	b29b      	uxth	r3, r3
 800d96a:	f003 0307 	and.w	r3, r3, #7
 800d96e:	b29a      	uxth	r2, r3
 800d970:	89fb      	ldrh	r3, [r7, #14]
 800d972:	4313      	orrs	r3, r2
 800d974:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	89fa      	ldrh	r2, [r7, #14]
 800d97c:	60da      	str	r2, [r3, #12]
 800d97e:	e04f      	b.n	800da20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d980:	2301      	movs	r3, #1
 800d982:	77bb      	strb	r3, [r7, #30]
 800d984:	e04c      	b.n	800da20 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d986:	7ffb      	ldrb	r3, [r7, #31]
 800d988:	2b08      	cmp	r3, #8
 800d98a:	d828      	bhi.n	800d9de <UART_SetConfig+0x462>
 800d98c:	a201      	add	r2, pc, #4	; (adr r2, 800d994 <UART_SetConfig+0x418>)
 800d98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d992:	bf00      	nop
 800d994:	0800d9b9 	.word	0x0800d9b9
 800d998:	0800d9c1 	.word	0x0800d9c1
 800d99c:	0800d9c9 	.word	0x0800d9c9
 800d9a0:	0800d9df 	.word	0x0800d9df
 800d9a4:	0800d9cf 	.word	0x0800d9cf
 800d9a8:	0800d9df 	.word	0x0800d9df
 800d9ac:	0800d9df 	.word	0x0800d9df
 800d9b0:	0800d9df 	.word	0x0800d9df
 800d9b4:	0800d9d7 	.word	0x0800d9d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d9b8:	f7fc fc60 	bl	800a27c <HAL_RCC_GetPCLK1Freq>
 800d9bc:	61b8      	str	r0, [r7, #24]
        break;
 800d9be:	e013      	b.n	800d9e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d9c0:	f7fc fc70 	bl	800a2a4 <HAL_RCC_GetPCLK2Freq>
 800d9c4:	61b8      	str	r0, [r7, #24]
        break;
 800d9c6:	e00f      	b.n	800d9e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d9c8:	4b1d      	ldr	r3, [pc, #116]	; (800da40 <UART_SetConfig+0x4c4>)
 800d9ca:	61bb      	str	r3, [r7, #24]
        break;
 800d9cc:	e00c      	b.n	800d9e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d9ce:	f7fc fb83 	bl	800a0d8 <HAL_RCC_GetSysClockFreq>
 800d9d2:	61b8      	str	r0, [r7, #24]
        break;
 800d9d4:	e008      	b.n	800d9e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d9d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d9da:	61bb      	str	r3, [r7, #24]
        break;
 800d9dc:	e004      	b.n	800d9e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	77bb      	strb	r3, [r7, #30]
        break;
 800d9e6:	bf00      	nop
    }

    if (pclk != 0U)
 800d9e8:	69bb      	ldr	r3, [r7, #24]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d018      	beq.n	800da20 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	085a      	lsrs	r2, r3, #1
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	441a      	add	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800da00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	2b0f      	cmp	r3, #15
 800da06:	d909      	bls.n	800da1c <UART_SetConfig+0x4a0>
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da0e:	d205      	bcs.n	800da1c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	b29a      	uxth	r2, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	60da      	str	r2, [r3, #12]
 800da1a:	e001      	b.n	800da20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800da1c:	2301      	movs	r3, #1
 800da1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2200      	movs	r2, #0
 800da2a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800da2c:	7fbb      	ldrb	r3, [r7, #30]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3720      	adds	r7, #32
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	40007c00 	.word	0x40007c00
 800da3c:	40023800 	.word	0x40023800
 800da40:	00f42400 	.word	0x00f42400

0800da44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da50:	f003 0301 	and.w	r3, r3, #1
 800da54:	2b00      	cmp	r3, #0
 800da56:	d00a      	beq.n	800da6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	430a      	orrs	r2, r1
 800da6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da72:	f003 0302 	and.w	r3, r3, #2
 800da76:	2b00      	cmp	r3, #0
 800da78:	d00a      	beq.n	800da90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	430a      	orrs	r2, r1
 800da8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da94:	f003 0304 	and.w	r3, r3, #4
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d00a      	beq.n	800dab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	430a      	orrs	r2, r1
 800dab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dab6:	f003 0308 	and.w	r3, r3, #8
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00a      	beq.n	800dad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	430a      	orrs	r2, r1
 800dad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad8:	f003 0310 	and.w	r3, r3, #16
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d00a      	beq.n	800daf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	689b      	ldr	r3, [r3, #8]
 800dae6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	430a      	orrs	r2, r1
 800daf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafa:	f003 0320 	and.w	r3, r3, #32
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d00a      	beq.n	800db18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	430a      	orrs	r2, r1
 800db16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db20:	2b00      	cmp	r3, #0
 800db22:	d01a      	beq.n	800db5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	430a      	orrs	r2, r1
 800db38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db42:	d10a      	bne.n	800db5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	430a      	orrs	r2, r1
 800db58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db62:	2b00      	cmp	r3, #0
 800db64:	d00a      	beq.n	800db7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	430a      	orrs	r2, r1
 800db7a:	605a      	str	r2, [r3, #4]
  }
}
 800db7c:	bf00      	nop
 800db7e:	370c      	adds	r7, #12
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr

0800db88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b086      	sub	sp, #24
 800db8c:	af02      	add	r7, sp, #8
 800db8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800db98:	f7f8 fef2 	bl	8006980 <HAL_GetTick>
 800db9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f003 0308 	and.w	r3, r3, #8
 800dba8:	2b08      	cmp	r3, #8
 800dbaa:	d10e      	bne.n	800dbca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dbac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dbb0:	9300      	str	r3, [sp, #0]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f000 f81b 	bl	800dbf6 <UART_WaitOnFlagUntilTimeout>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d001      	beq.n	800dbca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dbc6:	2303      	movs	r3, #3
 800dbc8:	e011      	b.n	800dbee <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2220      	movs	r2, #32
 800dbce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2220      	movs	r2, #32
 800dbd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800dbec:	2300      	movs	r3, #0
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3710      	adds	r7, #16
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dbf6:	b580      	push	{r7, lr}
 800dbf8:	b09c      	sub	sp, #112	; 0x70
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	60f8      	str	r0, [r7, #12]
 800dbfe:	60b9      	str	r1, [r7, #8]
 800dc00:	603b      	str	r3, [r7, #0]
 800dc02:	4613      	mov	r3, r2
 800dc04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc06:	e0a7      	b.n	800dd58 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc0e:	f000 80a3 	beq.w	800dd58 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc12:	f7f8 feb5 	bl	8006980 <HAL_GetTick>
 800dc16:	4602      	mov	r2, r0
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	1ad3      	subs	r3, r2, r3
 800dc1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d302      	bcc.n	800dc28 <UART_WaitOnFlagUntilTimeout+0x32>
 800dc22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d13f      	bne.n	800dca8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc30:	e853 3f00 	ldrex	r3, [r3]
 800dc34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dc36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dc3c:	667b      	str	r3, [r7, #100]	; 0x64
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	461a      	mov	r2, r3
 800dc44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc48:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dc4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc4e:	e841 2300 	strex	r3, r2, [r1]
 800dc52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dc54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d1e6      	bne.n	800dc28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	3308      	adds	r3, #8
 800dc60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc64:	e853 3f00 	ldrex	r3, [r3]
 800dc68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6c:	f023 0301 	bic.w	r3, r3, #1
 800dc70:	663b      	str	r3, [r7, #96]	; 0x60
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	3308      	adds	r3, #8
 800dc78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dc7a:	64ba      	str	r2, [r7, #72]	; 0x48
 800dc7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc82:	e841 2300 	strex	r3, r2, [r1]
 800dc86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dc88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d1e5      	bne.n	800dc5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2220      	movs	r2, #32
 800dc92:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2220      	movs	r2, #32
 800dc98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800dca4:	2303      	movs	r3, #3
 800dca6:	e068      	b.n	800dd7a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f003 0304 	and.w	r3, r3, #4
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d050      	beq.n	800dd58 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	69db      	ldr	r3, [r3, #28]
 800dcbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dcc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dcc4:	d148      	bne.n	800dd58 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dcce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd8:	e853 3f00 	ldrex	r3, [r3]
 800dcdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dce4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	461a      	mov	r2, r3
 800dcec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcee:	637b      	str	r3, [r7, #52]	; 0x34
 800dcf0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dcf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcf6:	e841 2300 	strex	r3, r2, [r1]
 800dcfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d1e6      	bne.n	800dcd0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	3308      	adds	r3, #8
 800dd08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	e853 3f00 	ldrex	r3, [r3]
 800dd10:	613b      	str	r3, [r7, #16]
   return(result);
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	f023 0301 	bic.w	r3, r3, #1
 800dd18:	66bb      	str	r3, [r7, #104]	; 0x68
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	3308      	adds	r3, #8
 800dd20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dd22:	623a      	str	r2, [r7, #32]
 800dd24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd26:	69f9      	ldr	r1, [r7, #28]
 800dd28:	6a3a      	ldr	r2, [r7, #32]
 800dd2a:	e841 2300 	strex	r3, r2, [r1]
 800dd2e:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d1e5      	bne.n	800dd02 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2220      	movs	r2, #32
 800dd3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2220      	movs	r2, #32
 800dd40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2220      	movs	r2, #32
 800dd48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800dd54:	2303      	movs	r3, #3
 800dd56:	e010      	b.n	800dd7a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	69da      	ldr	r2, [r3, #28]
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	4013      	ands	r3, r2
 800dd62:	68ba      	ldr	r2, [r7, #8]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	bf0c      	ite	eq
 800dd68:	2301      	moveq	r3, #1
 800dd6a:	2300      	movne	r3, #0
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	461a      	mov	r2, r3
 800dd70:	79fb      	ldrb	r3, [r7, #7]
 800dd72:	429a      	cmp	r2, r3
 800dd74:	f43f af48 	beq.w	800dc08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dd78:	2300      	movs	r3, #0
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3770      	adds	r7, #112	; 0x70
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
	...

0800dd84 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b083      	sub	sp, #12
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d121      	bne.n	800ddda <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	4b27      	ldr	r3, [pc, #156]	; (800de38 <FMC_SDRAM_Init+0xb4>)
 800dd9c:	4013      	ands	r3, r2
 800dd9e:	683a      	ldr	r2, [r7, #0]
 800dda0:	6851      	ldr	r1, [r2, #4]
 800dda2:	683a      	ldr	r2, [r7, #0]
 800dda4:	6892      	ldr	r2, [r2, #8]
 800dda6:	4311      	orrs	r1, r2
 800dda8:	683a      	ldr	r2, [r7, #0]
 800ddaa:	68d2      	ldr	r2, [r2, #12]
 800ddac:	4311      	orrs	r1, r2
 800ddae:	683a      	ldr	r2, [r7, #0]
 800ddb0:	6912      	ldr	r2, [r2, #16]
 800ddb2:	4311      	orrs	r1, r2
 800ddb4:	683a      	ldr	r2, [r7, #0]
 800ddb6:	6952      	ldr	r2, [r2, #20]
 800ddb8:	4311      	orrs	r1, r2
 800ddba:	683a      	ldr	r2, [r7, #0]
 800ddbc:	6992      	ldr	r2, [r2, #24]
 800ddbe:	4311      	orrs	r1, r2
 800ddc0:	683a      	ldr	r2, [r7, #0]
 800ddc2:	69d2      	ldr	r2, [r2, #28]
 800ddc4:	4311      	orrs	r1, r2
 800ddc6:	683a      	ldr	r2, [r7, #0]
 800ddc8:	6a12      	ldr	r2, [r2, #32]
 800ddca:	4311      	orrs	r1, r2
 800ddcc:	683a      	ldr	r2, [r7, #0]
 800ddce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ddd0:	430a      	orrs	r2, r1
 800ddd2:	431a      	orrs	r2, r3
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	601a      	str	r2, [r3, #0]
 800ddd8:	e026      	b.n	800de28 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	69d9      	ldr	r1, [r3, #28]
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	6a1b      	ldr	r3, [r3, #32]
 800ddea:	4319      	orrs	r1, r3
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf0:	430b      	orrs	r3, r1
 800ddf2:	431a      	orrs	r2, r3
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	685a      	ldr	r2, [r3, #4]
 800ddfc:	4b0e      	ldr	r3, [pc, #56]	; (800de38 <FMC_SDRAM_Init+0xb4>)
 800ddfe:	4013      	ands	r3, r2
 800de00:	683a      	ldr	r2, [r7, #0]
 800de02:	6851      	ldr	r1, [r2, #4]
 800de04:	683a      	ldr	r2, [r7, #0]
 800de06:	6892      	ldr	r2, [r2, #8]
 800de08:	4311      	orrs	r1, r2
 800de0a:	683a      	ldr	r2, [r7, #0]
 800de0c:	68d2      	ldr	r2, [r2, #12]
 800de0e:	4311      	orrs	r1, r2
 800de10:	683a      	ldr	r2, [r7, #0]
 800de12:	6912      	ldr	r2, [r2, #16]
 800de14:	4311      	orrs	r1, r2
 800de16:	683a      	ldr	r2, [r7, #0]
 800de18:	6952      	ldr	r2, [r2, #20]
 800de1a:	4311      	orrs	r1, r2
 800de1c:	683a      	ldr	r2, [r7, #0]
 800de1e:	6992      	ldr	r2, [r2, #24]
 800de20:	430a      	orrs	r2, r1
 800de22:	431a      	orrs	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800de28:	2300      	movs	r3, #0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	370c      	adds	r7, #12
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr
 800de36:	bf00      	nop
 800de38:	ffff8000 	.word	0xffff8000

0800de3c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b085      	sub	sp, #20
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d128      	bne.n	800dea0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	689b      	ldr	r3, [r3, #8]
 800de52:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	1e59      	subs	r1, r3, #1
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	3b01      	subs	r3, #1
 800de62:	011b      	lsls	r3, r3, #4
 800de64:	4319      	orrs	r1, r3
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	3b01      	subs	r3, #1
 800de6c:	021b      	lsls	r3, r3, #8
 800de6e:	4319      	orrs	r1, r3
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	3b01      	subs	r3, #1
 800de76:	031b      	lsls	r3, r3, #12
 800de78:	4319      	orrs	r1, r3
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	691b      	ldr	r3, [r3, #16]
 800de7e:	3b01      	subs	r3, #1
 800de80:	041b      	lsls	r3, r3, #16
 800de82:	4319      	orrs	r1, r3
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	695b      	ldr	r3, [r3, #20]
 800de88:	3b01      	subs	r3, #1
 800de8a:	051b      	lsls	r3, r3, #20
 800de8c:	4319      	orrs	r1, r3
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	699b      	ldr	r3, [r3, #24]
 800de92:	3b01      	subs	r3, #1
 800de94:	061b      	lsls	r3, r3, #24
 800de96:	430b      	orrs	r3, r1
 800de98:	431a      	orrs	r2, r3
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	609a      	str	r2, [r3, #8]
 800de9e:	e02d      	b.n	800defc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	689a      	ldr	r2, [r3, #8]
 800dea4:	4b19      	ldr	r3, [pc, #100]	; (800df0c <FMC_SDRAM_Timing_Init+0xd0>)
 800dea6:	4013      	ands	r3, r2
 800dea8:	68ba      	ldr	r2, [r7, #8]
 800deaa:	68d2      	ldr	r2, [r2, #12]
 800deac:	3a01      	subs	r2, #1
 800deae:	0311      	lsls	r1, r2, #12
 800deb0:	68ba      	ldr	r2, [r7, #8]
 800deb2:	6952      	ldr	r2, [r2, #20]
 800deb4:	3a01      	subs	r2, #1
 800deb6:	0512      	lsls	r2, r2, #20
 800deb8:	430a      	orrs	r2, r1
 800deba:	431a      	orrs	r2, r3
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	1e59      	subs	r1, r3, #1
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	3b01      	subs	r3, #1
 800ded4:	011b      	lsls	r3, r3, #4
 800ded6:	4319      	orrs	r1, r3
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	689b      	ldr	r3, [r3, #8]
 800dedc:	3b01      	subs	r3, #1
 800dede:	021b      	lsls	r3, r3, #8
 800dee0:	4319      	orrs	r1, r3
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	691b      	ldr	r3, [r3, #16]
 800dee6:	3b01      	subs	r3, #1
 800dee8:	041b      	lsls	r3, r3, #16
 800deea:	4319      	orrs	r1, r3
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	699b      	ldr	r3, [r3, #24]
 800def0:	3b01      	subs	r3, #1
 800def2:	061b      	lsls	r3, r3, #24
 800def4:	430b      	orrs	r3, r1
 800def6:	431a      	orrs	r2, r3
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800defc:	2300      	movs	r3, #0
}
 800defe:	4618      	mov	r0, r3
 800df00:	3714      	adds	r7, #20
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr
 800df0a:	bf00      	nop
 800df0c:	ff0f0fff 	.word	0xff0f0fff

0800df10 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800df10:	b480      	push	{r7}
 800df12:	b085      	sub	sp, #20
 800df14:	af00      	add	r7, sp, #0
 800df16:	60f8      	str	r0, [r7, #12]
 800df18:	60b9      	str	r1, [r7, #8]
 800df1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	691a      	ldr	r2, [r3, #16]
 800df20:	4b0c      	ldr	r3, [pc, #48]	; (800df54 <FMC_SDRAM_SendCommand+0x44>)
 800df22:	4013      	ands	r3, r2
 800df24:	68ba      	ldr	r2, [r7, #8]
 800df26:	6811      	ldr	r1, [r2, #0]
 800df28:	68ba      	ldr	r2, [r7, #8]
 800df2a:	6852      	ldr	r2, [r2, #4]
 800df2c:	4311      	orrs	r1, r2
 800df2e:	68ba      	ldr	r2, [r7, #8]
 800df30:	6892      	ldr	r2, [r2, #8]
 800df32:	3a01      	subs	r2, #1
 800df34:	0152      	lsls	r2, r2, #5
 800df36:	4311      	orrs	r1, r2
 800df38:	68ba      	ldr	r2, [r7, #8]
 800df3a:	68d2      	ldr	r2, [r2, #12]
 800df3c:	0252      	lsls	r2, r2, #9
 800df3e:	430a      	orrs	r2, r1
 800df40:	431a      	orrs	r2, r3
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800df46:	2300      	movs	r3, #0
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3714      	adds	r7, #20
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr
 800df54:	ffc00000 	.word	0xffc00000

0800df58 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	695a      	ldr	r2, [r3, #20]
 800df66:	4b07      	ldr	r3, [pc, #28]	; (800df84 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800df68:	4013      	ands	r3, r2
 800df6a:	683a      	ldr	r2, [r7, #0]
 800df6c:	0052      	lsls	r2, r2, #1
 800df6e:	431a      	orrs	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800df74:	2300      	movs	r3, #0
}
 800df76:	4618      	mov	r0, r3
 800df78:	370c      	adds	r7, #12
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	ffffc001 	.word	0xffffc001

0800df88 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800df88:	b084      	sub	sp, #16
 800df8a:	b480      	push	{r7}
 800df8c:	b085      	sub	sp, #20
 800df8e:	af00      	add	r7, sp, #0
 800df90:	6078      	str	r0, [r7, #4]
 800df92:	f107 001c 	add.w	r0, r7, #28
 800df96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800df9a:	2300      	movs	r3, #0
 800df9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800df9e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800dfa0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800dfa2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800dfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800dfa6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800dfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800dfaa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800dfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800dfae:	431a      	orrs	r2, r3
             Init.ClockDiv
 800dfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800dfb2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800dfb4:	68fa      	ldr	r2, [r7, #12]
 800dfb6:	4313      	orrs	r3, r2
 800dfb8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	685a      	ldr	r2, [r3, #4]
 800dfbe:	4b07      	ldr	r3, [pc, #28]	; (800dfdc <SDMMC_Init+0x54>)
 800dfc0:	4013      	ands	r3, r2
 800dfc2:	68fa      	ldr	r2, [r7, #12]
 800dfc4:	431a      	orrs	r2, r3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dfca:	2300      	movs	r3, #0
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3714      	adds	r7, #20
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	b004      	add	sp, #16
 800dfd8:	4770      	bx	lr
 800dfda:	bf00      	nop
 800dfdc:	ffff8100 	.word	0xffff8100

0800dfe0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	370c      	adds	r7, #12
 800dff2:	46bd      	mov	sp, r7
 800dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff8:	4770      	bx	lr

0800dffa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800dffa:	b480      	push	{r7}
 800dffc:	b083      	sub	sp, #12
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
 800e002:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e00e:	2300      	movs	r3, #0
}
 800e010:	4618      	mov	r0, r3
 800e012:	370c      	adds	r7, #12
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2203      	movs	r2, #3
 800e028:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e02a:	2300      	movs	r3, #0
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	370c      	adds	r7, #12
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr

0800e038 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f003 0303 	and.w	r3, r3, #3
}
 800e048:	4618      	mov	r0, r3
 800e04a:	370c      	adds	r7, #12
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr

0800e054 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e054:	b480      	push	{r7}
 800e056:	b085      	sub	sp, #20
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e05e:	2300      	movs	r3, #0
 800e060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e072:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e078:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e07e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e080:	68fa      	ldr	r2, [r7, #12]
 800e082:	4313      	orrs	r3, r2
 800e084:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	68da      	ldr	r2, [r3, #12]
 800e08a:	4b06      	ldr	r3, [pc, #24]	; (800e0a4 <SDMMC_SendCommand+0x50>)
 800e08c:	4013      	ands	r3, r2
 800e08e:	68fa      	ldr	r2, [r7, #12]
 800e090:	431a      	orrs	r2, r3
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e096:	2300      	movs	r3, #0
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3714      	adds	r7, #20
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr
 800e0a4:	fffff000 	.word	0xfffff000

0800e0a8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b083      	sub	sp, #12
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	691b      	ldr	r3, [r3, #16]
 800e0b4:	b2db      	uxtb	r3, r3
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	370c      	adds	r7, #12
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr

0800e0c2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e0c2:	b480      	push	{r7}
 800e0c4:	b085      	sub	sp, #20
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
 800e0ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	3314      	adds	r3, #20
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	681b      	ldr	r3, [r3, #0]
}  
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3714      	adds	r7, #20
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	685a      	ldr	r2, [r3, #4]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e10e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e114:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e11a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e11c:	68fa      	ldr	r2, [r7, #12]
 800e11e:	4313      	orrs	r3, r2
 800e120:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e126:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	431a      	orrs	r2, r3
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e132:	2300      	movs	r3, #0

}
 800e134:	4618      	mov	r0, r3
 800e136:	3714      	adds	r7, #20
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr

0800e140 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b088      	sub	sp, #32
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e14e:	2310      	movs	r3, #16
 800e150:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e152:	2340      	movs	r3, #64	; 0x40
 800e154:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e156:	2300      	movs	r3, #0
 800e158:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e15a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e15e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e160:	f107 0308 	add.w	r3, r7, #8
 800e164:	4619      	mov	r1, r3
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f7ff ff74 	bl	800e054 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e16c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e170:	2110      	movs	r1, #16
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 f9d6 	bl	800e524 <SDMMC_GetCmdResp1>
 800e178:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e17a:	69fb      	ldr	r3, [r7, #28]
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3720      	adds	r7, #32
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b088      	sub	sp, #32
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e192:	2311      	movs	r3, #17
 800e194:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e196:	2340      	movs	r3, #64	; 0x40
 800e198:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e19a:	2300      	movs	r3, #0
 800e19c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e19e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e1a4:	f107 0308 	add.w	r3, r7, #8
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f7ff ff52 	bl	800e054 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e1b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1b4:	2111      	movs	r1, #17
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 f9b4 	bl	800e524 <SDMMC_GetCmdResp1>
 800e1bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1be:	69fb      	ldr	r3, [r7, #28]
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3720      	adds	r7, #32
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b088      	sub	sp, #32
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e1d6:	2312      	movs	r3, #18
 800e1d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e1da:	2340      	movs	r3, #64	; 0x40
 800e1dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e1e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e1e8:	f107 0308 	add.w	r3, r7, #8
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f7ff ff30 	bl	800e054 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e1f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1f8:	2112      	movs	r1, #18
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 f992 	bl	800e524 <SDMMC_GetCmdResp1>
 800e200:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e202:	69fb      	ldr	r3, [r7, #28]
}
 800e204:	4618      	mov	r0, r3
 800e206:	3720      	adds	r7, #32
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b088      	sub	sp, #32
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e21a:	2318      	movs	r3, #24
 800e21c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e21e:	2340      	movs	r3, #64	; 0x40
 800e220:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e222:	2300      	movs	r3, #0
 800e224:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e22a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e22c:	f107 0308 	add.w	r3, r7, #8
 800e230:	4619      	mov	r1, r3
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f7ff ff0e 	bl	800e054 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e238:	f241 3288 	movw	r2, #5000	; 0x1388
 800e23c:	2118      	movs	r1, #24
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f000 f970 	bl	800e524 <SDMMC_GetCmdResp1>
 800e244:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e246:	69fb      	ldr	r3, [r7, #28]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3720      	adds	r7, #32
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b088      	sub	sp, #32
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e25e:	2319      	movs	r3, #25
 800e260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e262:	2340      	movs	r3, #64	; 0x40
 800e264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e266:	2300      	movs	r3, #0
 800e268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e26a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e26e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e270:	f107 0308 	add.w	r3, r7, #8
 800e274:	4619      	mov	r1, r3
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f7ff feec 	bl	800e054 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e27c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e280:	2119      	movs	r1, #25
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f000 f94e 	bl	800e524 <SDMMC_GetCmdResp1>
 800e288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e28a:	69fb      	ldr	r3, [r7, #28]
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3720      	adds	r7, #32
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b088      	sub	sp, #32
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e29c:	2300      	movs	r3, #0
 800e29e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e2a0:	230c      	movs	r3, #12
 800e2a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2a4:	2340      	movs	r3, #64	; 0x40
 800e2a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2b2:	f107 0308 	add.w	r3, r7, #8
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f7ff fecb 	bl	800e054 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e2be:	4a05      	ldr	r2, [pc, #20]	; (800e2d4 <SDMMC_CmdStopTransfer+0x40>)
 800e2c0:	210c      	movs	r1, #12
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 f92e 	bl	800e524 <SDMMC_GetCmdResp1>
 800e2c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2ca:	69fb      	ldr	r3, [r7, #28]
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3720      	adds	r7, #32
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	05f5e100 	.word	0x05f5e100

0800e2d8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b08a      	sub	sp, #40	; 0x28
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	60f8      	str	r0, [r7, #12]
 800e2e0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e2e8:	2307      	movs	r3, #7
 800e2ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2ec:	2340      	movs	r3, #64	; 0x40
 800e2ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2f8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2fa:	f107 0310 	add.w	r3, r7, #16
 800e2fe:	4619      	mov	r1, r3
 800e300:	68f8      	ldr	r0, [r7, #12]
 800e302:	f7ff fea7 	bl	800e054 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e306:	f241 3288 	movw	r2, #5000	; 0x1388
 800e30a:	2107      	movs	r1, #7
 800e30c:	68f8      	ldr	r0, [r7, #12]
 800e30e:	f000 f909 	bl	800e524 <SDMMC_GetCmdResp1>
 800e312:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e316:	4618      	mov	r0, r3
 800e318:	3728      	adds	r7, #40	; 0x28
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}

0800e31e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e31e:	b580      	push	{r7, lr}
 800e320:	b088      	sub	sp, #32
 800e322:	af00      	add	r7, sp, #0
 800e324:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e326:	2300      	movs	r3, #0
 800e328:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e32a:	2300      	movs	r3, #0
 800e32c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e32e:	2300      	movs	r3, #0
 800e330:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e332:	2300      	movs	r3, #0
 800e334:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e33a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e33c:	f107 0308 	add.w	r3, r7, #8
 800e340:	4619      	mov	r1, r3
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f7ff fe86 	bl	800e054 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 fb23 	bl	800e994 <SDMMC_GetCmdError>
 800e34e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e350:	69fb      	ldr	r3, [r7, #28]
}
 800e352:	4618      	mov	r0, r3
 800e354:	3720      	adds	r7, #32
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b088      	sub	sp, #32
 800e35e:	af00      	add	r7, sp, #0
 800e360:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e362:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e366:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e368:	2308      	movs	r3, #8
 800e36a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e36c:	2340      	movs	r3, #64	; 0x40
 800e36e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e370:	2300      	movs	r3, #0
 800e372:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e378:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e37a:	f107 0308 	add.w	r3, r7, #8
 800e37e:	4619      	mov	r1, r3
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f7ff fe67 	bl	800e054 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f000 fab6 	bl	800e8f8 <SDMMC_GetCmdResp7>
 800e38c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e38e:	69fb      	ldr	r3, [r7, #28]
}
 800e390:	4618      	mov	r0, r3
 800e392:	3720      	adds	r7, #32
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b088      	sub	sp, #32
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e3a6:	2337      	movs	r3, #55	; 0x37
 800e3a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3aa:	2340      	movs	r3, #64	; 0x40
 800e3ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3b8:	f107 0308 	add.w	r3, r7, #8
 800e3bc:	4619      	mov	r1, r3
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f7ff fe48 	bl	800e054 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e3c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3c8:	2137      	movs	r1, #55	; 0x37
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 f8aa 	bl	800e524 <SDMMC_GetCmdResp1>
 800e3d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3d2:	69fb      	ldr	r3, [r7, #28]
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3720      	adds	r7, #32
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b088      	sub	sp, #32
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e3e6:	683a      	ldr	r2, [r7, #0]
 800e3e8:	4b0d      	ldr	r3, [pc, #52]	; (800e420 <SDMMC_CmdAppOperCommand+0x44>)
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e3ee:	2329      	movs	r3, #41	; 0x29
 800e3f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3f2:	2340      	movs	r3, #64	; 0x40
 800e3f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e400:	f107 0308 	add.w	r3, r7, #8
 800e404:	4619      	mov	r1, r3
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f7ff fe24 	bl	800e054 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f000 f9bf 	bl	800e790 <SDMMC_GetCmdResp3>
 800e412:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e414:	69fb      	ldr	r3, [r7, #28]
}
 800e416:	4618      	mov	r0, r3
 800e418:	3720      	adds	r7, #32
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	80100000 	.word	0x80100000

0800e424 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b088      	sub	sp, #32
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e42c:	2300      	movs	r3, #0
 800e42e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e430:	2302      	movs	r3, #2
 800e432:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e434:	23c0      	movs	r3, #192	; 0xc0
 800e436:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e438:	2300      	movs	r3, #0
 800e43a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e43c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e440:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e442:	f107 0308 	add.w	r3, r7, #8
 800e446:	4619      	mov	r1, r3
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f7ff fe03 	bl	800e054 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f000 f956 	bl	800e700 <SDMMC_GetCmdResp2>
 800e454:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e456:	69fb      	ldr	r3, [r7, #28]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3720      	adds	r7, #32
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b088      	sub	sp, #32
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e46e:	2309      	movs	r3, #9
 800e470:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e472:	23c0      	movs	r3, #192	; 0xc0
 800e474:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e476:	2300      	movs	r3, #0
 800e478:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e47a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e47e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e480:	f107 0308 	add.w	r3, r7, #8
 800e484:	4619      	mov	r1, r3
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f7ff fde4 	bl	800e054 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 f937 	bl	800e700 <SDMMC_GetCmdResp2>
 800e492:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e494:	69fb      	ldr	r3, [r7, #28]
}
 800e496:	4618      	mov	r0, r3
 800e498:	3720      	adds	r7, #32
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}

0800e49e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e49e:	b580      	push	{r7, lr}
 800e4a0:	b088      	sub	sp, #32
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	6078      	str	r0, [r7, #4]
 800e4a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e4ac:	2303      	movs	r3, #3
 800e4ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4b0:	2340      	movs	r3, #64	; 0x40
 800e4b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4be:	f107 0308 	add.w	r3, r7, #8
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f7ff fdc5 	bl	800e054 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e4ca:	683a      	ldr	r2, [r7, #0]
 800e4cc:	2103      	movs	r1, #3
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f000 f99c 	bl	800e80c <SDMMC_GetCmdResp6>
 800e4d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4d6:	69fb      	ldr	r3, [r7, #28]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3720      	adds	r7, #32
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b088      	sub	sp, #32
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e4ee:	230d      	movs	r3, #13
 800e4f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4f2:	2340      	movs	r3, #64	; 0x40
 800e4f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e500:	f107 0308 	add.w	r3, r7, #8
 800e504:	4619      	mov	r1, r3
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f7ff fda4 	bl	800e054 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e50c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e510:	210d      	movs	r1, #13
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f000 f806 	bl	800e524 <SDMMC_GetCmdResp1>
 800e518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e51a:	69fb      	ldr	r3, [r7, #28]
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3720      	adds	r7, #32
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b088      	sub	sp, #32
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	460b      	mov	r3, r1
 800e52e:	607a      	str	r2, [r7, #4]
 800e530:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e532:	4b70      	ldr	r3, [pc, #448]	; (800e6f4 <SDMMC_GetCmdResp1+0x1d0>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	4a70      	ldr	r2, [pc, #448]	; (800e6f8 <SDMMC_GetCmdResp1+0x1d4>)
 800e538:	fba2 2303 	umull	r2, r3, r2, r3
 800e53c:	0a5a      	lsrs	r2, r3, #9
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	fb02 f303 	mul.w	r3, r2, r3
 800e544:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e546:	69fb      	ldr	r3, [r7, #28]
 800e548:	1e5a      	subs	r2, r3, #1
 800e54a:	61fa      	str	r2, [r7, #28]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d102      	bne.n	800e556 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e550:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e554:	e0c9      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e55a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e55c:	69bb      	ldr	r3, [r7, #24]
 800e55e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e562:	2b00      	cmp	r3, #0
 800e564:	d0ef      	beq.n	800e546 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e566:	69bb      	ldr	r3, [r7, #24]
 800e568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d1ea      	bne.n	800e546 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e574:	f003 0304 	and.w	r3, r3, #4
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d004      	beq.n	800e586 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2204      	movs	r2, #4
 800e580:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e582:	2304      	movs	r3, #4
 800e584:	e0b1      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e58a:	f003 0301 	and.w	r3, r3, #1
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d004      	beq.n	800e59c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2201      	movs	r2, #1
 800e596:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e598:	2301      	movs	r3, #1
 800e59a:	e0a6      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	22c5      	movs	r2, #197	; 0xc5
 800e5a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e5a2:	68f8      	ldr	r0, [r7, #12]
 800e5a4:	f7ff fd80 	bl	800e0a8 <SDMMC_GetCommandResponse>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	7afb      	ldrb	r3, [r7, #11]
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d001      	beq.n	800e5b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e099      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e5b6:	2100      	movs	r1, #0
 800e5b8:	68f8      	ldr	r0, [r7, #12]
 800e5ba:	f7ff fd82 	bl	800e0c2 <SDMMC_GetResponse>
 800e5be:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e5c0:	697a      	ldr	r2, [r7, #20]
 800e5c2:	4b4e      	ldr	r3, [pc, #312]	; (800e6fc <SDMMC_GetCmdResp1+0x1d8>)
 800e5c4:	4013      	ands	r3, r2
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d101      	bne.n	800e5ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	e08d      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	da02      	bge.n	800e5da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e5d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e5d8:	e087      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d001      	beq.n	800e5e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e5e4:	2340      	movs	r3, #64	; 0x40
 800e5e6:	e080      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d001      	beq.n	800e5f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e5f2:	2380      	movs	r3, #128	; 0x80
 800e5f4:	e079      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d002      	beq.n	800e606 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e600:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e604:	e071      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d002      	beq.n	800e616 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e610:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e614:	e069      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d002      	beq.n	800e626 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e624:	e061      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d002      	beq.n	800e636 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e630:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e634:	e059      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d002      	beq.n	800e646 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e644:	e051      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d002      	beq.n	800e656 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e654:	e049      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d002      	beq.n	800e666 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e660:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e664:	e041      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d002      	beq.n	800e676 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e674:	e039      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d002      	beq.n	800e686 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e680:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e684:	e031      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d002      	beq.n	800e696 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e690:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e694:	e029      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d002      	beq.n	800e6a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e6a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e6a4:	e021      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d002      	beq.n	800e6b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e6b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e6b4:	e019      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d002      	beq.n	800e6c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e6c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e6c4:	e011      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d002      	beq.n	800e6d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e6d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e6d4:	e009      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	f003 0308 	and.w	r3, r3, #8
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d002      	beq.n	800e6e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e6e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e6e4:	e001      	b.n	800e6ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e6e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3720      	adds	r7, #32
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	20000080 	.word	0x20000080
 800e6f8:	10624dd3 	.word	0x10624dd3
 800e6fc:	fdffe008 	.word	0xfdffe008

0800e700 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e700:	b480      	push	{r7}
 800e702:	b085      	sub	sp, #20
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e708:	4b1f      	ldr	r3, [pc, #124]	; (800e788 <SDMMC_GetCmdResp2+0x88>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4a1f      	ldr	r2, [pc, #124]	; (800e78c <SDMMC_GetCmdResp2+0x8c>)
 800e70e:	fba2 2303 	umull	r2, r3, r2, r3
 800e712:	0a5b      	lsrs	r3, r3, #9
 800e714:	f241 3288 	movw	r2, #5000	; 0x1388
 800e718:	fb02 f303 	mul.w	r3, r2, r3
 800e71c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	1e5a      	subs	r2, r3, #1
 800e722:	60fa      	str	r2, [r7, #12]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d102      	bne.n	800e72e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e728:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e72c:	e026      	b.n	800e77c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e732:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d0ef      	beq.n	800e71e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e744:	2b00      	cmp	r3, #0
 800e746:	d1ea      	bne.n	800e71e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e74c:	f003 0304 	and.w	r3, r3, #4
 800e750:	2b00      	cmp	r3, #0
 800e752:	d004      	beq.n	800e75e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2204      	movs	r2, #4
 800e758:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e75a:	2304      	movs	r3, #4
 800e75c:	e00e      	b.n	800e77c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e762:	f003 0301 	and.w	r3, r3, #1
 800e766:	2b00      	cmp	r3, #0
 800e768:	d004      	beq.n	800e774 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2201      	movs	r2, #1
 800e76e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e770:	2301      	movs	r3, #1
 800e772:	e003      	b.n	800e77c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	22c5      	movs	r2, #197	; 0xc5
 800e778:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e77a:	2300      	movs	r3, #0
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3714      	adds	r7, #20
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr
 800e788:	20000080 	.word	0x20000080
 800e78c:	10624dd3 	.word	0x10624dd3

0800e790 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e790:	b480      	push	{r7}
 800e792:	b085      	sub	sp, #20
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e798:	4b1a      	ldr	r3, [pc, #104]	; (800e804 <SDMMC_GetCmdResp3+0x74>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a1a      	ldr	r2, [pc, #104]	; (800e808 <SDMMC_GetCmdResp3+0x78>)
 800e79e:	fba2 2303 	umull	r2, r3, r2, r3
 800e7a2:	0a5b      	lsrs	r3, r3, #9
 800e7a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7a8:	fb02 f303 	mul.w	r3, r2, r3
 800e7ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	1e5a      	subs	r2, r3, #1
 800e7b2:	60fa      	str	r2, [r7, #12]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d102      	bne.n	800e7be <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e7b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7bc:	e01b      	b.n	800e7f6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d0ef      	beq.n	800e7ae <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d1ea      	bne.n	800e7ae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7dc:	f003 0304 	and.w	r3, r3, #4
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d004      	beq.n	800e7ee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2204      	movs	r2, #4
 800e7e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7ea:	2304      	movs	r3, #4
 800e7ec:	e003      	b.n	800e7f6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	22c5      	movs	r2, #197	; 0xc5
 800e7f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e7f4:	2300      	movs	r3, #0
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3714      	adds	r7, #20
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr
 800e802:	bf00      	nop
 800e804:	20000080 	.word	0x20000080
 800e808:	10624dd3 	.word	0x10624dd3

0800e80c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b088      	sub	sp, #32
 800e810:	af00      	add	r7, sp, #0
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	460b      	mov	r3, r1
 800e816:	607a      	str	r2, [r7, #4]
 800e818:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e81a:	4b35      	ldr	r3, [pc, #212]	; (800e8f0 <SDMMC_GetCmdResp6+0xe4>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	4a35      	ldr	r2, [pc, #212]	; (800e8f4 <SDMMC_GetCmdResp6+0xe8>)
 800e820:	fba2 2303 	umull	r2, r3, r2, r3
 800e824:	0a5b      	lsrs	r3, r3, #9
 800e826:	f241 3288 	movw	r2, #5000	; 0x1388
 800e82a:	fb02 f303 	mul.w	r3, r2, r3
 800e82e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e830:	69fb      	ldr	r3, [r7, #28]
 800e832:	1e5a      	subs	r2, r3, #1
 800e834:	61fa      	str	r2, [r7, #28]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d102      	bne.n	800e840 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e83a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e83e:	e052      	b.n	800e8e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e844:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d0ef      	beq.n	800e830 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e850:	69bb      	ldr	r3, [r7, #24]
 800e852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e856:	2b00      	cmp	r3, #0
 800e858:	d1ea      	bne.n	800e830 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e85e:	f003 0304 	and.w	r3, r3, #4
 800e862:	2b00      	cmp	r3, #0
 800e864:	d004      	beq.n	800e870 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2204      	movs	r2, #4
 800e86a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e86c:	2304      	movs	r3, #4
 800e86e:	e03a      	b.n	800e8e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e874:	f003 0301 	and.w	r3, r3, #1
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d004      	beq.n	800e886 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	2201      	movs	r2, #1
 800e880:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e882:	2301      	movs	r3, #1
 800e884:	e02f      	b.n	800e8e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	f7ff fc0e 	bl	800e0a8 <SDMMC_GetCommandResponse>
 800e88c:	4603      	mov	r3, r0
 800e88e:	461a      	mov	r2, r3
 800e890:	7afb      	ldrb	r3, [r7, #11]
 800e892:	4293      	cmp	r3, r2
 800e894:	d001      	beq.n	800e89a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e896:	2301      	movs	r3, #1
 800e898:	e025      	b.n	800e8e6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	22c5      	movs	r2, #197	; 0xc5
 800e89e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e8a0:	2100      	movs	r1, #0
 800e8a2:	68f8      	ldr	r0, [r7, #12]
 800e8a4:	f7ff fc0d 	bl	800e0c2 <SDMMC_GetResponse>
 800e8a8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d106      	bne.n	800e8c2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	0c1b      	lsrs	r3, r3, #16
 800e8b8:	b29a      	uxth	r2, r3
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	e011      	b.n	800e8e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d002      	beq.n	800e8d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e8cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e8d0:	e009      	b.n	800e8e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d002      	beq.n	800e8e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e8dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e8e0:	e001      	b.n	800e8e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e8e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3720      	adds	r7, #32
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	20000080 	.word	0x20000080
 800e8f4:	10624dd3 	.word	0x10624dd3

0800e8f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b085      	sub	sp, #20
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e900:	4b22      	ldr	r3, [pc, #136]	; (800e98c <SDMMC_GetCmdResp7+0x94>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	4a22      	ldr	r2, [pc, #136]	; (800e990 <SDMMC_GetCmdResp7+0x98>)
 800e906:	fba2 2303 	umull	r2, r3, r2, r3
 800e90a:	0a5b      	lsrs	r3, r3, #9
 800e90c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e910:	fb02 f303 	mul.w	r3, r2, r3
 800e914:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	1e5a      	subs	r2, r3, #1
 800e91a:	60fa      	str	r2, [r7, #12]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d102      	bne.n	800e926 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e920:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e924:	e02c      	b.n	800e980 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e92a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e932:	2b00      	cmp	r3, #0
 800e934:	d0ef      	beq.n	800e916 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d1ea      	bne.n	800e916 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e944:	f003 0304 	and.w	r3, r3, #4
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d004      	beq.n	800e956 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2204      	movs	r2, #4
 800e950:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e952:	2304      	movs	r3, #4
 800e954:	e014      	b.n	800e980 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e95a:	f003 0301 	and.w	r3, r3, #1
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d004      	beq.n	800e96c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2201      	movs	r2, #1
 800e966:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e968:	2301      	movs	r3, #1
 800e96a:	e009      	b.n	800e980 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e974:	2b00      	cmp	r3, #0
 800e976:	d002      	beq.n	800e97e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2240      	movs	r2, #64	; 0x40
 800e97c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e97e:	2300      	movs	r3, #0
  
}
 800e980:	4618      	mov	r0, r3
 800e982:	3714      	adds	r7, #20
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr
 800e98c:	20000080 	.word	0x20000080
 800e990:	10624dd3 	.word	0x10624dd3

0800e994 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e994:	b480      	push	{r7}
 800e996:	b085      	sub	sp, #20
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e99c:	4b11      	ldr	r3, [pc, #68]	; (800e9e4 <SDMMC_GetCmdError+0x50>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4a11      	ldr	r2, [pc, #68]	; (800e9e8 <SDMMC_GetCmdError+0x54>)
 800e9a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e9a6:	0a5b      	lsrs	r3, r3, #9
 800e9a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9ac:	fb02 f303 	mul.w	r3, r2, r3
 800e9b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	1e5a      	subs	r2, r3, #1
 800e9b6:	60fa      	str	r2, [r7, #12]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d102      	bne.n	800e9c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e9bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e9c0:	e009      	b.n	800e9d6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d0f1      	beq.n	800e9b2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	22c5      	movs	r2, #197	; 0xc5
 800e9d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e9d4:	2300      	movs	r3, #0
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3714      	adds	r7, #20
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e0:	4770      	bx	lr
 800e9e2:	bf00      	nop
 800e9e4:	20000080 	.word	0x20000080
 800e9e8:	10624dd3 	.word	0x10624dd3

0800e9ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e9f0:	4904      	ldr	r1, [pc, #16]	; (800ea04 <MX_FATFS_Init+0x18>)
 800e9f2:	4805      	ldr	r0, [pc, #20]	; (800ea08 <MX_FATFS_Init+0x1c>)
 800e9f4:	f003 f824 	bl	8011a40 <FATFS_LinkDriver>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	4b03      	ldr	r3, [pc, #12]	; (800ea0c <MX_FATFS_Init+0x20>)
 800e9fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ea00:	bf00      	nop
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	20037c84 	.word	0x20037c84
 800ea08:	080d69a8 	.word	0x080d69a8
 800ea0c:	20037c80 	.word	0x20037c80

0800ea10 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ea10:	b480      	push	{r7}
 800ea12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ea14:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ea26:	2300      	movs	r3, #0
 800ea28:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ea2a:	f000 f888 	bl	800eb3e <BSP_SD_IsDetected>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d001      	beq.n	800ea38 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ea34:	2302      	movs	r3, #2
 800ea36:	e005      	b.n	800ea44 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ea38:	4804      	ldr	r0, [pc, #16]	; (800ea4c <BSP_SD_Init+0x2c>)
 800ea3a:	f7fc fb47 	bl	800b0cc <HAL_SD_Init>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800ea42:	79fb      	ldrb	r3, [r7, #7]
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	3708      	adds	r7, #8
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}
 800ea4c:	2003773c 	.word	0x2003773c

0800ea50 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b086      	sub	sp, #24
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	60f8      	str	r0, [r7, #12]
 800ea58:	60b9      	str	r1, [r7, #8]
 800ea5a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	68ba      	ldr	r2, [r7, #8]
 800ea64:	68f9      	ldr	r1, [r7, #12]
 800ea66:	4806      	ldr	r0, [pc, #24]	; (800ea80 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ea68:	f7fc fbe8 	bl	800b23c <HAL_SD_ReadBlocks_DMA>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d001      	beq.n	800ea76 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ea72:	2301      	movs	r3, #1
 800ea74:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ea76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3718      	adds	r7, #24
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	2003773c 	.word	0x2003773c

0800ea84 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b086      	sub	sp, #24
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	60f8      	str	r0, [r7, #12]
 800ea8c:	60b9      	str	r1, [r7, #8]
 800ea8e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ea90:	2300      	movs	r3, #0
 800ea92:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	68ba      	ldr	r2, [r7, #8]
 800ea98:	68f9      	ldr	r1, [r7, #12]
 800ea9a:	4806      	ldr	r0, [pc, #24]	; (800eab4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ea9c:	f7fc fcb0 	bl	800b400 <HAL_SD_WriteBlocks_DMA>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d001      	beq.n	800eaaa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800eaaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3718      	adds	r7, #24
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	2003773c 	.word	0x2003773c

0800eab8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800eabc:	4805      	ldr	r0, [pc, #20]	; (800ead4 <BSP_SD_GetCardState+0x1c>)
 800eabe:	f7fd f8d5 	bl	800bc6c <HAL_SD_GetCardState>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b04      	cmp	r3, #4
 800eac6:	bf14      	ite	ne
 800eac8:	2301      	movne	r3, #1
 800eaca:	2300      	moveq	r3, #0
 800eacc:	b2db      	uxtb	r3, r3
}
 800eace:	4618      	mov	r0, r3
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	2003773c 	.word	0x2003773c

0800ead8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800eae0:	6879      	ldr	r1, [r7, #4]
 800eae2:	4803      	ldr	r0, [pc, #12]	; (800eaf0 <BSP_SD_GetCardInfo+0x18>)
 800eae4:	f7fd f896 	bl	800bc14 <HAL_SD_GetCardInfo>
}
 800eae8:	bf00      	nop
 800eaea:	3708      	adds	r7, #8
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	2003773c 	.word	0x2003773c

0800eaf4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b082      	sub	sp, #8
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800eafc:	f000 f818 	bl	800eb30 <BSP_SD_AbortCallback>
}
 800eb00:	bf00      	nop
 800eb02:	3708      	adds	r7, #8
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800eb10:	f000 f9a8 	bl	800ee64 <BSP_SD_WriteCpltCallback>
}
 800eb14:	bf00      	nop
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800eb24:	f000 f9aa 	bl	800ee7c <BSP_SD_ReadCpltCallback>
}
 800eb28:	bf00      	nop
 800eb2a:	3708      	adds	r7, #8
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800eb30:	b480      	push	{r7}
 800eb32:	af00      	add	r7, sp, #0

}
 800eb34:	bf00      	nop
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr

0800eb3e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800eb3e:	b580      	push	{r7, lr}
 800eb40:	b082      	sub	sp, #8
 800eb42:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800eb44:	2301      	movs	r3, #1
 800eb46:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800eb48:	f000 f80c 	bl	800eb64 <BSP_PlatformIsDetected>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d101      	bne.n	800eb56 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800eb52:	2300      	movs	r3, #0
 800eb54:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800eb56:	79fb      	ldrb	r3, [r7, #7]
 800eb58:	b2db      	uxtb	r3, r3
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3708      	adds	r7, #8
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
	...

0800eb64 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b082      	sub	sp, #8
 800eb68:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800eb6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800eb72:	4806      	ldr	r0, [pc, #24]	; (800eb8c <BSP_PlatformIsDetected+0x28>)
 800eb74:	f7f9 fd88 	bl	8008688 <HAL_GPIO_ReadPin>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d001      	beq.n	800eb82 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800eb82:	79fb      	ldrb	r3, [r7, #7]
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	40020800 	.word	0x40020800

0800eb90 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b084      	sub	sp, #16
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800eb98:	f7f7 fef2 	bl	8006980 <HAL_GetTick>
 800eb9c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800eb9e:	e006      	b.n	800ebae <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eba0:	f7ff ff8a 	bl	800eab8 <BSP_SD_GetCardState>
 800eba4:	4603      	mov	r3, r0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d101      	bne.n	800ebae <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	e009      	b.n	800ebc2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ebae:	f7f7 fee7 	bl	8006980 <HAL_GetTick>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	1ad3      	subs	r3, r2, r3
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d8f0      	bhi.n	800eba0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ebbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3710      	adds	r7, #16
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}
	...

0800ebcc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ebd6:	4b0b      	ldr	r3, [pc, #44]	; (800ec04 <SD_CheckStatus+0x38>)
 800ebd8:	2201      	movs	r2, #1
 800ebda:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ebdc:	f7ff ff6c 	bl	800eab8 <BSP_SD_GetCardState>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d107      	bne.n	800ebf6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ebe6:	4b07      	ldr	r3, [pc, #28]	; (800ec04 <SD_CheckStatus+0x38>)
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	b2db      	uxtb	r3, r3
 800ebec:	f023 0301 	bic.w	r3, r3, #1
 800ebf0:	b2da      	uxtb	r2, r3
 800ebf2:	4b04      	ldr	r3, [pc, #16]	; (800ec04 <SD_CheckStatus+0x38>)
 800ebf4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ebf6:	4b03      	ldr	r3, [pc, #12]	; (800ec04 <SD_CheckStatus+0x38>)
 800ebf8:	781b      	ldrb	r3, [r3, #0]
 800ebfa:	b2db      	uxtb	r3, r3
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3708      	adds	r7, #8
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	200000cd 	.word	0x200000cd

0800ec08 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	4603      	mov	r3, r0
 800ec10:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ec12:	f7ff ff05 	bl	800ea20 <BSP_SD_Init>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d107      	bne.n	800ec2c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ec1c:	79fb      	ldrb	r3, [r7, #7]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7ff ffd4 	bl	800ebcc <SD_CheckStatus>
 800ec24:	4603      	mov	r3, r0
 800ec26:	461a      	mov	r2, r3
 800ec28:	4b04      	ldr	r3, [pc, #16]	; (800ec3c <SD_initialize+0x34>)
 800ec2a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ec2c:	4b03      	ldr	r3, [pc, #12]	; (800ec3c <SD_initialize+0x34>)
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	b2db      	uxtb	r3, r3
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	3708      	adds	r7, #8
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	200000cd 	.word	0x200000cd

0800ec40 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	4603      	mov	r3, r0
 800ec48:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ec4a:	79fb      	ldrb	r3, [r7, #7]
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7ff ffbd 	bl	800ebcc <SD_CheckStatus>
 800ec52:	4603      	mov	r3, r0
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3708      	adds	r7, #8
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b086      	sub	sp, #24
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	60b9      	str	r1, [r7, #8]
 800ec64:	607a      	str	r2, [r7, #4]
 800ec66:	603b      	str	r3, [r7, #0]
 800ec68:	4603      	mov	r3, r0
 800ec6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ec70:	f247 5030 	movw	r0, #30000	; 0x7530
 800ec74:	f7ff ff8c 	bl	800eb90 <SD_CheckStatusWithTimeout>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	da01      	bge.n	800ec82 <SD_read+0x26>
  {
    return res;
 800ec7e:	7dfb      	ldrb	r3, [r7, #23]
 800ec80:	e03b      	b.n	800ecfa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ec82:	683a      	ldr	r2, [r7, #0]
 800ec84:	6879      	ldr	r1, [r7, #4]
 800ec86:	68b8      	ldr	r0, [r7, #8]
 800ec88:	f7ff fee2 	bl	800ea50 <BSP_SD_ReadBlocks_DMA>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d132      	bne.n	800ecf8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ec92:	4b1c      	ldr	r3, [pc, #112]	; (800ed04 <SD_read+0xa8>)
 800ec94:	2200      	movs	r2, #0
 800ec96:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ec98:	f7f7 fe72 	bl	8006980 <HAL_GetTick>
 800ec9c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ec9e:	bf00      	nop
 800eca0:	4b18      	ldr	r3, [pc, #96]	; (800ed04 <SD_read+0xa8>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d108      	bne.n	800ecba <SD_read+0x5e>
 800eca8:	f7f7 fe6a 	bl	8006980 <HAL_GetTick>
 800ecac:	4602      	mov	r2, r0
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	1ad3      	subs	r3, r2, r3
 800ecb2:	f247 522f 	movw	r2, #29999	; 0x752f
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d9f2      	bls.n	800eca0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800ecba:	4b12      	ldr	r3, [pc, #72]	; (800ed04 <SD_read+0xa8>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d102      	bne.n	800ecc8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	75fb      	strb	r3, [r7, #23]
 800ecc6:	e017      	b.n	800ecf8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ecc8:	4b0e      	ldr	r3, [pc, #56]	; (800ed04 <SD_read+0xa8>)
 800ecca:	2200      	movs	r2, #0
 800eccc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ecce:	f7f7 fe57 	bl	8006980 <HAL_GetTick>
 800ecd2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ecd4:	e007      	b.n	800ece6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ecd6:	f7ff feef 	bl	800eab8 <BSP_SD_GetCardState>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d102      	bne.n	800ece6 <SD_read+0x8a>
          {
            res = RES_OK;
 800ece0:	2300      	movs	r3, #0
 800ece2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800ece4:	e008      	b.n	800ecf8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ece6:	f7f7 fe4b 	bl	8006980 <HAL_GetTick>
 800ecea:	4602      	mov	r2, r0
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	1ad3      	subs	r3, r2, r3
 800ecf0:	f247 522f 	movw	r2, #29999	; 0x752f
 800ecf4:	4293      	cmp	r3, r2
 800ecf6:	d9ee      	bls.n	800ecd6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800ecf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3718      	adds	r7, #24
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	200380ec 	.word	0x200380ec

0800ed08 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b086      	sub	sp, #24
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60b9      	str	r1, [r7, #8]
 800ed10:	607a      	str	r2, [r7, #4]
 800ed12:	603b      	str	r3, [r7, #0]
 800ed14:	4603      	mov	r3, r0
 800ed16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ed18:	2301      	movs	r3, #1
 800ed1a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ed1c:	4b24      	ldr	r3, [pc, #144]	; (800edb0 <SD_write+0xa8>)
 800ed1e:	2200      	movs	r2, #0
 800ed20:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ed22:	f247 5030 	movw	r0, #30000	; 0x7530
 800ed26:	f7ff ff33 	bl	800eb90 <SD_CheckStatusWithTimeout>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	da01      	bge.n	800ed34 <SD_write+0x2c>
  {
    return res;
 800ed30:	7dfb      	ldrb	r3, [r7, #23]
 800ed32:	e038      	b.n	800eda6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ed34:	683a      	ldr	r2, [r7, #0]
 800ed36:	6879      	ldr	r1, [r7, #4]
 800ed38:	68b8      	ldr	r0, [r7, #8]
 800ed3a:	f7ff fea3 	bl	800ea84 <BSP_SD_WriteBlocks_DMA>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d12f      	bne.n	800eda4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ed44:	f7f7 fe1c 	bl	8006980 <HAL_GetTick>
 800ed48:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ed4a:	bf00      	nop
 800ed4c:	4b18      	ldr	r3, [pc, #96]	; (800edb0 <SD_write+0xa8>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d108      	bne.n	800ed66 <SD_write+0x5e>
 800ed54:	f7f7 fe14 	bl	8006980 <HAL_GetTick>
 800ed58:	4602      	mov	r2, r0
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	1ad3      	subs	r3, r2, r3
 800ed5e:	f247 522f 	movw	r2, #29999	; 0x752f
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d9f2      	bls.n	800ed4c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800ed66:	4b12      	ldr	r3, [pc, #72]	; (800edb0 <SD_write+0xa8>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d102      	bne.n	800ed74 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	75fb      	strb	r3, [r7, #23]
 800ed72:	e017      	b.n	800eda4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ed74:	4b0e      	ldr	r3, [pc, #56]	; (800edb0 <SD_write+0xa8>)
 800ed76:	2200      	movs	r2, #0
 800ed78:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ed7a:	f7f7 fe01 	bl	8006980 <HAL_GetTick>
 800ed7e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ed80:	e007      	b.n	800ed92 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ed82:	f7ff fe99 	bl	800eab8 <BSP_SD_GetCardState>
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d102      	bne.n	800ed92 <SD_write+0x8a>
          {
            res = RES_OK;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	75fb      	strb	r3, [r7, #23]
            break;
 800ed90:	e008      	b.n	800eda4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ed92:	f7f7 fdf5 	bl	8006980 <HAL_GetTick>
 800ed96:	4602      	mov	r2, r0
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	1ad3      	subs	r3, r2, r3
 800ed9c:	f247 522f 	movw	r2, #29999	; 0x752f
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d9ee      	bls.n	800ed82 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800eda4:	7dfb      	ldrb	r3, [r7, #23]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3718      	adds	r7, #24
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}
 800edae:	bf00      	nop
 800edb0:	200380e8 	.word	0x200380e8

0800edb4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b08c      	sub	sp, #48	; 0x30
 800edb8:	af00      	add	r7, sp, #0
 800edba:	4603      	mov	r3, r0
 800edbc:	603a      	str	r2, [r7, #0]
 800edbe:	71fb      	strb	r3, [r7, #7]
 800edc0:	460b      	mov	r3, r1
 800edc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800edc4:	2301      	movs	r3, #1
 800edc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800edca:	4b25      	ldr	r3, [pc, #148]	; (800ee60 <SD_ioctl+0xac>)
 800edcc:	781b      	ldrb	r3, [r3, #0]
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	f003 0301 	and.w	r3, r3, #1
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d001      	beq.n	800eddc <SD_ioctl+0x28>
 800edd8:	2303      	movs	r3, #3
 800edda:	e03c      	b.n	800ee56 <SD_ioctl+0xa2>

  switch (cmd)
 800eddc:	79bb      	ldrb	r3, [r7, #6]
 800edde:	2b03      	cmp	r3, #3
 800ede0:	d834      	bhi.n	800ee4c <SD_ioctl+0x98>
 800ede2:	a201      	add	r2, pc, #4	; (adr r2, 800ede8 <SD_ioctl+0x34>)
 800ede4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ede8:	0800edf9 	.word	0x0800edf9
 800edec:	0800ee01 	.word	0x0800ee01
 800edf0:	0800ee19 	.word	0x0800ee19
 800edf4:	0800ee33 	.word	0x0800ee33
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800edf8:	2300      	movs	r3, #0
 800edfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800edfe:	e028      	b.n	800ee52 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ee00:	f107 030c 	add.w	r3, r7, #12
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7ff fe67 	bl	800ead8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ee0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ee10:	2300      	movs	r3, #0
 800ee12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ee16:	e01c      	b.n	800ee52 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ee18:	f107 030c 	add.w	r3, r7, #12
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7ff fe5b 	bl	800ead8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ee22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee24:	b29a      	uxth	r2, r3
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ee30:	e00f      	b.n	800ee52 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ee32:	f107 030c 	add.w	r3, r7, #12
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7ff fe4e 	bl	800ead8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ee3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee3e:	0a5a      	lsrs	r2, r3, #9
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ee44:	2300      	movs	r3, #0
 800ee46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ee4a:	e002      	b.n	800ee52 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ee4c:	2304      	movs	r3, #4
 800ee4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ee52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3730      	adds	r7, #48	; 0x30
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
 800ee5e:	bf00      	nop
 800ee60:	200000cd 	.word	0x200000cd

0800ee64 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ee64:	b480      	push	{r7}
 800ee66:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ee68:	4b03      	ldr	r3, [pc, #12]	; (800ee78 <BSP_SD_WriteCpltCallback+0x14>)
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	601a      	str	r2, [r3, #0]
}
 800ee6e:	bf00      	nop
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr
 800ee78:	200380e8 	.word	0x200380e8

0800ee7c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ee80:	4b03      	ldr	r3, [pc, #12]	; (800ee90 <BSP_SD_ReadCpltCallback+0x14>)
 800ee82:	2201      	movs	r2, #1
 800ee84:	601a      	str	r2, [r3, #0]
}
 800ee86:	bf00      	nop
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr
 800ee90:	200380ec 	.word	0x200380ec

0800ee94 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b084      	sub	sp, #16
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ee9e:	79fb      	ldrb	r3, [r7, #7]
 800eea0:	4a08      	ldr	r2, [pc, #32]	; (800eec4 <disk_status+0x30>)
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	4413      	add	r3, r2
 800eea6:	685b      	ldr	r3, [r3, #4]
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	79fa      	ldrb	r2, [r7, #7]
 800eeac:	4905      	ldr	r1, [pc, #20]	; (800eec4 <disk_status+0x30>)
 800eeae:	440a      	add	r2, r1
 800eeb0:	7a12      	ldrb	r2, [r2, #8]
 800eeb2:	4610      	mov	r0, r2
 800eeb4:	4798      	blx	r3
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800eeba:	7bfb      	ldrb	r3, [r7, #15]
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3710      	adds	r7, #16
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}
 800eec4:	20038118 	.word	0x20038118

0800eec8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	4603      	mov	r3, r0
 800eed0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800eed2:	2300      	movs	r3, #0
 800eed4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800eed6:	79fb      	ldrb	r3, [r7, #7]
 800eed8:	4a0d      	ldr	r2, [pc, #52]	; (800ef10 <disk_initialize+0x48>)
 800eeda:	5cd3      	ldrb	r3, [r2, r3]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d111      	bne.n	800ef04 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800eee0:	79fb      	ldrb	r3, [r7, #7]
 800eee2:	4a0b      	ldr	r2, [pc, #44]	; (800ef10 <disk_initialize+0x48>)
 800eee4:	2101      	movs	r1, #1
 800eee6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800eee8:	79fb      	ldrb	r3, [r7, #7]
 800eeea:	4a09      	ldr	r2, [pc, #36]	; (800ef10 <disk_initialize+0x48>)
 800eeec:	009b      	lsls	r3, r3, #2
 800eeee:	4413      	add	r3, r2
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	79fa      	ldrb	r2, [r7, #7]
 800eef6:	4906      	ldr	r1, [pc, #24]	; (800ef10 <disk_initialize+0x48>)
 800eef8:	440a      	add	r2, r1
 800eefa:	7a12      	ldrb	r2, [r2, #8]
 800eefc:	4610      	mov	r0, r2
 800eefe:	4798      	blx	r3
 800ef00:	4603      	mov	r3, r0
 800ef02:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ef04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3710      	adds	r7, #16
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	20038118 	.word	0x20038118

0800ef14 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ef14:	b590      	push	{r4, r7, lr}
 800ef16:	b087      	sub	sp, #28
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	60b9      	str	r1, [r7, #8]
 800ef1c:	607a      	str	r2, [r7, #4]
 800ef1e:	603b      	str	r3, [r7, #0]
 800ef20:	4603      	mov	r3, r0
 800ef22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ef24:	7bfb      	ldrb	r3, [r7, #15]
 800ef26:	4a0a      	ldr	r2, [pc, #40]	; (800ef50 <disk_read+0x3c>)
 800ef28:	009b      	lsls	r3, r3, #2
 800ef2a:	4413      	add	r3, r2
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	689c      	ldr	r4, [r3, #8]
 800ef30:	7bfb      	ldrb	r3, [r7, #15]
 800ef32:	4a07      	ldr	r2, [pc, #28]	; (800ef50 <disk_read+0x3c>)
 800ef34:	4413      	add	r3, r2
 800ef36:	7a18      	ldrb	r0, [r3, #8]
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	687a      	ldr	r2, [r7, #4]
 800ef3c:	68b9      	ldr	r1, [r7, #8]
 800ef3e:	47a0      	blx	r4
 800ef40:	4603      	mov	r3, r0
 800ef42:	75fb      	strb	r3, [r7, #23]
  return res;
 800ef44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	371c      	adds	r7, #28
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd90      	pop	{r4, r7, pc}
 800ef4e:	bf00      	nop
 800ef50:	20038118 	.word	0x20038118

0800ef54 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ef54:	b590      	push	{r4, r7, lr}
 800ef56:	b087      	sub	sp, #28
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	60b9      	str	r1, [r7, #8]
 800ef5c:	607a      	str	r2, [r7, #4]
 800ef5e:	603b      	str	r3, [r7, #0]
 800ef60:	4603      	mov	r3, r0
 800ef62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ef64:	7bfb      	ldrb	r3, [r7, #15]
 800ef66:	4a0a      	ldr	r2, [pc, #40]	; (800ef90 <disk_write+0x3c>)
 800ef68:	009b      	lsls	r3, r3, #2
 800ef6a:	4413      	add	r3, r2
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	68dc      	ldr	r4, [r3, #12]
 800ef70:	7bfb      	ldrb	r3, [r7, #15]
 800ef72:	4a07      	ldr	r2, [pc, #28]	; (800ef90 <disk_write+0x3c>)
 800ef74:	4413      	add	r3, r2
 800ef76:	7a18      	ldrb	r0, [r3, #8]
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	687a      	ldr	r2, [r7, #4]
 800ef7c:	68b9      	ldr	r1, [r7, #8]
 800ef7e:	47a0      	blx	r4
 800ef80:	4603      	mov	r3, r0
 800ef82:	75fb      	strb	r3, [r7, #23]
  return res;
 800ef84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	371c      	adds	r7, #28
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd90      	pop	{r4, r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	20038118 	.word	0x20038118

0800ef94 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b084      	sub	sp, #16
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	603a      	str	r2, [r7, #0]
 800ef9e:	71fb      	strb	r3, [r7, #7]
 800efa0:	460b      	mov	r3, r1
 800efa2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800efa4:	79fb      	ldrb	r3, [r7, #7]
 800efa6:	4a09      	ldr	r2, [pc, #36]	; (800efcc <disk_ioctl+0x38>)
 800efa8:	009b      	lsls	r3, r3, #2
 800efaa:	4413      	add	r3, r2
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	691b      	ldr	r3, [r3, #16]
 800efb0:	79fa      	ldrb	r2, [r7, #7]
 800efb2:	4906      	ldr	r1, [pc, #24]	; (800efcc <disk_ioctl+0x38>)
 800efb4:	440a      	add	r2, r1
 800efb6:	7a10      	ldrb	r0, [r2, #8]
 800efb8:	79b9      	ldrb	r1, [r7, #6]
 800efba:	683a      	ldr	r2, [r7, #0]
 800efbc:	4798      	blx	r3
 800efbe:	4603      	mov	r3, r0
 800efc0:	73fb      	strb	r3, [r7, #15]
  return res;
 800efc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3710      	adds	r7, #16
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	20038118 	.word	0x20038118

0800efd0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800efd0:	b480      	push	{r7}
 800efd2:	b085      	sub	sp, #20
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	3301      	adds	r3, #1
 800efdc:	781b      	ldrb	r3, [r3, #0]
 800efde:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800efe0:	89fb      	ldrh	r3, [r7, #14]
 800efe2:	021b      	lsls	r3, r3, #8
 800efe4:	b21a      	sxth	r2, r3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	781b      	ldrb	r3, [r3, #0]
 800efea:	b21b      	sxth	r3, r3
 800efec:	4313      	orrs	r3, r2
 800efee:	b21b      	sxth	r3, r3
 800eff0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800eff2:	89fb      	ldrh	r3, [r7, #14]
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3714      	adds	r7, #20
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f000:	b480      	push	{r7}
 800f002:	b085      	sub	sp, #20
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	3303      	adds	r3, #3
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	021b      	lsls	r3, r3, #8
 800f014:	687a      	ldr	r2, [r7, #4]
 800f016:	3202      	adds	r2, #2
 800f018:	7812      	ldrb	r2, [r2, #0]
 800f01a:	4313      	orrs	r3, r2
 800f01c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	021b      	lsls	r3, r3, #8
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	3201      	adds	r2, #1
 800f026:	7812      	ldrb	r2, [r2, #0]
 800f028:	4313      	orrs	r3, r2
 800f02a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	021b      	lsls	r3, r3, #8
 800f030:	687a      	ldr	r2, [r7, #4]
 800f032:	7812      	ldrb	r2, [r2, #0]
 800f034:	4313      	orrs	r3, r2
 800f036:	60fb      	str	r3, [r7, #12]
	return rv;
 800f038:	68fb      	ldr	r3, [r7, #12]
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3714      	adds	r7, #20
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr

0800f046 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f046:	b480      	push	{r7}
 800f048:	b083      	sub	sp, #12
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	6078      	str	r0, [r7, #4]
 800f04e:	460b      	mov	r3, r1
 800f050:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	1c5a      	adds	r2, r3, #1
 800f056:	607a      	str	r2, [r7, #4]
 800f058:	887a      	ldrh	r2, [r7, #2]
 800f05a:	b2d2      	uxtb	r2, r2
 800f05c:	701a      	strb	r2, [r3, #0]
 800f05e:	887b      	ldrh	r3, [r7, #2]
 800f060:	0a1b      	lsrs	r3, r3, #8
 800f062:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	1c5a      	adds	r2, r3, #1
 800f068:	607a      	str	r2, [r7, #4]
 800f06a:	887a      	ldrh	r2, [r7, #2]
 800f06c:	b2d2      	uxtb	r2, r2
 800f06e:	701a      	strb	r2, [r3, #0]
}
 800f070:	bf00      	nop
 800f072:	370c      	adds	r7, #12
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr

0800f07c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	1c5a      	adds	r2, r3, #1
 800f08a:	607a      	str	r2, [r7, #4]
 800f08c:	683a      	ldr	r2, [r7, #0]
 800f08e:	b2d2      	uxtb	r2, r2
 800f090:	701a      	strb	r2, [r3, #0]
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	0a1b      	lsrs	r3, r3, #8
 800f096:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	1c5a      	adds	r2, r3, #1
 800f09c:	607a      	str	r2, [r7, #4]
 800f09e:	683a      	ldr	r2, [r7, #0]
 800f0a0:	b2d2      	uxtb	r2, r2
 800f0a2:	701a      	strb	r2, [r3, #0]
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	0a1b      	lsrs	r3, r3, #8
 800f0a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	1c5a      	adds	r2, r3, #1
 800f0ae:	607a      	str	r2, [r7, #4]
 800f0b0:	683a      	ldr	r2, [r7, #0]
 800f0b2:	b2d2      	uxtb	r2, r2
 800f0b4:	701a      	strb	r2, [r3, #0]
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	0a1b      	lsrs	r3, r3, #8
 800f0ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	1c5a      	adds	r2, r3, #1
 800f0c0:	607a      	str	r2, [r7, #4]
 800f0c2:	683a      	ldr	r2, [r7, #0]
 800f0c4:	b2d2      	uxtb	r2, r2
 800f0c6:	701a      	strb	r2, [r3, #0]
}
 800f0c8:	bf00      	nop
 800f0ca:	370c      	adds	r7, #12
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr

0800f0d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f0d4:	b480      	push	{r7}
 800f0d6:	b087      	sub	sp, #28
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00d      	beq.n	800f10a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f0ee:	693a      	ldr	r2, [r7, #16]
 800f0f0:	1c53      	adds	r3, r2, #1
 800f0f2:	613b      	str	r3, [r7, #16]
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	1c59      	adds	r1, r3, #1
 800f0f8:	6179      	str	r1, [r7, #20]
 800f0fa:	7812      	ldrb	r2, [r2, #0]
 800f0fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	3b01      	subs	r3, #1
 800f102:	607b      	str	r3, [r7, #4]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d1f1      	bne.n	800f0ee <mem_cpy+0x1a>
	}
}
 800f10a:	bf00      	nop
 800f10c:	371c      	adds	r7, #28
 800f10e:	46bd      	mov	sp, r7
 800f110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f114:	4770      	bx	lr

0800f116 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f116:	b480      	push	{r7}
 800f118:	b087      	sub	sp, #28
 800f11a:	af00      	add	r7, sp, #0
 800f11c:	60f8      	str	r0, [r7, #12]
 800f11e:	60b9      	str	r1, [r7, #8]
 800f120:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	1c5a      	adds	r2, r3, #1
 800f12a:	617a      	str	r2, [r7, #20]
 800f12c:	68ba      	ldr	r2, [r7, #8]
 800f12e:	b2d2      	uxtb	r2, r2
 800f130:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	3b01      	subs	r3, #1
 800f136:	607b      	str	r3, [r7, #4]
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d1f3      	bne.n	800f126 <mem_set+0x10>
}
 800f13e:	bf00      	nop
 800f140:	bf00      	nop
 800f142:	371c      	adds	r7, #28
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr

0800f14c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f14c:	b480      	push	{r7}
 800f14e:	b089      	sub	sp, #36	; 0x24
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	61fb      	str	r3, [r7, #28]
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f160:	2300      	movs	r3, #0
 800f162:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	1c5a      	adds	r2, r3, #1
 800f168:	61fa      	str	r2, [r7, #28]
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	4619      	mov	r1, r3
 800f16e:	69bb      	ldr	r3, [r7, #24]
 800f170:	1c5a      	adds	r2, r3, #1
 800f172:	61ba      	str	r2, [r7, #24]
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	1acb      	subs	r3, r1, r3
 800f178:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	3b01      	subs	r3, #1
 800f17e:	607b      	str	r3, [r7, #4]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d002      	beq.n	800f18c <mem_cmp+0x40>
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d0eb      	beq.n	800f164 <mem_cmp+0x18>

	return r;
 800f18c:	697b      	ldr	r3, [r7, #20]
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3724      	adds	r7, #36	; 0x24
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr

0800f19a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f19a:	b480      	push	{r7}
 800f19c:	b083      	sub	sp, #12
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
 800f1a2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f1a4:	e002      	b.n	800f1ac <chk_chr+0x12>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	607b      	str	r3, [r7, #4]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d005      	beq.n	800f1c0 <chk_chr+0x26>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d1f2      	bne.n	800f1a6 <chk_chr+0xc>
	return *str;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	781b      	ldrb	r3, [r3, #0]
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	370c      	adds	r7, #12
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr

0800f1d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b085      	sub	sp, #20
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f1da:	2300      	movs	r3, #0
 800f1dc:	60bb      	str	r3, [r7, #8]
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	60fb      	str	r3, [r7, #12]
 800f1e2:	e029      	b.n	800f238 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f1e4:	4a27      	ldr	r2, [pc, #156]	; (800f284 <chk_lock+0xb4>)
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	011b      	lsls	r3, r3, #4
 800f1ea:	4413      	add	r3, r2
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d01d      	beq.n	800f22e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f1f2:	4a24      	ldr	r2, [pc, #144]	; (800f284 <chk_lock+0xb4>)
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	011b      	lsls	r3, r3, #4
 800f1f8:	4413      	add	r3, r2
 800f1fa:	681a      	ldr	r2, [r3, #0]
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	429a      	cmp	r2, r3
 800f202:	d116      	bne.n	800f232 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f204:	4a1f      	ldr	r2, [pc, #124]	; (800f284 <chk_lock+0xb4>)
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	011b      	lsls	r3, r3, #4
 800f20a:	4413      	add	r3, r2
 800f20c:	3304      	adds	r3, #4
 800f20e:	681a      	ldr	r2, [r3, #0]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f214:	429a      	cmp	r2, r3
 800f216:	d10c      	bne.n	800f232 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f218:	4a1a      	ldr	r2, [pc, #104]	; (800f284 <chk_lock+0xb4>)
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	011b      	lsls	r3, r3, #4
 800f21e:	4413      	add	r3, r2
 800f220:	3308      	adds	r3, #8
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f228:	429a      	cmp	r2, r3
 800f22a:	d102      	bne.n	800f232 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f22c:	e007      	b.n	800f23e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f22e:	2301      	movs	r3, #1
 800f230:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	3301      	adds	r3, #1
 800f236:	60fb      	str	r3, [r7, #12]
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	2b01      	cmp	r3, #1
 800f23c:	d9d2      	bls.n	800f1e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	2b02      	cmp	r3, #2
 800f242:	d109      	bne.n	800f258 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d102      	bne.n	800f250 <chk_lock+0x80>
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	2b02      	cmp	r3, #2
 800f24e:	d101      	bne.n	800f254 <chk_lock+0x84>
 800f250:	2300      	movs	r3, #0
 800f252:	e010      	b.n	800f276 <chk_lock+0xa6>
 800f254:	2312      	movs	r3, #18
 800f256:	e00e      	b.n	800f276 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d108      	bne.n	800f270 <chk_lock+0xa0>
 800f25e:	4a09      	ldr	r2, [pc, #36]	; (800f284 <chk_lock+0xb4>)
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	011b      	lsls	r3, r3, #4
 800f264:	4413      	add	r3, r2
 800f266:	330c      	adds	r3, #12
 800f268:	881b      	ldrh	r3, [r3, #0]
 800f26a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f26e:	d101      	bne.n	800f274 <chk_lock+0xa4>
 800f270:	2310      	movs	r3, #16
 800f272:	e000      	b.n	800f276 <chk_lock+0xa6>
 800f274:	2300      	movs	r3, #0
}
 800f276:	4618      	mov	r0, r3
 800f278:	3714      	adds	r7, #20
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop
 800f284:	200380f8 	.word	0x200380f8

0800f288 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f288:	b480      	push	{r7}
 800f28a:	b083      	sub	sp, #12
 800f28c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f28e:	2300      	movs	r3, #0
 800f290:	607b      	str	r3, [r7, #4]
 800f292:	e002      	b.n	800f29a <enq_lock+0x12>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	3301      	adds	r3, #1
 800f298:	607b      	str	r3, [r7, #4]
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2b01      	cmp	r3, #1
 800f29e:	d806      	bhi.n	800f2ae <enq_lock+0x26>
 800f2a0:	4a09      	ldr	r2, [pc, #36]	; (800f2c8 <enq_lock+0x40>)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	011b      	lsls	r3, r3, #4
 800f2a6:	4413      	add	r3, r2
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d1f2      	bne.n	800f294 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2b02      	cmp	r3, #2
 800f2b2:	bf14      	ite	ne
 800f2b4:	2301      	movne	r3, #1
 800f2b6:	2300      	moveq	r3, #0
 800f2b8:	b2db      	uxtb	r3, r3
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	370c      	adds	r7, #12
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr
 800f2c6:	bf00      	nop
 800f2c8:	200380f8 	.word	0x200380f8

0800f2cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	60fb      	str	r3, [r7, #12]
 800f2da:	e01f      	b.n	800f31c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f2dc:	4a41      	ldr	r2, [pc, #260]	; (800f3e4 <inc_lock+0x118>)
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	011b      	lsls	r3, r3, #4
 800f2e2:	4413      	add	r3, r2
 800f2e4:	681a      	ldr	r2, [r3, #0]
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d113      	bne.n	800f316 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f2ee:	4a3d      	ldr	r2, [pc, #244]	; (800f3e4 <inc_lock+0x118>)
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	011b      	lsls	r3, r3, #4
 800f2f4:	4413      	add	r3, r2
 800f2f6:	3304      	adds	r3, #4
 800f2f8:	681a      	ldr	r2, [r3, #0]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d109      	bne.n	800f316 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f302:	4a38      	ldr	r2, [pc, #224]	; (800f3e4 <inc_lock+0x118>)
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	011b      	lsls	r3, r3, #4
 800f308:	4413      	add	r3, r2
 800f30a:	3308      	adds	r3, #8
 800f30c:	681a      	ldr	r2, [r3, #0]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f312:	429a      	cmp	r2, r3
 800f314:	d006      	beq.n	800f324 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	3301      	adds	r3, #1
 800f31a:	60fb      	str	r3, [r7, #12]
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2b01      	cmp	r3, #1
 800f320:	d9dc      	bls.n	800f2dc <inc_lock+0x10>
 800f322:	e000      	b.n	800f326 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f324:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	2b02      	cmp	r3, #2
 800f32a:	d132      	bne.n	800f392 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f32c:	2300      	movs	r3, #0
 800f32e:	60fb      	str	r3, [r7, #12]
 800f330:	e002      	b.n	800f338 <inc_lock+0x6c>
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	3301      	adds	r3, #1
 800f336:	60fb      	str	r3, [r7, #12]
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	2b01      	cmp	r3, #1
 800f33c:	d806      	bhi.n	800f34c <inc_lock+0x80>
 800f33e:	4a29      	ldr	r2, [pc, #164]	; (800f3e4 <inc_lock+0x118>)
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	011b      	lsls	r3, r3, #4
 800f344:	4413      	add	r3, r2
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d1f2      	bne.n	800f332 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	2b02      	cmp	r3, #2
 800f350:	d101      	bne.n	800f356 <inc_lock+0x8a>
 800f352:	2300      	movs	r3, #0
 800f354:	e040      	b.n	800f3d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681a      	ldr	r2, [r3, #0]
 800f35a:	4922      	ldr	r1, [pc, #136]	; (800f3e4 <inc_lock+0x118>)
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	011b      	lsls	r3, r3, #4
 800f360:	440b      	add	r3, r1
 800f362:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	689a      	ldr	r2, [r3, #8]
 800f368:	491e      	ldr	r1, [pc, #120]	; (800f3e4 <inc_lock+0x118>)
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	011b      	lsls	r3, r3, #4
 800f36e:	440b      	add	r3, r1
 800f370:	3304      	adds	r3, #4
 800f372:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	695a      	ldr	r2, [r3, #20]
 800f378:	491a      	ldr	r1, [pc, #104]	; (800f3e4 <inc_lock+0x118>)
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	011b      	lsls	r3, r3, #4
 800f37e:	440b      	add	r3, r1
 800f380:	3308      	adds	r3, #8
 800f382:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f384:	4a17      	ldr	r2, [pc, #92]	; (800f3e4 <inc_lock+0x118>)
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	011b      	lsls	r3, r3, #4
 800f38a:	4413      	add	r3, r2
 800f38c:	330c      	adds	r3, #12
 800f38e:	2200      	movs	r2, #0
 800f390:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d009      	beq.n	800f3ac <inc_lock+0xe0>
 800f398:	4a12      	ldr	r2, [pc, #72]	; (800f3e4 <inc_lock+0x118>)
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	011b      	lsls	r3, r3, #4
 800f39e:	4413      	add	r3, r2
 800f3a0:	330c      	adds	r3, #12
 800f3a2:	881b      	ldrh	r3, [r3, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d001      	beq.n	800f3ac <inc_lock+0xe0>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	e015      	b.n	800f3d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d108      	bne.n	800f3c4 <inc_lock+0xf8>
 800f3b2:	4a0c      	ldr	r2, [pc, #48]	; (800f3e4 <inc_lock+0x118>)
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	011b      	lsls	r3, r3, #4
 800f3b8:	4413      	add	r3, r2
 800f3ba:	330c      	adds	r3, #12
 800f3bc:	881b      	ldrh	r3, [r3, #0]
 800f3be:	3301      	adds	r3, #1
 800f3c0:	b29a      	uxth	r2, r3
 800f3c2:	e001      	b.n	800f3c8 <inc_lock+0xfc>
 800f3c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f3c8:	4906      	ldr	r1, [pc, #24]	; (800f3e4 <inc_lock+0x118>)
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	011b      	lsls	r3, r3, #4
 800f3ce:	440b      	add	r3, r1
 800f3d0:	330c      	adds	r3, #12
 800f3d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	3301      	adds	r3, #1
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3714      	adds	r7, #20
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e2:	4770      	bx	lr
 800f3e4:	200380f8 	.word	0x200380f8

0800f3e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b085      	sub	sp, #20
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	3b01      	subs	r3, #1
 800f3f4:	607b      	str	r3, [r7, #4]
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2b01      	cmp	r3, #1
 800f3fa:	d825      	bhi.n	800f448 <dec_lock+0x60>
		n = Files[i].ctr;
 800f3fc:	4a17      	ldr	r2, [pc, #92]	; (800f45c <dec_lock+0x74>)
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	011b      	lsls	r3, r3, #4
 800f402:	4413      	add	r3, r2
 800f404:	330c      	adds	r3, #12
 800f406:	881b      	ldrh	r3, [r3, #0]
 800f408:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f40a:	89fb      	ldrh	r3, [r7, #14]
 800f40c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f410:	d101      	bne.n	800f416 <dec_lock+0x2e>
 800f412:	2300      	movs	r3, #0
 800f414:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f416:	89fb      	ldrh	r3, [r7, #14]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d002      	beq.n	800f422 <dec_lock+0x3a>
 800f41c:	89fb      	ldrh	r3, [r7, #14]
 800f41e:	3b01      	subs	r3, #1
 800f420:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f422:	4a0e      	ldr	r2, [pc, #56]	; (800f45c <dec_lock+0x74>)
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	011b      	lsls	r3, r3, #4
 800f428:	4413      	add	r3, r2
 800f42a:	330c      	adds	r3, #12
 800f42c:	89fa      	ldrh	r2, [r7, #14]
 800f42e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f430:	89fb      	ldrh	r3, [r7, #14]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d105      	bne.n	800f442 <dec_lock+0x5a>
 800f436:	4a09      	ldr	r2, [pc, #36]	; (800f45c <dec_lock+0x74>)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	011b      	lsls	r3, r3, #4
 800f43c:	4413      	add	r3, r2
 800f43e:	2200      	movs	r2, #0
 800f440:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f442:	2300      	movs	r3, #0
 800f444:	737b      	strb	r3, [r7, #13]
 800f446:	e001      	b.n	800f44c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f448:	2302      	movs	r3, #2
 800f44a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f44c:	7b7b      	ldrb	r3, [r7, #13]
}
 800f44e:	4618      	mov	r0, r3
 800f450:	3714      	adds	r7, #20
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr
 800f45a:	bf00      	nop
 800f45c:	200380f8 	.word	0x200380f8

0800f460 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f460:	b480      	push	{r7}
 800f462:	b085      	sub	sp, #20
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f468:	2300      	movs	r3, #0
 800f46a:	60fb      	str	r3, [r7, #12]
 800f46c:	e010      	b.n	800f490 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f46e:	4a0d      	ldr	r2, [pc, #52]	; (800f4a4 <clear_lock+0x44>)
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	011b      	lsls	r3, r3, #4
 800f474:	4413      	add	r3, r2
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	687a      	ldr	r2, [r7, #4]
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d105      	bne.n	800f48a <clear_lock+0x2a>
 800f47e:	4a09      	ldr	r2, [pc, #36]	; (800f4a4 <clear_lock+0x44>)
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	011b      	lsls	r3, r3, #4
 800f484:	4413      	add	r3, r2
 800f486:	2200      	movs	r2, #0
 800f488:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	3301      	adds	r3, #1
 800f48e:	60fb      	str	r3, [r7, #12]
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	2b01      	cmp	r3, #1
 800f494:	d9eb      	bls.n	800f46e <clear_lock+0xe>
	}
}
 800f496:	bf00      	nop
 800f498:	bf00      	nop
 800f49a:	3714      	adds	r7, #20
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr
 800f4a4:	200380f8 	.word	0x200380f8

0800f4a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b086      	sub	sp, #24
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	78db      	ldrb	r3, [r3, #3]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d034      	beq.n	800f526 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	7858      	ldrb	r0, [r3, #1]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	697a      	ldr	r2, [r7, #20]
 800f4d0:	f7ff fd40 	bl	800ef54 <disk_write>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d002      	beq.n	800f4e0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f4da:	2301      	movs	r3, #1
 800f4dc:	73fb      	strb	r3, [r7, #15]
 800f4de:	e022      	b.n	800f526 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6a1b      	ldr	r3, [r3, #32]
 800f4ea:	697a      	ldr	r2, [r7, #20]
 800f4ec:	1ad2      	subs	r2, r2, r3
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	699b      	ldr	r3, [r3, #24]
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d217      	bcs.n	800f526 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	789b      	ldrb	r3, [r3, #2]
 800f4fa:	613b      	str	r3, [r7, #16]
 800f4fc:	e010      	b.n	800f520 <sync_window+0x78>
					wsect += fs->fsize;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	699b      	ldr	r3, [r3, #24]
 800f502:	697a      	ldr	r2, [r7, #20]
 800f504:	4413      	add	r3, r2
 800f506:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	7858      	ldrb	r0, [r3, #1]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f512:	2301      	movs	r3, #1
 800f514:	697a      	ldr	r2, [r7, #20]
 800f516:	f7ff fd1d 	bl	800ef54 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f51a:	693b      	ldr	r3, [r7, #16]
 800f51c:	3b01      	subs	r3, #1
 800f51e:	613b      	str	r3, [r7, #16]
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	2b01      	cmp	r3, #1
 800f524:	d8eb      	bhi.n	800f4fe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f526:	7bfb      	ldrb	r3, [r7, #15]
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3718      	adds	r7, #24
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}

0800f530 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f53a:	2300      	movs	r3, #0
 800f53c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f542:	683a      	ldr	r2, [r7, #0]
 800f544:	429a      	cmp	r2, r3
 800f546:	d01b      	beq.n	800f580 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f7ff ffad 	bl	800f4a8 <sync_window>
 800f54e:	4603      	mov	r3, r0
 800f550:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f552:	7bfb      	ldrb	r3, [r7, #15]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d113      	bne.n	800f580 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	7858      	ldrb	r0, [r3, #1]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f562:	2301      	movs	r3, #1
 800f564:	683a      	ldr	r2, [r7, #0]
 800f566:	f7ff fcd5 	bl	800ef14 <disk_read>
 800f56a:	4603      	mov	r3, r0
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d004      	beq.n	800f57a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f570:	f04f 33ff 	mov.w	r3, #4294967295
 800f574:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f576:	2301      	movs	r3, #1
 800f578:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	683a      	ldr	r2, [r7, #0]
 800f57e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800f580:	7bfb      	ldrb	r3, [r7, #15]
}
 800f582:	4618      	mov	r0, r3
 800f584:	3710      	adds	r7, #16
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
	...

0800f58c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b084      	sub	sp, #16
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f7ff ff87 	bl	800f4a8 <sync_window>
 800f59a:	4603      	mov	r3, r0
 800f59c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f59e:	7bfb      	ldrb	r3, [r7, #15]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d158      	bne.n	800f656 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	2b03      	cmp	r3, #3
 800f5aa:	d148      	bne.n	800f63e <sync_fs+0xb2>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	791b      	ldrb	r3, [r3, #4]
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d144      	bne.n	800f63e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	3330      	adds	r3, #48	; 0x30
 800f5b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f5bc:	2100      	movs	r1, #0
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7ff fda9 	bl	800f116 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	3330      	adds	r3, #48	; 0x30
 800f5c8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f5cc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7ff fd38 	bl	800f046 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	3330      	adds	r3, #48	; 0x30
 800f5da:	4921      	ldr	r1, [pc, #132]	; (800f660 <sync_fs+0xd4>)
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7ff fd4d 	bl	800f07c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	3330      	adds	r3, #48	; 0x30
 800f5e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f5ea:	491e      	ldr	r1, [pc, #120]	; (800f664 <sync_fs+0xd8>)
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7ff fd45 	bl	800f07c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	3330      	adds	r3, #48	; 0x30
 800f5f6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	691b      	ldr	r3, [r3, #16]
 800f5fe:	4619      	mov	r1, r3
 800f600:	4610      	mov	r0, r2
 800f602:	f7ff fd3b 	bl	800f07c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	3330      	adds	r3, #48	; 0x30
 800f60a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	4619      	mov	r1, r3
 800f614:	4610      	mov	r0, r2
 800f616:	f7ff fd31 	bl	800f07c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	69db      	ldr	r3, [r3, #28]
 800f61e:	1c5a      	adds	r2, r3, #1
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	7858      	ldrb	r0, [r3, #1]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f632:	2301      	movs	r3, #1
 800f634:	f7ff fc8e 	bl	800ef54 <disk_write>
			fs->fsi_flag = 0;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2200      	movs	r2, #0
 800f63c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	785b      	ldrb	r3, [r3, #1]
 800f642:	2200      	movs	r2, #0
 800f644:	2100      	movs	r1, #0
 800f646:	4618      	mov	r0, r3
 800f648:	f7ff fca4 	bl	800ef94 <disk_ioctl>
 800f64c:	4603      	mov	r3, r0
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d001      	beq.n	800f656 <sync_fs+0xca>
 800f652:	2301      	movs	r3, #1
 800f654:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f656:	7bfb      	ldrb	r3, [r7, #15]
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3710      	adds	r7, #16
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}
 800f660:	41615252 	.word	0x41615252
 800f664:	61417272 	.word	0x61417272

0800f668 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f668:	b480      	push	{r7}
 800f66a:	b083      	sub	sp, #12
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	3b02      	subs	r3, #2
 800f676:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	695b      	ldr	r3, [r3, #20]
 800f67c:	3b02      	subs	r3, #2
 800f67e:	683a      	ldr	r2, [r7, #0]
 800f680:	429a      	cmp	r2, r3
 800f682:	d301      	bcc.n	800f688 <clust2sect+0x20>
 800f684:	2300      	movs	r3, #0
 800f686:	e008      	b.n	800f69a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	895b      	ldrh	r3, [r3, #10]
 800f68c:	461a      	mov	r2, r3
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	fb03 f202 	mul.w	r2, r3, r2
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f698:	4413      	add	r3, r2
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	370c      	adds	r7, #12
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr

0800f6a6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f6a6:	b580      	push	{r7, lr}
 800f6a8:	b086      	sub	sp, #24
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	6078      	str	r0, [r7, #4]
 800f6ae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	2b01      	cmp	r3, #1
 800f6ba:	d904      	bls.n	800f6c6 <get_fat+0x20>
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	695b      	ldr	r3, [r3, #20]
 800f6c0:	683a      	ldr	r2, [r7, #0]
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d302      	bcc.n	800f6cc <get_fat+0x26>
		val = 1;	/* Internal error */
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	617b      	str	r3, [r7, #20]
 800f6ca:	e08f      	b.n	800f7ec <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f6d0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	2b03      	cmp	r3, #3
 800f6d8:	d062      	beq.n	800f7a0 <get_fat+0xfa>
 800f6da:	2b03      	cmp	r3, #3
 800f6dc:	dc7c      	bgt.n	800f7d8 <get_fat+0x132>
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d002      	beq.n	800f6e8 <get_fat+0x42>
 800f6e2:	2b02      	cmp	r3, #2
 800f6e4:	d042      	beq.n	800f76c <get_fat+0xc6>
 800f6e6:	e077      	b.n	800f7d8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	60fb      	str	r3, [r7, #12]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	085b      	lsrs	r3, r3, #1
 800f6f0:	68fa      	ldr	r2, [r7, #12]
 800f6f2:	4413      	add	r3, r2
 800f6f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	6a1a      	ldr	r2, [r3, #32]
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	0a5b      	lsrs	r3, r3, #9
 800f6fe:	4413      	add	r3, r2
 800f700:	4619      	mov	r1, r3
 800f702:	6938      	ldr	r0, [r7, #16]
 800f704:	f7ff ff14 	bl	800f530 <move_window>
 800f708:	4603      	mov	r3, r0
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d167      	bne.n	800f7de <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	1c5a      	adds	r2, r3, #1
 800f712:	60fa      	str	r2, [r7, #12]
 800f714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f718:	693a      	ldr	r2, [r7, #16]
 800f71a:	4413      	add	r3, r2
 800f71c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f720:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	6a1a      	ldr	r2, [r3, #32]
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	0a5b      	lsrs	r3, r3, #9
 800f72a:	4413      	add	r3, r2
 800f72c:	4619      	mov	r1, r3
 800f72e:	6938      	ldr	r0, [r7, #16]
 800f730:	f7ff fefe 	bl	800f530 <move_window>
 800f734:	4603      	mov	r3, r0
 800f736:	2b00      	cmp	r3, #0
 800f738:	d153      	bne.n	800f7e2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f740:	693a      	ldr	r2, [r7, #16]
 800f742:	4413      	add	r3, r2
 800f744:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f748:	021b      	lsls	r3, r3, #8
 800f74a:	461a      	mov	r2, r3
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	4313      	orrs	r3, r2
 800f750:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	f003 0301 	and.w	r3, r3, #1
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d002      	beq.n	800f762 <get_fat+0xbc>
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	091b      	lsrs	r3, r3, #4
 800f760:	e002      	b.n	800f768 <get_fat+0xc2>
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f768:	617b      	str	r3, [r7, #20]
			break;
 800f76a:	e03f      	b.n	800f7ec <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	6a1a      	ldr	r2, [r3, #32]
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	0a1b      	lsrs	r3, r3, #8
 800f774:	4413      	add	r3, r2
 800f776:	4619      	mov	r1, r3
 800f778:	6938      	ldr	r0, [r7, #16]
 800f77a:	f7ff fed9 	bl	800f530 <move_window>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b00      	cmp	r3, #0
 800f782:	d130      	bne.n	800f7e6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	005b      	lsls	r3, r3, #1
 800f78e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f792:	4413      	add	r3, r2
 800f794:	4618      	mov	r0, r3
 800f796:	f7ff fc1b 	bl	800efd0 <ld_word>
 800f79a:	4603      	mov	r3, r0
 800f79c:	617b      	str	r3, [r7, #20]
			break;
 800f79e:	e025      	b.n	800f7ec <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	6a1a      	ldr	r2, [r3, #32]
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	09db      	lsrs	r3, r3, #7
 800f7a8:	4413      	add	r3, r2
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	6938      	ldr	r0, [r7, #16]
 800f7ae:	f7ff febf 	bl	800f530 <move_window>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d118      	bne.n	800f7ea <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	009b      	lsls	r3, r3, #2
 800f7c2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f7c6:	4413      	add	r3, r2
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7ff fc19 	bl	800f000 <ld_dword>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f7d4:	617b      	str	r3, [r7, #20]
			break;
 800f7d6:	e009      	b.n	800f7ec <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f7d8:	2301      	movs	r3, #1
 800f7da:	617b      	str	r3, [r7, #20]
 800f7dc:	e006      	b.n	800f7ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f7de:	bf00      	nop
 800f7e0:	e004      	b.n	800f7ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f7e2:	bf00      	nop
 800f7e4:	e002      	b.n	800f7ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f7e6:	bf00      	nop
 800f7e8:	e000      	b.n	800f7ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f7ea:	bf00      	nop
		}
	}

	return val;
 800f7ec:	697b      	ldr	r3, [r7, #20]
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3718      	adds	r7, #24
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}

0800f7f6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f7f6:	b590      	push	{r4, r7, lr}
 800f7f8:	b089      	sub	sp, #36	; 0x24
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	60f8      	str	r0, [r7, #12]
 800f7fe:	60b9      	str	r1, [r7, #8]
 800f800:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f802:	2302      	movs	r3, #2
 800f804:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	2b01      	cmp	r3, #1
 800f80a:	f240 80d9 	bls.w	800f9c0 <put_fat+0x1ca>
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	695b      	ldr	r3, [r3, #20]
 800f812:	68ba      	ldr	r2, [r7, #8]
 800f814:	429a      	cmp	r2, r3
 800f816:	f080 80d3 	bcs.w	800f9c0 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	2b03      	cmp	r3, #3
 800f820:	f000 8096 	beq.w	800f950 <put_fat+0x15a>
 800f824:	2b03      	cmp	r3, #3
 800f826:	f300 80cb 	bgt.w	800f9c0 <put_fat+0x1ca>
 800f82a:	2b01      	cmp	r3, #1
 800f82c:	d002      	beq.n	800f834 <put_fat+0x3e>
 800f82e:	2b02      	cmp	r3, #2
 800f830:	d06e      	beq.n	800f910 <put_fat+0x11a>
 800f832:	e0c5      	b.n	800f9c0 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	61bb      	str	r3, [r7, #24]
 800f838:	69bb      	ldr	r3, [r7, #24]
 800f83a:	085b      	lsrs	r3, r3, #1
 800f83c:	69ba      	ldr	r2, [r7, #24]
 800f83e:	4413      	add	r3, r2
 800f840:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	6a1a      	ldr	r2, [r3, #32]
 800f846:	69bb      	ldr	r3, [r7, #24]
 800f848:	0a5b      	lsrs	r3, r3, #9
 800f84a:	4413      	add	r3, r2
 800f84c:	4619      	mov	r1, r3
 800f84e:	68f8      	ldr	r0, [r7, #12]
 800f850:	f7ff fe6e 	bl	800f530 <move_window>
 800f854:	4603      	mov	r3, r0
 800f856:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f858:	7ffb      	ldrb	r3, [r7, #31]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	f040 80a9 	bne.w	800f9b2 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f866:	69bb      	ldr	r3, [r7, #24]
 800f868:	1c59      	adds	r1, r3, #1
 800f86a:	61b9      	str	r1, [r7, #24]
 800f86c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f870:	4413      	add	r3, r2
 800f872:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	f003 0301 	and.w	r3, r3, #1
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d00d      	beq.n	800f89a <put_fat+0xa4>
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	b25b      	sxtb	r3, r3
 800f884:	f003 030f 	and.w	r3, r3, #15
 800f888:	b25a      	sxtb	r2, r3
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	011b      	lsls	r3, r3, #4
 800f890:	b25b      	sxtb	r3, r3
 800f892:	4313      	orrs	r3, r2
 800f894:	b25b      	sxtb	r3, r3
 800f896:	b2db      	uxtb	r3, r3
 800f898:	e001      	b.n	800f89e <put_fat+0xa8>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	697a      	ldr	r2, [r7, #20]
 800f8a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	6a1a      	ldr	r2, [r3, #32]
 800f8ac:	69bb      	ldr	r3, [r7, #24]
 800f8ae:	0a5b      	lsrs	r3, r3, #9
 800f8b0:	4413      	add	r3, r2
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	68f8      	ldr	r0, [r7, #12]
 800f8b6:	f7ff fe3b 	bl	800f530 <move_window>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f8be:	7ffb      	ldrb	r3, [r7, #31]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d178      	bne.n	800f9b6 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f8ca:	69bb      	ldr	r3, [r7, #24]
 800f8cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8d0:	4413      	add	r3, r2
 800f8d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	f003 0301 	and.w	r3, r3, #1
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d003      	beq.n	800f8e6 <put_fat+0xf0>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	091b      	lsrs	r3, r3, #4
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	e00e      	b.n	800f904 <put_fat+0x10e>
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	b25b      	sxtb	r3, r3
 800f8ec:	f023 030f 	bic.w	r3, r3, #15
 800f8f0:	b25a      	sxtb	r2, r3
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	0a1b      	lsrs	r3, r3, #8
 800f8f6:	b25b      	sxtb	r3, r3
 800f8f8:	f003 030f 	and.w	r3, r3, #15
 800f8fc:	b25b      	sxtb	r3, r3
 800f8fe:	4313      	orrs	r3, r2
 800f900:	b25b      	sxtb	r3, r3
 800f902:	b2db      	uxtb	r3, r3
 800f904:	697a      	ldr	r2, [r7, #20]
 800f906:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2201      	movs	r2, #1
 800f90c:	70da      	strb	r2, [r3, #3]
			break;
 800f90e:	e057      	b.n	800f9c0 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	6a1a      	ldr	r2, [r3, #32]
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	0a1b      	lsrs	r3, r3, #8
 800f918:	4413      	add	r3, r2
 800f91a:	4619      	mov	r1, r3
 800f91c:	68f8      	ldr	r0, [r7, #12]
 800f91e:	f7ff fe07 	bl	800f530 <move_window>
 800f922:	4603      	mov	r3, r0
 800f924:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f926:	7ffb      	ldrb	r3, [r7, #31]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d146      	bne.n	800f9ba <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	005b      	lsls	r3, r3, #1
 800f936:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f93a:	4413      	add	r3, r2
 800f93c:	687a      	ldr	r2, [r7, #4]
 800f93e:	b292      	uxth	r2, r2
 800f940:	4611      	mov	r1, r2
 800f942:	4618      	mov	r0, r3
 800f944:	f7ff fb7f 	bl	800f046 <st_word>
			fs->wflag = 1;
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2201      	movs	r2, #1
 800f94c:	70da      	strb	r2, [r3, #3]
			break;
 800f94e:	e037      	b.n	800f9c0 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	6a1a      	ldr	r2, [r3, #32]
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	09db      	lsrs	r3, r3, #7
 800f958:	4413      	add	r3, r2
 800f95a:	4619      	mov	r1, r3
 800f95c:	68f8      	ldr	r0, [r7, #12]
 800f95e:	f7ff fde7 	bl	800f530 <move_window>
 800f962:	4603      	mov	r3, r0
 800f964:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f966:	7ffb      	ldrb	r3, [r7, #31]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d128      	bne.n	800f9be <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	009b      	lsls	r3, r3, #2
 800f97c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f980:	4413      	add	r3, r2
 800f982:	4618      	mov	r0, r3
 800f984:	f7ff fb3c 	bl	800f000 <ld_dword>
 800f988:	4603      	mov	r3, r0
 800f98a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f98e:	4323      	orrs	r3, r4
 800f990:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f9a0:	4413      	add	r3, r2
 800f9a2:	6879      	ldr	r1, [r7, #4]
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7ff fb69 	bl	800f07c <st_dword>
			fs->wflag = 1;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	70da      	strb	r2, [r3, #3]
			break;
 800f9b0:	e006      	b.n	800f9c0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f9b2:	bf00      	nop
 800f9b4:	e004      	b.n	800f9c0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f9b6:	bf00      	nop
 800f9b8:	e002      	b.n	800f9c0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f9ba:	bf00      	nop
 800f9bc:	e000      	b.n	800f9c0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f9be:	bf00      	nop
		}
	}
	return res;
 800f9c0:	7ffb      	ldrb	r3, [r7, #31]
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	3724      	adds	r7, #36	; 0x24
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd90      	pop	{r4, r7, pc}

0800f9ca <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f9ca:	b580      	push	{r7, lr}
 800f9cc:	b088      	sub	sp, #32
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	60f8      	str	r0, [r7, #12]
 800f9d2:	60b9      	str	r1, [r7, #8]
 800f9d4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f9e0:	68bb      	ldr	r3, [r7, #8]
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	d904      	bls.n	800f9f0 <remove_chain+0x26>
 800f9e6:	69bb      	ldr	r3, [r7, #24]
 800f9e8:	695b      	ldr	r3, [r3, #20]
 800f9ea:	68ba      	ldr	r2, [r7, #8]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d301      	bcc.n	800f9f4 <remove_chain+0x2a>
 800f9f0:	2302      	movs	r3, #2
 800f9f2:	e04b      	b.n	800fa8c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d00c      	beq.n	800fa14 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800f9fe:	6879      	ldr	r1, [r7, #4]
 800fa00:	69b8      	ldr	r0, [r7, #24]
 800fa02:	f7ff fef8 	bl	800f7f6 <put_fat>
 800fa06:	4603      	mov	r3, r0
 800fa08:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fa0a:	7ffb      	ldrb	r3, [r7, #31]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d001      	beq.n	800fa14 <remove_chain+0x4a>
 800fa10:	7ffb      	ldrb	r3, [r7, #31]
 800fa12:	e03b      	b.n	800fa8c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fa14:	68b9      	ldr	r1, [r7, #8]
 800fa16:	68f8      	ldr	r0, [r7, #12]
 800fa18:	f7ff fe45 	bl	800f6a6 <get_fat>
 800fa1c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d031      	beq.n	800fa88 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	2b01      	cmp	r3, #1
 800fa28:	d101      	bne.n	800fa2e <remove_chain+0x64>
 800fa2a:	2302      	movs	r3, #2
 800fa2c:	e02e      	b.n	800fa8c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa34:	d101      	bne.n	800fa3a <remove_chain+0x70>
 800fa36:	2301      	movs	r3, #1
 800fa38:	e028      	b.n	800fa8c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	68b9      	ldr	r1, [r7, #8]
 800fa3e:	69b8      	ldr	r0, [r7, #24]
 800fa40:	f7ff fed9 	bl	800f7f6 <put_fat>
 800fa44:	4603      	mov	r3, r0
 800fa46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fa48:	7ffb      	ldrb	r3, [r7, #31]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d001      	beq.n	800fa52 <remove_chain+0x88>
 800fa4e:	7ffb      	ldrb	r3, [r7, #31]
 800fa50:	e01c      	b.n	800fa8c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fa52:	69bb      	ldr	r3, [r7, #24]
 800fa54:	691a      	ldr	r2, [r3, #16]
 800fa56:	69bb      	ldr	r3, [r7, #24]
 800fa58:	695b      	ldr	r3, [r3, #20]
 800fa5a:	3b02      	subs	r3, #2
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d20b      	bcs.n	800fa78 <remove_chain+0xae>
			fs->free_clst++;
 800fa60:	69bb      	ldr	r3, [r7, #24]
 800fa62:	691b      	ldr	r3, [r3, #16]
 800fa64:	1c5a      	adds	r2, r3, #1
 800fa66:	69bb      	ldr	r3, [r7, #24]
 800fa68:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800fa6a:	69bb      	ldr	r3, [r7, #24]
 800fa6c:	791b      	ldrb	r3, [r3, #4]
 800fa6e:	f043 0301 	orr.w	r3, r3, #1
 800fa72:	b2da      	uxtb	r2, r3
 800fa74:	69bb      	ldr	r3, [r7, #24]
 800fa76:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fa7c:	69bb      	ldr	r3, [r7, #24]
 800fa7e:	695b      	ldr	r3, [r3, #20]
 800fa80:	68ba      	ldr	r2, [r7, #8]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d3c6      	bcc.n	800fa14 <remove_chain+0x4a>
 800fa86:	e000      	b.n	800fa8a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fa88:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fa8a:	2300      	movs	r3, #0
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3720      	adds	r7, #32
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b088      	sub	sp, #32
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d10d      	bne.n	800fac6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800faaa:	693b      	ldr	r3, [r7, #16]
 800faac:	68db      	ldr	r3, [r3, #12]
 800faae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fab0:	69bb      	ldr	r3, [r7, #24]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d004      	beq.n	800fac0 <create_chain+0x2c>
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	695b      	ldr	r3, [r3, #20]
 800faba:	69ba      	ldr	r2, [r7, #24]
 800fabc:	429a      	cmp	r2, r3
 800fabe:	d31b      	bcc.n	800faf8 <create_chain+0x64>
 800fac0:	2301      	movs	r3, #1
 800fac2:	61bb      	str	r3, [r7, #24]
 800fac4:	e018      	b.n	800faf8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fac6:	6839      	ldr	r1, [r7, #0]
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f7ff fdec 	bl	800f6a6 <get_fat>
 800face:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	2b01      	cmp	r3, #1
 800fad4:	d801      	bhi.n	800fada <create_chain+0x46>
 800fad6:	2301      	movs	r3, #1
 800fad8:	e070      	b.n	800fbbc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fae0:	d101      	bne.n	800fae6 <create_chain+0x52>
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	e06a      	b.n	800fbbc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	695b      	ldr	r3, [r3, #20]
 800faea:	68fa      	ldr	r2, [r7, #12]
 800faec:	429a      	cmp	r2, r3
 800faee:	d201      	bcs.n	800faf4 <create_chain+0x60>
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	e063      	b.n	800fbbc <create_chain+0x128>
		scl = clst;
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800faf8:	69bb      	ldr	r3, [r7, #24]
 800fafa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	3301      	adds	r3, #1
 800fb00:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	695b      	ldr	r3, [r3, #20]
 800fb06:	69fa      	ldr	r2, [r7, #28]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d307      	bcc.n	800fb1c <create_chain+0x88>
				ncl = 2;
 800fb0c:	2302      	movs	r3, #2
 800fb0e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fb10:	69fa      	ldr	r2, [r7, #28]
 800fb12:	69bb      	ldr	r3, [r7, #24]
 800fb14:	429a      	cmp	r2, r3
 800fb16:	d901      	bls.n	800fb1c <create_chain+0x88>
 800fb18:	2300      	movs	r3, #0
 800fb1a:	e04f      	b.n	800fbbc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fb1c:	69f9      	ldr	r1, [r7, #28]
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f7ff fdc1 	bl	800f6a6 <get_fat>
 800fb24:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d00e      	beq.n	800fb4a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	2b01      	cmp	r3, #1
 800fb30:	d003      	beq.n	800fb3a <create_chain+0xa6>
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb38:	d101      	bne.n	800fb3e <create_chain+0xaa>
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	e03e      	b.n	800fbbc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fb3e:	69fa      	ldr	r2, [r7, #28]
 800fb40:	69bb      	ldr	r3, [r7, #24]
 800fb42:	429a      	cmp	r2, r3
 800fb44:	d1da      	bne.n	800fafc <create_chain+0x68>
 800fb46:	2300      	movs	r3, #0
 800fb48:	e038      	b.n	800fbbc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fb4a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fb4c:	f04f 32ff 	mov.w	r2, #4294967295
 800fb50:	69f9      	ldr	r1, [r7, #28]
 800fb52:	6938      	ldr	r0, [r7, #16]
 800fb54:	f7ff fe4f 	bl	800f7f6 <put_fat>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fb5c:	7dfb      	ldrb	r3, [r7, #23]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d109      	bne.n	800fb76 <create_chain+0xe2>
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d006      	beq.n	800fb76 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fb68:	69fa      	ldr	r2, [r7, #28]
 800fb6a:	6839      	ldr	r1, [r7, #0]
 800fb6c:	6938      	ldr	r0, [r7, #16]
 800fb6e:	f7ff fe42 	bl	800f7f6 <put_fat>
 800fb72:	4603      	mov	r3, r0
 800fb74:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fb76:	7dfb      	ldrb	r3, [r7, #23]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d116      	bne.n	800fbaa <create_chain+0x116>
		fs->last_clst = ncl;
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	69fa      	ldr	r2, [r7, #28]
 800fb80:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	691a      	ldr	r2, [r3, #16]
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	695b      	ldr	r3, [r3, #20]
 800fb8a:	3b02      	subs	r3, #2
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d804      	bhi.n	800fb9a <create_chain+0x106>
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	691b      	ldr	r3, [r3, #16]
 800fb94:	1e5a      	subs	r2, r3, #1
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	791b      	ldrb	r3, [r3, #4]
 800fb9e:	f043 0301 	orr.w	r3, r3, #1
 800fba2:	b2da      	uxtb	r2, r3
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	711a      	strb	r2, [r3, #4]
 800fba8:	e007      	b.n	800fbba <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fbaa:	7dfb      	ldrb	r3, [r7, #23]
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d102      	bne.n	800fbb6 <create_chain+0x122>
 800fbb0:	f04f 33ff 	mov.w	r3, #4294967295
 800fbb4:	e000      	b.n	800fbb8 <create_chain+0x124>
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fbba:	69fb      	ldr	r3, [r7, #28]
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3720      	adds	r7, #32
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}

0800fbc4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b087      	sub	sp, #28
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbd8:	3304      	adds	r3, #4
 800fbda:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	0a5b      	lsrs	r3, r3, #9
 800fbe0:	68fa      	ldr	r2, [r7, #12]
 800fbe2:	8952      	ldrh	r2, [r2, #10]
 800fbe4:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbe8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	1d1a      	adds	r2, r3, #4
 800fbee:	613a      	str	r2, [r7, #16]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d101      	bne.n	800fbfe <clmt_clust+0x3a>
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	e010      	b.n	800fc20 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800fbfe:	697a      	ldr	r2, [r7, #20]
 800fc00:	68bb      	ldr	r3, [r7, #8]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d307      	bcc.n	800fc16 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800fc06:	697a      	ldr	r2, [r7, #20]
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	1ad3      	subs	r3, r2, r3
 800fc0c:	617b      	str	r3, [r7, #20]
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	3304      	adds	r3, #4
 800fc12:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fc14:	e7e9      	b.n	800fbea <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800fc16:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	681a      	ldr	r2, [r3, #0]
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	4413      	add	r3, r2
}
 800fc20:	4618      	mov	r0, r3
 800fc22:	371c      	adds	r7, #28
 800fc24:	46bd      	mov	sp, r7
 800fc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2a:	4770      	bx	lr

0800fc2c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b086      	sub	sp, #24
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fc42:	d204      	bcs.n	800fc4e <dir_sdi+0x22>
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	f003 031f 	and.w	r3, r3, #31
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d001      	beq.n	800fc52 <dir_sdi+0x26>
		return FR_INT_ERR;
 800fc4e:	2302      	movs	r3, #2
 800fc50:	e063      	b.n	800fd1a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	683a      	ldr	r2, [r7, #0]
 800fc56:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	689b      	ldr	r3, [r3, #8]
 800fc5c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d106      	bne.n	800fc72 <dir_sdi+0x46>
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	781b      	ldrb	r3, [r3, #0]
 800fc68:	2b02      	cmp	r3, #2
 800fc6a:	d902      	bls.n	800fc72 <dir_sdi+0x46>
		clst = fs->dirbase;
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc70:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d10c      	bne.n	800fc92 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	095b      	lsrs	r3, r3, #5
 800fc7c:	693a      	ldr	r2, [r7, #16]
 800fc7e:	8912      	ldrh	r2, [r2, #8]
 800fc80:	4293      	cmp	r3, r2
 800fc82:	d301      	bcc.n	800fc88 <dir_sdi+0x5c>
 800fc84:	2302      	movs	r3, #2
 800fc86:	e048      	b.n	800fd1a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	61da      	str	r2, [r3, #28]
 800fc90:	e029      	b.n	800fce6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	895b      	ldrh	r3, [r3, #10]
 800fc96:	025b      	lsls	r3, r3, #9
 800fc98:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fc9a:	e019      	b.n	800fcd0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6979      	ldr	r1, [r7, #20]
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7ff fd00 	bl	800f6a6 <get_fat>
 800fca6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcae:	d101      	bne.n	800fcb4 <dir_sdi+0x88>
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	e032      	b.n	800fd1a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	d904      	bls.n	800fcc4 <dir_sdi+0x98>
 800fcba:	693b      	ldr	r3, [r7, #16]
 800fcbc:	695b      	ldr	r3, [r3, #20]
 800fcbe:	697a      	ldr	r2, [r7, #20]
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	d301      	bcc.n	800fcc8 <dir_sdi+0x9c>
 800fcc4:	2302      	movs	r3, #2
 800fcc6:	e028      	b.n	800fd1a <dir_sdi+0xee>
			ofs -= csz;
 800fcc8:	683a      	ldr	r2, [r7, #0]
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	1ad3      	subs	r3, r2, r3
 800fcce:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fcd0:	683a      	ldr	r2, [r7, #0]
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d2e1      	bcs.n	800fc9c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800fcd8:	6979      	ldr	r1, [r7, #20]
 800fcda:	6938      	ldr	r0, [r7, #16]
 800fcdc:	f7ff fcc4 	bl	800f668 <clust2sect>
 800fce0:	4602      	mov	r2, r0
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	697a      	ldr	r2, [r7, #20]
 800fcea:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	69db      	ldr	r3, [r3, #28]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d101      	bne.n	800fcf8 <dir_sdi+0xcc>
 800fcf4:	2302      	movs	r3, #2
 800fcf6:	e010      	b.n	800fd1a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	69da      	ldr	r2, [r3, #28]
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	0a5b      	lsrs	r3, r3, #9
 800fd00:	441a      	add	r2, r3
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd12:	441a      	add	r2, r3
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fd18:	2300      	movs	r3, #0
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3718      	adds	r7, #24
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}

0800fd22 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800fd22:	b580      	push	{r7, lr}
 800fd24:	b086      	sub	sp, #24
 800fd26:	af00      	add	r7, sp, #0
 800fd28:	6078      	str	r0, [r7, #4]
 800fd2a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	695b      	ldr	r3, [r3, #20]
 800fd36:	3320      	adds	r3, #32
 800fd38:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	69db      	ldr	r3, [r3, #28]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d003      	beq.n	800fd4a <dir_next+0x28>
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fd48:	d301      	bcc.n	800fd4e <dir_next+0x2c>
 800fd4a:	2304      	movs	r3, #4
 800fd4c:	e0aa      	b.n	800fea4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f040 8098 	bne.w	800fe8a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	69db      	ldr	r3, [r3, #28]
 800fd5e:	1c5a      	adds	r2, r3, #1
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	699b      	ldr	r3, [r3, #24]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d10b      	bne.n	800fd84 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	095b      	lsrs	r3, r3, #5
 800fd70:	68fa      	ldr	r2, [r7, #12]
 800fd72:	8912      	ldrh	r2, [r2, #8]
 800fd74:	4293      	cmp	r3, r2
 800fd76:	f0c0 8088 	bcc.w	800fe8a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	61da      	str	r2, [r3, #28]
 800fd80:	2304      	movs	r3, #4
 800fd82:	e08f      	b.n	800fea4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	0a5b      	lsrs	r3, r3, #9
 800fd88:	68fa      	ldr	r2, [r7, #12]
 800fd8a:	8952      	ldrh	r2, [r2, #10]
 800fd8c:	3a01      	subs	r2, #1
 800fd8e:	4013      	ands	r3, r2
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d17a      	bne.n	800fe8a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	699b      	ldr	r3, [r3, #24]
 800fd9a:	4619      	mov	r1, r3
 800fd9c:	4610      	mov	r0, r2
 800fd9e:	f7ff fc82 	bl	800f6a6 <get_fat>
 800fda2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	d801      	bhi.n	800fdae <dir_next+0x8c>
 800fdaa:	2302      	movs	r3, #2
 800fdac:	e07a      	b.n	800fea4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdb4:	d101      	bne.n	800fdba <dir_next+0x98>
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	e074      	b.n	800fea4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	695b      	ldr	r3, [r3, #20]
 800fdbe:	697a      	ldr	r2, [r7, #20]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d358      	bcc.n	800fe76 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d104      	bne.n	800fdd4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	61da      	str	r2, [r3, #28]
 800fdd0:	2304      	movs	r3, #4
 800fdd2:	e067      	b.n	800fea4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	699b      	ldr	r3, [r3, #24]
 800fdda:	4619      	mov	r1, r3
 800fddc:	4610      	mov	r0, r2
 800fdde:	f7ff fe59 	bl	800fa94 <create_chain>
 800fde2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d101      	bne.n	800fdee <dir_next+0xcc>
 800fdea:	2307      	movs	r3, #7
 800fdec:	e05a      	b.n	800fea4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	2b01      	cmp	r3, #1
 800fdf2:	d101      	bne.n	800fdf8 <dir_next+0xd6>
 800fdf4:	2302      	movs	r3, #2
 800fdf6:	e055      	b.n	800fea4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdfe:	d101      	bne.n	800fe04 <dir_next+0xe2>
 800fe00:	2301      	movs	r3, #1
 800fe02:	e04f      	b.n	800fea4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fe04:	68f8      	ldr	r0, [r7, #12]
 800fe06:	f7ff fb4f 	bl	800f4a8 <sync_window>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d001      	beq.n	800fe14 <dir_next+0xf2>
 800fe10:	2301      	movs	r3, #1
 800fe12:	e047      	b.n	800fea4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	3330      	adds	r3, #48	; 0x30
 800fe18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fe1c:	2100      	movs	r1, #0
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7ff f979 	bl	800f116 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fe24:	2300      	movs	r3, #0
 800fe26:	613b      	str	r3, [r7, #16]
 800fe28:	6979      	ldr	r1, [r7, #20]
 800fe2a:	68f8      	ldr	r0, [r7, #12]
 800fe2c:	f7ff fc1c 	bl	800f668 <clust2sect>
 800fe30:	4602      	mov	r2, r0
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	62da      	str	r2, [r3, #44]	; 0x2c
 800fe36:	e012      	b.n	800fe5e <dir_next+0x13c>
						fs->wflag = 1;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	2201      	movs	r2, #1
 800fe3c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fe3e:	68f8      	ldr	r0, [r7, #12]
 800fe40:	f7ff fb32 	bl	800f4a8 <sync_window>
 800fe44:	4603      	mov	r3, r0
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d001      	beq.n	800fe4e <dir_next+0x12c>
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	e02a      	b.n	800fea4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	3301      	adds	r3, #1
 800fe52:	613b      	str	r3, [r7, #16]
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe58:	1c5a      	adds	r2, r3, #1
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	62da      	str	r2, [r3, #44]	; 0x2c
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	895b      	ldrh	r3, [r3, #10]
 800fe62:	461a      	mov	r2, r3
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	4293      	cmp	r3, r2
 800fe68:	d3e6      	bcc.n	800fe38 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	1ad2      	subs	r2, r2, r3
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	697a      	ldr	r2, [r7, #20]
 800fe7a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800fe7c:	6979      	ldr	r1, [r7, #20]
 800fe7e:	68f8      	ldr	r0, [r7, #12]
 800fe80:	f7ff fbf2 	bl	800f668 <clust2sect>
 800fe84:	4602      	mov	r2, r0
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	68ba      	ldr	r2, [r7, #8]
 800fe8e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe9c:	441a      	add	r2, r3
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fea2:	2300      	movs	r3, #0
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3718      	adds	r7, #24
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b086      	sub	sp, #24
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800febc:	2100      	movs	r1, #0
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f7ff feb4 	bl	800fc2c <dir_sdi>
 800fec4:	4603      	mov	r3, r0
 800fec6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fec8:	7dfb      	ldrb	r3, [r7, #23]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d12b      	bne.n	800ff26 <dir_alloc+0x7a>
		n = 0;
 800fece:	2300      	movs	r3, #0
 800fed0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	69db      	ldr	r3, [r3, #28]
 800fed6:	4619      	mov	r1, r3
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f7ff fb29 	bl	800f530 <move_window>
 800fede:	4603      	mov	r3, r0
 800fee0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fee2:	7dfb      	ldrb	r3, [r7, #23]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d11d      	bne.n	800ff24 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6a1b      	ldr	r3, [r3, #32]
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	2be5      	cmp	r3, #229	; 0xe5
 800fef0:	d004      	beq.n	800fefc <dir_alloc+0x50>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6a1b      	ldr	r3, [r3, #32]
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d107      	bne.n	800ff0c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fefc:	693b      	ldr	r3, [r7, #16]
 800fefe:	3301      	adds	r3, #1
 800ff00:	613b      	str	r3, [r7, #16]
 800ff02:	693a      	ldr	r2, [r7, #16]
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d102      	bne.n	800ff10 <dir_alloc+0x64>
 800ff0a:	e00c      	b.n	800ff26 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ff10:	2101      	movs	r1, #1
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f7ff ff05 	bl	800fd22 <dir_next>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ff1c:	7dfb      	ldrb	r3, [r7, #23]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d0d7      	beq.n	800fed2 <dir_alloc+0x26>
 800ff22:	e000      	b.n	800ff26 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ff24:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ff26:	7dfb      	ldrb	r3, [r7, #23]
 800ff28:	2b04      	cmp	r3, #4
 800ff2a:	d101      	bne.n	800ff30 <dir_alloc+0x84>
 800ff2c:	2307      	movs	r3, #7
 800ff2e:	75fb      	strb	r3, [r7, #23]
	return res;
 800ff30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3718      	adds	r7, #24
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}

0800ff3a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ff3a:	b580      	push	{r7, lr}
 800ff3c:	b084      	sub	sp, #16
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	6078      	str	r0, [r7, #4]
 800ff42:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	331a      	adds	r3, #26
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7ff f841 	bl	800efd0 <ld_word>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	2b03      	cmp	r3, #3
 800ff58:	d109      	bne.n	800ff6e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	3314      	adds	r3, #20
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7ff f836 	bl	800efd0 <ld_word>
 800ff64:	4603      	mov	r3, r0
 800ff66:	041b      	lsls	r3, r3, #16
 800ff68:	68fa      	ldr	r2, [r7, #12]
 800ff6a:	4313      	orrs	r3, r2
 800ff6c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3710      	adds	r7, #16
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b084      	sub	sp, #16
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	331a      	adds	r3, #26
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	b292      	uxth	r2, r2
 800ff8c:	4611      	mov	r1, r2
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7ff f859 	bl	800f046 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	2b03      	cmp	r3, #3
 800ff9a:	d109      	bne.n	800ffb0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	f103 0214 	add.w	r2, r3, #20
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	0c1b      	lsrs	r3, r3, #16
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	4610      	mov	r0, r2
 800ffac:	f7ff f84b 	bl	800f046 <st_word>
	}
}
 800ffb0:	bf00      	nop
 800ffb2:	3710      	adds	r7, #16
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}

0800ffb8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b086      	sub	sp, #24
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ffc6:	2100      	movs	r1, #0
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f7ff fe2f 	bl	800fc2c <dir_sdi>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ffd2:	7dfb      	ldrb	r3, [r7, #23]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d001      	beq.n	800ffdc <dir_find+0x24>
 800ffd8:	7dfb      	ldrb	r3, [r7, #23]
 800ffda:	e03e      	b.n	801005a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	69db      	ldr	r3, [r3, #28]
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	6938      	ldr	r0, [r7, #16]
 800ffe4:	f7ff faa4 	bl	800f530 <move_window>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ffec:	7dfb      	ldrb	r3, [r7, #23]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d12f      	bne.n	8010052 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6a1b      	ldr	r3, [r3, #32]
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fffa:	7bfb      	ldrb	r3, [r7, #15]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d102      	bne.n	8010006 <dir_find+0x4e>
 8010000:	2304      	movs	r3, #4
 8010002:	75fb      	strb	r3, [r7, #23]
 8010004:	e028      	b.n	8010058 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6a1b      	ldr	r3, [r3, #32]
 801000a:	330b      	adds	r3, #11
 801000c:	781b      	ldrb	r3, [r3, #0]
 801000e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010012:	b2da      	uxtb	r2, r3
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6a1b      	ldr	r3, [r3, #32]
 801001c:	330b      	adds	r3, #11
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	f003 0308 	and.w	r3, r3, #8
 8010024:	2b00      	cmp	r3, #0
 8010026:	d10a      	bne.n	801003e <dir_find+0x86>
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6a18      	ldr	r0, [r3, #32]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	3324      	adds	r3, #36	; 0x24
 8010030:	220b      	movs	r2, #11
 8010032:	4619      	mov	r1, r3
 8010034:	f7ff f88a 	bl	800f14c <mem_cmp>
 8010038:	4603      	mov	r3, r0
 801003a:	2b00      	cmp	r3, #0
 801003c:	d00b      	beq.n	8010056 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801003e:	2100      	movs	r1, #0
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f7ff fe6e 	bl	800fd22 <dir_next>
 8010046:	4603      	mov	r3, r0
 8010048:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801004a:	7dfb      	ldrb	r3, [r7, #23]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d0c5      	beq.n	800ffdc <dir_find+0x24>
 8010050:	e002      	b.n	8010058 <dir_find+0xa0>
		if (res != FR_OK) break;
 8010052:	bf00      	nop
 8010054:	e000      	b.n	8010058 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010056:	bf00      	nop

	return res;
 8010058:	7dfb      	ldrb	r3, [r7, #23]
}
 801005a:	4618      	mov	r0, r3
 801005c:	3718      	adds	r7, #24
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}

08010062 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010062:	b580      	push	{r7, lr}
 8010064:	b084      	sub	sp, #16
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010070:	2101      	movs	r1, #1
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f7ff ff1a 	bl	800feac <dir_alloc>
 8010078:	4603      	mov	r3, r0
 801007a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801007c:	7bfb      	ldrb	r3, [r7, #15]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d11c      	bne.n	80100bc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	69db      	ldr	r3, [r3, #28]
 8010086:	4619      	mov	r1, r3
 8010088:	68b8      	ldr	r0, [r7, #8]
 801008a:	f7ff fa51 	bl	800f530 <move_window>
 801008e:	4603      	mov	r3, r0
 8010090:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010092:	7bfb      	ldrb	r3, [r7, #15]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d111      	bne.n	80100bc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6a1b      	ldr	r3, [r3, #32]
 801009c:	2220      	movs	r2, #32
 801009e:	2100      	movs	r1, #0
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7ff f838 	bl	800f116 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6a18      	ldr	r0, [r3, #32]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	3324      	adds	r3, #36	; 0x24
 80100ae:	220b      	movs	r2, #11
 80100b0:	4619      	mov	r1, r3
 80100b2:	f7ff f80f 	bl	800f0d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	2201      	movs	r2, #1
 80100ba:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80100bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3710      	adds	r7, #16
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}
	...

080100c8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b088      	sub	sp, #32
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	60fb      	str	r3, [r7, #12]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	3324      	adds	r3, #36	; 0x24
 80100dc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80100de:	220b      	movs	r2, #11
 80100e0:	2120      	movs	r1, #32
 80100e2:	68b8      	ldr	r0, [r7, #8]
 80100e4:	f7ff f817 	bl	800f116 <mem_set>
	si = i = 0; ni = 8;
 80100e8:	2300      	movs	r3, #0
 80100ea:	613b      	str	r3, [r7, #16]
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	61fb      	str	r3, [r7, #28]
 80100f0:	2308      	movs	r3, #8
 80100f2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80100f4:	69fb      	ldr	r3, [r7, #28]
 80100f6:	1c5a      	adds	r2, r3, #1
 80100f8:	61fa      	str	r2, [r7, #28]
 80100fa:	68fa      	ldr	r2, [r7, #12]
 80100fc:	4413      	add	r3, r2
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010102:	7efb      	ldrb	r3, [r7, #27]
 8010104:	2b20      	cmp	r3, #32
 8010106:	d94e      	bls.n	80101a6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010108:	7efb      	ldrb	r3, [r7, #27]
 801010a:	2b2f      	cmp	r3, #47	; 0x2f
 801010c:	d006      	beq.n	801011c <create_name+0x54>
 801010e:	7efb      	ldrb	r3, [r7, #27]
 8010110:	2b5c      	cmp	r3, #92	; 0x5c
 8010112:	d110      	bne.n	8010136 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010114:	e002      	b.n	801011c <create_name+0x54>
 8010116:	69fb      	ldr	r3, [r7, #28]
 8010118:	3301      	adds	r3, #1
 801011a:	61fb      	str	r3, [r7, #28]
 801011c:	68fa      	ldr	r2, [r7, #12]
 801011e:	69fb      	ldr	r3, [r7, #28]
 8010120:	4413      	add	r3, r2
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	2b2f      	cmp	r3, #47	; 0x2f
 8010126:	d0f6      	beq.n	8010116 <create_name+0x4e>
 8010128:	68fa      	ldr	r2, [r7, #12]
 801012a:	69fb      	ldr	r3, [r7, #28]
 801012c:	4413      	add	r3, r2
 801012e:	781b      	ldrb	r3, [r3, #0]
 8010130:	2b5c      	cmp	r3, #92	; 0x5c
 8010132:	d0f0      	beq.n	8010116 <create_name+0x4e>
			break;
 8010134:	e038      	b.n	80101a8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010136:	7efb      	ldrb	r3, [r7, #27]
 8010138:	2b2e      	cmp	r3, #46	; 0x2e
 801013a:	d003      	beq.n	8010144 <create_name+0x7c>
 801013c:	693a      	ldr	r2, [r7, #16]
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	429a      	cmp	r2, r3
 8010142:	d30c      	bcc.n	801015e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	2b0b      	cmp	r3, #11
 8010148:	d002      	beq.n	8010150 <create_name+0x88>
 801014a:	7efb      	ldrb	r3, [r7, #27]
 801014c:	2b2e      	cmp	r3, #46	; 0x2e
 801014e:	d001      	beq.n	8010154 <create_name+0x8c>
 8010150:	2306      	movs	r3, #6
 8010152:	e044      	b.n	80101de <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010154:	2308      	movs	r3, #8
 8010156:	613b      	str	r3, [r7, #16]
 8010158:	230b      	movs	r3, #11
 801015a:	617b      	str	r3, [r7, #20]
			continue;
 801015c:	e022      	b.n	80101a4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801015e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010162:	2b00      	cmp	r3, #0
 8010164:	da04      	bge.n	8010170 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010166:	7efb      	ldrb	r3, [r7, #27]
 8010168:	3b80      	subs	r3, #128	; 0x80
 801016a:	4a1f      	ldr	r2, [pc, #124]	; (80101e8 <create_name+0x120>)
 801016c:	5cd3      	ldrb	r3, [r2, r3]
 801016e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010170:	7efb      	ldrb	r3, [r7, #27]
 8010172:	4619      	mov	r1, r3
 8010174:	481d      	ldr	r0, [pc, #116]	; (80101ec <create_name+0x124>)
 8010176:	f7ff f810 	bl	800f19a <chk_chr>
 801017a:	4603      	mov	r3, r0
 801017c:	2b00      	cmp	r3, #0
 801017e:	d001      	beq.n	8010184 <create_name+0xbc>
 8010180:	2306      	movs	r3, #6
 8010182:	e02c      	b.n	80101de <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010184:	7efb      	ldrb	r3, [r7, #27]
 8010186:	2b60      	cmp	r3, #96	; 0x60
 8010188:	d905      	bls.n	8010196 <create_name+0xce>
 801018a:	7efb      	ldrb	r3, [r7, #27]
 801018c:	2b7a      	cmp	r3, #122	; 0x7a
 801018e:	d802      	bhi.n	8010196 <create_name+0xce>
 8010190:	7efb      	ldrb	r3, [r7, #27]
 8010192:	3b20      	subs	r3, #32
 8010194:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8010196:	693b      	ldr	r3, [r7, #16]
 8010198:	1c5a      	adds	r2, r3, #1
 801019a:	613a      	str	r2, [r7, #16]
 801019c:	68ba      	ldr	r2, [r7, #8]
 801019e:	4413      	add	r3, r2
 80101a0:	7efa      	ldrb	r2, [r7, #27]
 80101a2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80101a4:	e7a6      	b.n	80100f4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80101a6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80101a8:	68fa      	ldr	r2, [r7, #12]
 80101aa:	69fb      	ldr	r3, [r7, #28]
 80101ac:	441a      	add	r2, r3
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d101      	bne.n	80101bc <create_name+0xf4>
 80101b8:	2306      	movs	r3, #6
 80101ba:	e010      	b.n	80101de <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	2be5      	cmp	r3, #229	; 0xe5
 80101c2:	d102      	bne.n	80101ca <create_name+0x102>
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	2205      	movs	r2, #5
 80101c8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80101ca:	7efb      	ldrb	r3, [r7, #27]
 80101cc:	2b20      	cmp	r3, #32
 80101ce:	d801      	bhi.n	80101d4 <create_name+0x10c>
 80101d0:	2204      	movs	r2, #4
 80101d2:	e000      	b.n	80101d6 <create_name+0x10e>
 80101d4:	2200      	movs	r2, #0
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	330b      	adds	r3, #11
 80101da:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80101dc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3720      	adds	r7, #32
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}
 80101e6:	bf00      	nop
 80101e8:	080d69bc 	.word	0x080d69bc
 80101ec:	08014990 	.word	0x08014990

080101f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b086      	sub	sp, #24
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80101fe:	693b      	ldr	r3, [r7, #16]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010204:	e002      	b.n	801020c <follow_path+0x1c>
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	3301      	adds	r3, #1
 801020a:	603b      	str	r3, [r7, #0]
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	2b2f      	cmp	r3, #47	; 0x2f
 8010212:	d0f8      	beq.n	8010206 <follow_path+0x16>
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	2b5c      	cmp	r3, #92	; 0x5c
 801021a:	d0f4      	beq.n	8010206 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	2200      	movs	r2, #0
 8010220:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	781b      	ldrb	r3, [r3, #0]
 8010226:	2b1f      	cmp	r3, #31
 8010228:	d80a      	bhi.n	8010240 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2280      	movs	r2, #128	; 0x80
 801022e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010232:	2100      	movs	r1, #0
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f7ff fcf9 	bl	800fc2c <dir_sdi>
 801023a:	4603      	mov	r3, r0
 801023c:	75fb      	strb	r3, [r7, #23]
 801023e:	e043      	b.n	80102c8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010240:	463b      	mov	r3, r7
 8010242:	4619      	mov	r1, r3
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f7ff ff3f 	bl	80100c8 <create_name>
 801024a:	4603      	mov	r3, r0
 801024c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801024e:	7dfb      	ldrb	r3, [r7, #23]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d134      	bne.n	80102be <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f7ff feaf 	bl	800ffb8 <dir_find>
 801025a:	4603      	mov	r3, r0
 801025c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010264:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010266:	7dfb      	ldrb	r3, [r7, #23]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d00a      	beq.n	8010282 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801026c:	7dfb      	ldrb	r3, [r7, #23]
 801026e:	2b04      	cmp	r3, #4
 8010270:	d127      	bne.n	80102c2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010272:	7afb      	ldrb	r3, [r7, #11]
 8010274:	f003 0304 	and.w	r3, r3, #4
 8010278:	2b00      	cmp	r3, #0
 801027a:	d122      	bne.n	80102c2 <follow_path+0xd2>
 801027c:	2305      	movs	r3, #5
 801027e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010280:	e01f      	b.n	80102c2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010282:	7afb      	ldrb	r3, [r7, #11]
 8010284:	f003 0304 	and.w	r3, r3, #4
 8010288:	2b00      	cmp	r3, #0
 801028a:	d11c      	bne.n	80102c6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801028c:	693b      	ldr	r3, [r7, #16]
 801028e:	799b      	ldrb	r3, [r3, #6]
 8010290:	f003 0310 	and.w	r3, r3, #16
 8010294:	2b00      	cmp	r3, #0
 8010296:	d102      	bne.n	801029e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010298:	2305      	movs	r3, #5
 801029a:	75fb      	strb	r3, [r7, #23]
 801029c:	e014      	b.n	80102c8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	695b      	ldr	r3, [r3, #20]
 80102a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102ac:	4413      	add	r3, r2
 80102ae:	4619      	mov	r1, r3
 80102b0:	68f8      	ldr	r0, [r7, #12]
 80102b2:	f7ff fe42 	bl	800ff3a <ld_clust>
 80102b6:	4602      	mov	r2, r0
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80102bc:	e7c0      	b.n	8010240 <follow_path+0x50>
			if (res != FR_OK) break;
 80102be:	bf00      	nop
 80102c0:	e002      	b.n	80102c8 <follow_path+0xd8>
				break;
 80102c2:	bf00      	nop
 80102c4:	e000      	b.n	80102c8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80102c6:	bf00      	nop
			}
		}
	}

	return res;
 80102c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80102ca:	4618      	mov	r0, r3
 80102cc:	3718      	adds	r7, #24
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}

080102d2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80102d2:	b480      	push	{r7}
 80102d4:	b087      	sub	sp, #28
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80102da:	f04f 33ff 	mov.w	r3, #4294967295
 80102de:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d031      	beq.n	801034c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	617b      	str	r3, [r7, #20]
 80102ee:	e002      	b.n	80102f6 <get_ldnumber+0x24>
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	3301      	adds	r3, #1
 80102f4:	617b      	str	r3, [r7, #20]
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	781b      	ldrb	r3, [r3, #0]
 80102fa:	2b20      	cmp	r3, #32
 80102fc:	d903      	bls.n	8010306 <get_ldnumber+0x34>
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	2b3a      	cmp	r3, #58	; 0x3a
 8010304:	d1f4      	bne.n	80102f0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	781b      	ldrb	r3, [r3, #0]
 801030a:	2b3a      	cmp	r3, #58	; 0x3a
 801030c:	d11c      	bne.n	8010348 <get_ldnumber+0x76>
			tp = *path;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	1c5a      	adds	r2, r3, #1
 8010318:	60fa      	str	r2, [r7, #12]
 801031a:	781b      	ldrb	r3, [r3, #0]
 801031c:	3b30      	subs	r3, #48	; 0x30
 801031e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	2b09      	cmp	r3, #9
 8010324:	d80e      	bhi.n	8010344 <get_ldnumber+0x72>
 8010326:	68fa      	ldr	r2, [r7, #12]
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	429a      	cmp	r2, r3
 801032c:	d10a      	bne.n	8010344 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d107      	bne.n	8010344 <get_ldnumber+0x72>
					vol = (int)i;
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	3301      	adds	r3, #1
 801033c:	617b      	str	r3, [r7, #20]
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	697a      	ldr	r2, [r7, #20]
 8010342:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	e002      	b.n	801034e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010348:	2300      	movs	r3, #0
 801034a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801034c:	693b      	ldr	r3, [r7, #16]
}
 801034e:	4618      	mov	r0, r3
 8010350:	371c      	adds	r7, #28
 8010352:	46bd      	mov	sp, r7
 8010354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010358:	4770      	bx	lr
	...

0801035c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b082      	sub	sp, #8
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
 8010364:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2200      	movs	r2, #0
 801036a:	70da      	strb	r2, [r3, #3]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f04f 32ff 	mov.w	r2, #4294967295
 8010372:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010374:	6839      	ldr	r1, [r7, #0]
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f7ff f8da 	bl	800f530 <move_window>
 801037c:	4603      	mov	r3, r0
 801037e:	2b00      	cmp	r3, #0
 8010380:	d001      	beq.n	8010386 <check_fs+0x2a>
 8010382:	2304      	movs	r3, #4
 8010384:	e038      	b.n	80103f8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	3330      	adds	r3, #48	; 0x30
 801038a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801038e:	4618      	mov	r0, r3
 8010390:	f7fe fe1e 	bl	800efd0 <ld_word>
 8010394:	4603      	mov	r3, r0
 8010396:	461a      	mov	r2, r3
 8010398:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801039c:	429a      	cmp	r2, r3
 801039e:	d001      	beq.n	80103a4 <check_fs+0x48>
 80103a0:	2303      	movs	r3, #3
 80103a2:	e029      	b.n	80103f8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103aa:	2be9      	cmp	r3, #233	; 0xe9
 80103ac:	d009      	beq.n	80103c2 <check_fs+0x66>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103b4:	2beb      	cmp	r3, #235	; 0xeb
 80103b6:	d11e      	bne.n	80103f6 <check_fs+0x9a>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80103be:	2b90      	cmp	r3, #144	; 0x90
 80103c0:	d119      	bne.n	80103f6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	3330      	adds	r3, #48	; 0x30
 80103c6:	3336      	adds	r3, #54	; 0x36
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7fe fe19 	bl	800f000 <ld_dword>
 80103ce:	4603      	mov	r3, r0
 80103d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80103d4:	4a0a      	ldr	r2, [pc, #40]	; (8010400 <check_fs+0xa4>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d101      	bne.n	80103de <check_fs+0x82>
 80103da:	2300      	movs	r3, #0
 80103dc:	e00c      	b.n	80103f8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	3330      	adds	r3, #48	; 0x30
 80103e2:	3352      	adds	r3, #82	; 0x52
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7fe fe0b 	bl	800f000 <ld_dword>
 80103ea:	4603      	mov	r3, r0
 80103ec:	4a05      	ldr	r2, [pc, #20]	; (8010404 <check_fs+0xa8>)
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d101      	bne.n	80103f6 <check_fs+0x9a>
 80103f2:	2300      	movs	r3, #0
 80103f4:	e000      	b.n	80103f8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80103f6:	2302      	movs	r3, #2
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3708      	adds	r7, #8
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	00544146 	.word	0x00544146
 8010404:	33544146 	.word	0x33544146

08010408 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b096      	sub	sp, #88	; 0x58
 801040c:	af00      	add	r7, sp, #0
 801040e:	60f8      	str	r0, [r7, #12]
 8010410:	60b9      	str	r1, [r7, #8]
 8010412:	4613      	mov	r3, r2
 8010414:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	2200      	movs	r2, #0
 801041a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801041c:	68f8      	ldr	r0, [r7, #12]
 801041e:	f7ff ff58 	bl	80102d2 <get_ldnumber>
 8010422:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010426:	2b00      	cmp	r3, #0
 8010428:	da01      	bge.n	801042e <find_volume+0x26>
 801042a:	230b      	movs	r3, #11
 801042c:	e22d      	b.n	801088a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801042e:	4aa1      	ldr	r2, [pc, #644]	; (80106b4 <find_volume+0x2ac>)
 8010430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010436:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801043a:	2b00      	cmp	r3, #0
 801043c:	d101      	bne.n	8010442 <find_volume+0x3a>
 801043e:	230c      	movs	r3, #12
 8010440:	e223      	b.n	801088a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010446:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010448:	79fb      	ldrb	r3, [r7, #7]
 801044a:	f023 0301 	bic.w	r3, r3, #1
 801044e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010452:	781b      	ldrb	r3, [r3, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d01a      	beq.n	801048e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801045a:	785b      	ldrb	r3, [r3, #1]
 801045c:	4618      	mov	r0, r3
 801045e:	f7fe fd19 	bl	800ee94 <disk_status>
 8010462:	4603      	mov	r3, r0
 8010464:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010468:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801046c:	f003 0301 	and.w	r3, r3, #1
 8010470:	2b00      	cmp	r3, #0
 8010472:	d10c      	bne.n	801048e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010474:	79fb      	ldrb	r3, [r7, #7]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d007      	beq.n	801048a <find_volume+0x82>
 801047a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801047e:	f003 0304 	and.w	r3, r3, #4
 8010482:	2b00      	cmp	r3, #0
 8010484:	d001      	beq.n	801048a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010486:	230a      	movs	r3, #10
 8010488:	e1ff      	b.n	801088a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801048a:	2300      	movs	r3, #0
 801048c:	e1fd      	b.n	801088a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801048e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010490:	2200      	movs	r2, #0
 8010492:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010496:	b2da      	uxtb	r2, r3
 8010498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801049c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049e:	785b      	ldrb	r3, [r3, #1]
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7fe fd11 	bl	800eec8 <disk_initialize>
 80104a6:	4603      	mov	r3, r0
 80104a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80104ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104b0:	f003 0301 	and.w	r3, r3, #1
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d001      	beq.n	80104bc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80104b8:	2303      	movs	r3, #3
 80104ba:	e1e6      	b.n	801088a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80104bc:	79fb      	ldrb	r3, [r7, #7]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d007      	beq.n	80104d2 <find_volume+0xca>
 80104c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104c6:	f003 0304 	and.w	r3, r3, #4
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d001      	beq.n	80104d2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80104ce:	230a      	movs	r3, #10
 80104d0:	e1db      	b.n	801088a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80104d2:	2300      	movs	r3, #0
 80104d4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80104d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80104d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80104da:	f7ff ff3f 	bl	801035c <check_fs>
 80104de:	4603      	mov	r3, r0
 80104e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80104e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80104e8:	2b02      	cmp	r3, #2
 80104ea:	d149      	bne.n	8010580 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80104ec:	2300      	movs	r3, #0
 80104ee:	643b      	str	r3, [r7, #64]	; 0x40
 80104f0:	e01e      	b.n	8010530 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80104f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80104f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104fa:	011b      	lsls	r3, r3, #4
 80104fc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010500:	4413      	add	r3, r2
 8010502:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010506:	3304      	adds	r3, #4
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d006      	beq.n	801051c <find_volume+0x114>
 801050e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010510:	3308      	adds	r3, #8
 8010512:	4618      	mov	r0, r3
 8010514:	f7fe fd74 	bl	800f000 <ld_dword>
 8010518:	4602      	mov	r2, r0
 801051a:	e000      	b.n	801051e <find_volume+0x116>
 801051c:	2200      	movs	r2, #0
 801051e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010520:	009b      	lsls	r3, r3, #2
 8010522:	3358      	adds	r3, #88	; 0x58
 8010524:	443b      	add	r3, r7
 8010526:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801052a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801052c:	3301      	adds	r3, #1
 801052e:	643b      	str	r3, [r7, #64]	; 0x40
 8010530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010532:	2b03      	cmp	r3, #3
 8010534:	d9dd      	bls.n	80104f2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010536:	2300      	movs	r3, #0
 8010538:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801053a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801053c:	2b00      	cmp	r3, #0
 801053e:	d002      	beq.n	8010546 <find_volume+0x13e>
 8010540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010542:	3b01      	subs	r3, #1
 8010544:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010548:	009b      	lsls	r3, r3, #2
 801054a:	3358      	adds	r3, #88	; 0x58
 801054c:	443b      	add	r3, r7
 801054e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010552:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010556:	2b00      	cmp	r3, #0
 8010558:	d005      	beq.n	8010566 <find_volume+0x15e>
 801055a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801055c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801055e:	f7ff fefd 	bl	801035c <check_fs>
 8010562:	4603      	mov	r3, r0
 8010564:	e000      	b.n	8010568 <find_volume+0x160>
 8010566:	2303      	movs	r3, #3
 8010568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801056c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010570:	2b01      	cmp	r3, #1
 8010572:	d905      	bls.n	8010580 <find_volume+0x178>
 8010574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010576:	3301      	adds	r3, #1
 8010578:	643b      	str	r3, [r7, #64]	; 0x40
 801057a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801057c:	2b03      	cmp	r3, #3
 801057e:	d9e2      	bls.n	8010546 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010580:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010584:	2b04      	cmp	r3, #4
 8010586:	d101      	bne.n	801058c <find_volume+0x184>
 8010588:	2301      	movs	r3, #1
 801058a:	e17e      	b.n	801088a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801058c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010590:	2b01      	cmp	r3, #1
 8010592:	d901      	bls.n	8010598 <find_volume+0x190>
 8010594:	230d      	movs	r3, #13
 8010596:	e178      	b.n	801088a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059a:	3330      	adds	r3, #48	; 0x30
 801059c:	330b      	adds	r3, #11
 801059e:	4618      	mov	r0, r3
 80105a0:	f7fe fd16 	bl	800efd0 <ld_word>
 80105a4:	4603      	mov	r3, r0
 80105a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105aa:	d001      	beq.n	80105b0 <find_volume+0x1a8>
 80105ac:	230d      	movs	r3, #13
 80105ae:	e16c      	b.n	801088a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80105b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b2:	3330      	adds	r3, #48	; 0x30
 80105b4:	3316      	adds	r3, #22
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7fe fd0a 	bl	800efd0 <ld_word>
 80105bc:	4603      	mov	r3, r0
 80105be:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80105c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d106      	bne.n	80105d4 <find_volume+0x1cc>
 80105c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c8:	3330      	adds	r3, #48	; 0x30
 80105ca:	3324      	adds	r3, #36	; 0x24
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7fe fd17 	bl	800f000 <ld_dword>
 80105d2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80105d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80105d8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80105da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105dc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80105e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80105e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e6:	789b      	ldrb	r3, [r3, #2]
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	d005      	beq.n	80105f8 <find_volume+0x1f0>
 80105ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ee:	789b      	ldrb	r3, [r3, #2]
 80105f0:	2b02      	cmp	r3, #2
 80105f2:	d001      	beq.n	80105f8 <find_volume+0x1f0>
 80105f4:	230d      	movs	r3, #13
 80105f6:	e148      	b.n	801088a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80105f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105fa:	789b      	ldrb	r3, [r3, #2]
 80105fc:	461a      	mov	r2, r3
 80105fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010600:	fb02 f303 	mul.w	r3, r2, r3
 8010604:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801060c:	b29a      	uxth	r2, r3
 801060e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010610:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010614:	895b      	ldrh	r3, [r3, #10]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d008      	beq.n	801062c <find_volume+0x224>
 801061a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061c:	895b      	ldrh	r3, [r3, #10]
 801061e:	461a      	mov	r2, r3
 8010620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010622:	895b      	ldrh	r3, [r3, #10]
 8010624:	3b01      	subs	r3, #1
 8010626:	4013      	ands	r3, r2
 8010628:	2b00      	cmp	r3, #0
 801062a:	d001      	beq.n	8010630 <find_volume+0x228>
 801062c:	230d      	movs	r3, #13
 801062e:	e12c      	b.n	801088a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010632:	3330      	adds	r3, #48	; 0x30
 8010634:	3311      	adds	r3, #17
 8010636:	4618      	mov	r0, r3
 8010638:	f7fe fcca 	bl	800efd0 <ld_word>
 801063c:	4603      	mov	r3, r0
 801063e:	461a      	mov	r2, r3
 8010640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010642:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010646:	891b      	ldrh	r3, [r3, #8]
 8010648:	f003 030f 	and.w	r3, r3, #15
 801064c:	b29b      	uxth	r3, r3
 801064e:	2b00      	cmp	r3, #0
 8010650:	d001      	beq.n	8010656 <find_volume+0x24e>
 8010652:	230d      	movs	r3, #13
 8010654:	e119      	b.n	801088a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010658:	3330      	adds	r3, #48	; 0x30
 801065a:	3313      	adds	r3, #19
 801065c:	4618      	mov	r0, r3
 801065e:	f7fe fcb7 	bl	800efd0 <ld_word>
 8010662:	4603      	mov	r3, r0
 8010664:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010668:	2b00      	cmp	r3, #0
 801066a:	d106      	bne.n	801067a <find_volume+0x272>
 801066c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801066e:	3330      	adds	r3, #48	; 0x30
 8010670:	3320      	adds	r3, #32
 8010672:	4618      	mov	r0, r3
 8010674:	f7fe fcc4 	bl	800f000 <ld_dword>
 8010678:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801067a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801067c:	3330      	adds	r3, #48	; 0x30
 801067e:	330e      	adds	r3, #14
 8010680:	4618      	mov	r0, r3
 8010682:	f7fe fca5 	bl	800efd0 <ld_word>
 8010686:	4603      	mov	r3, r0
 8010688:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801068a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801068c:	2b00      	cmp	r3, #0
 801068e:	d101      	bne.n	8010694 <find_volume+0x28c>
 8010690:	230d      	movs	r3, #13
 8010692:	e0fa      	b.n	801088a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010694:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010698:	4413      	add	r3, r2
 801069a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801069c:	8912      	ldrh	r2, [r2, #8]
 801069e:	0912      	lsrs	r2, r2, #4
 80106a0:	b292      	uxth	r2, r2
 80106a2:	4413      	add	r3, r2
 80106a4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80106a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d204      	bcs.n	80106b8 <find_volume+0x2b0>
 80106ae:	230d      	movs	r3, #13
 80106b0:	e0eb      	b.n	801088a <find_volume+0x482>
 80106b2:	bf00      	nop
 80106b4:	200380f0 	.word	0x200380f0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80106b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106bc:	1ad3      	subs	r3, r2, r3
 80106be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106c0:	8952      	ldrh	r2, [r2, #10]
 80106c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80106c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80106c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d101      	bne.n	80106d2 <find_volume+0x2ca>
 80106ce:	230d      	movs	r3, #13
 80106d0:	e0db      	b.n	801088a <find_volume+0x482>
		fmt = FS_FAT32;
 80106d2:	2303      	movs	r3, #3
 80106d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80106d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106da:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80106de:	4293      	cmp	r3, r2
 80106e0:	d802      	bhi.n	80106e8 <find_volume+0x2e0>
 80106e2:	2302      	movs	r3, #2
 80106e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80106e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ea:	f640 72f5 	movw	r2, #4085	; 0xff5
 80106ee:	4293      	cmp	r3, r2
 80106f0:	d802      	bhi.n	80106f8 <find_volume+0x2f0>
 80106f2:	2301      	movs	r3, #1
 80106f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80106f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fa:	1c9a      	adds	r2, r3, #2
 80106fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106fe:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010702:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010704:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010706:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801070a:	441a      	add	r2, r3
 801070c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801070e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8010710:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010714:	441a      	add	r2, r3
 8010716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010718:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 801071a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801071e:	2b03      	cmp	r3, #3
 8010720:	d11e      	bne.n	8010760 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010724:	3330      	adds	r3, #48	; 0x30
 8010726:	332a      	adds	r3, #42	; 0x2a
 8010728:	4618      	mov	r0, r3
 801072a:	f7fe fc51 	bl	800efd0 <ld_word>
 801072e:	4603      	mov	r3, r0
 8010730:	2b00      	cmp	r3, #0
 8010732:	d001      	beq.n	8010738 <find_volume+0x330>
 8010734:	230d      	movs	r3, #13
 8010736:	e0a8      	b.n	801088a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801073a:	891b      	ldrh	r3, [r3, #8]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d001      	beq.n	8010744 <find_volume+0x33c>
 8010740:	230d      	movs	r3, #13
 8010742:	e0a2      	b.n	801088a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010746:	3330      	adds	r3, #48	; 0x30
 8010748:	332c      	adds	r3, #44	; 0x2c
 801074a:	4618      	mov	r0, r3
 801074c:	f7fe fc58 	bl	800f000 <ld_dword>
 8010750:	4602      	mov	r2, r0
 8010752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010754:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010758:	695b      	ldr	r3, [r3, #20]
 801075a:	009b      	lsls	r3, r3, #2
 801075c:	647b      	str	r3, [r7, #68]	; 0x44
 801075e:	e01f      	b.n	80107a0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010762:	891b      	ldrh	r3, [r3, #8]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d101      	bne.n	801076c <find_volume+0x364>
 8010768:	230d      	movs	r3, #13
 801076a:	e08e      	b.n	801088a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801076c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801076e:	6a1a      	ldr	r2, [r3, #32]
 8010770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010772:	441a      	add	r2, r3
 8010774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010776:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010778:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801077c:	2b02      	cmp	r3, #2
 801077e:	d103      	bne.n	8010788 <find_volume+0x380>
 8010780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010782:	695b      	ldr	r3, [r3, #20]
 8010784:	005b      	lsls	r3, r3, #1
 8010786:	e00a      	b.n	801079e <find_volume+0x396>
 8010788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801078a:	695a      	ldr	r2, [r3, #20]
 801078c:	4613      	mov	r3, r2
 801078e:	005b      	lsls	r3, r3, #1
 8010790:	4413      	add	r3, r2
 8010792:	085a      	lsrs	r2, r3, #1
 8010794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010796:	695b      	ldr	r3, [r3, #20]
 8010798:	f003 0301 	and.w	r3, r3, #1
 801079c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801079e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80107a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107a2:	699a      	ldr	r2, [r3, #24]
 80107a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107a6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80107aa:	0a5b      	lsrs	r3, r3, #9
 80107ac:	429a      	cmp	r2, r3
 80107ae:	d201      	bcs.n	80107b4 <find_volume+0x3ac>
 80107b0:	230d      	movs	r3, #13
 80107b2:	e06a      	b.n	801088a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80107b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107b6:	f04f 32ff 	mov.w	r2, #4294967295
 80107ba:	611a      	str	r2, [r3, #16]
 80107bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107be:	691a      	ldr	r2, [r3, #16]
 80107c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107c2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80107c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107c6:	2280      	movs	r2, #128	; 0x80
 80107c8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80107ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80107ce:	2b03      	cmp	r3, #3
 80107d0:	d149      	bne.n	8010866 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80107d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d4:	3330      	adds	r3, #48	; 0x30
 80107d6:	3330      	adds	r3, #48	; 0x30
 80107d8:	4618      	mov	r0, r3
 80107da:	f7fe fbf9 	bl	800efd0 <ld_word>
 80107de:	4603      	mov	r3, r0
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	d140      	bne.n	8010866 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80107e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107e6:	3301      	adds	r3, #1
 80107e8:	4619      	mov	r1, r3
 80107ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80107ec:	f7fe fea0 	bl	800f530 <move_window>
 80107f0:	4603      	mov	r3, r0
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d137      	bne.n	8010866 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80107f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f8:	2200      	movs	r2, #0
 80107fa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80107fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107fe:	3330      	adds	r3, #48	; 0x30
 8010800:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010804:	4618      	mov	r0, r3
 8010806:	f7fe fbe3 	bl	800efd0 <ld_word>
 801080a:	4603      	mov	r3, r0
 801080c:	461a      	mov	r2, r3
 801080e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010812:	429a      	cmp	r2, r3
 8010814:	d127      	bne.n	8010866 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010818:	3330      	adds	r3, #48	; 0x30
 801081a:	4618      	mov	r0, r3
 801081c:	f7fe fbf0 	bl	800f000 <ld_dword>
 8010820:	4603      	mov	r3, r0
 8010822:	4a1c      	ldr	r2, [pc, #112]	; (8010894 <find_volume+0x48c>)
 8010824:	4293      	cmp	r3, r2
 8010826:	d11e      	bne.n	8010866 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801082a:	3330      	adds	r3, #48	; 0x30
 801082c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010830:	4618      	mov	r0, r3
 8010832:	f7fe fbe5 	bl	800f000 <ld_dword>
 8010836:	4603      	mov	r3, r0
 8010838:	4a17      	ldr	r2, [pc, #92]	; (8010898 <find_volume+0x490>)
 801083a:	4293      	cmp	r3, r2
 801083c:	d113      	bne.n	8010866 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801083e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010840:	3330      	adds	r3, #48	; 0x30
 8010842:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010846:	4618      	mov	r0, r3
 8010848:	f7fe fbda 	bl	800f000 <ld_dword>
 801084c:	4602      	mov	r2, r0
 801084e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010850:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010854:	3330      	adds	r3, #48	; 0x30
 8010856:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801085a:	4618      	mov	r0, r3
 801085c:	f7fe fbd0 	bl	800f000 <ld_dword>
 8010860:	4602      	mov	r2, r0
 8010862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010864:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010868:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801086c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801086e:	4b0b      	ldr	r3, [pc, #44]	; (801089c <find_volume+0x494>)
 8010870:	881b      	ldrh	r3, [r3, #0]
 8010872:	3301      	adds	r3, #1
 8010874:	b29a      	uxth	r2, r3
 8010876:	4b09      	ldr	r3, [pc, #36]	; (801089c <find_volume+0x494>)
 8010878:	801a      	strh	r2, [r3, #0]
 801087a:	4b08      	ldr	r3, [pc, #32]	; (801089c <find_volume+0x494>)
 801087c:	881a      	ldrh	r2, [r3, #0]
 801087e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010880:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010882:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010884:	f7fe fdec 	bl	800f460 <clear_lock>
#endif
	return FR_OK;
 8010888:	2300      	movs	r3, #0
}
 801088a:	4618      	mov	r0, r3
 801088c:	3758      	adds	r7, #88	; 0x58
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}
 8010892:	bf00      	nop
 8010894:	41615252 	.word	0x41615252
 8010898:	61417272 	.word	0x61417272
 801089c:	200380f4 	.word	0x200380f4

080108a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b084      	sub	sp, #16
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80108aa:	2309      	movs	r3, #9
 80108ac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d01c      	beq.n	80108ee <validate+0x4e>
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d018      	beq.n	80108ee <validate+0x4e>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	781b      	ldrb	r3, [r3, #0]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d013      	beq.n	80108ee <validate+0x4e>
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	889a      	ldrh	r2, [r3, #4]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	88db      	ldrh	r3, [r3, #6]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d10c      	bne.n	80108ee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	785b      	ldrb	r3, [r3, #1]
 80108da:	4618      	mov	r0, r3
 80108dc:	f7fe fada 	bl	800ee94 <disk_status>
 80108e0:	4603      	mov	r3, r0
 80108e2:	f003 0301 	and.w	r3, r3, #1
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d101      	bne.n	80108ee <validate+0x4e>
			res = FR_OK;
 80108ea:	2300      	movs	r3, #0
 80108ec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80108ee:	7bfb      	ldrb	r3, [r7, #15]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d102      	bne.n	80108fa <validate+0x5a>
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	e000      	b.n	80108fc <validate+0x5c>
 80108fa:	2300      	movs	r3, #0
 80108fc:	683a      	ldr	r2, [r7, #0]
 80108fe:	6013      	str	r3, [r2, #0]
	return res;
 8010900:	7bfb      	ldrb	r3, [r7, #15]
}
 8010902:	4618      	mov	r0, r3
 8010904:	3710      	adds	r7, #16
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
	...

0801090c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b088      	sub	sp, #32
 8010910:	af00      	add	r7, sp, #0
 8010912:	60f8      	str	r0, [r7, #12]
 8010914:	60b9      	str	r1, [r7, #8]
 8010916:	4613      	mov	r3, r2
 8010918:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801091e:	f107 0310 	add.w	r3, r7, #16
 8010922:	4618      	mov	r0, r3
 8010924:	f7ff fcd5 	bl	80102d2 <get_ldnumber>
 8010928:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801092a:	69fb      	ldr	r3, [r7, #28]
 801092c:	2b00      	cmp	r3, #0
 801092e:	da01      	bge.n	8010934 <f_mount+0x28>
 8010930:	230b      	movs	r3, #11
 8010932:	e02b      	b.n	801098c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010934:	4a17      	ldr	r2, [pc, #92]	; (8010994 <f_mount+0x88>)
 8010936:	69fb      	ldr	r3, [r7, #28]
 8010938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801093c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801093e:	69bb      	ldr	r3, [r7, #24]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d005      	beq.n	8010950 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010944:	69b8      	ldr	r0, [r7, #24]
 8010946:	f7fe fd8b 	bl	800f460 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801094a:	69bb      	ldr	r3, [r7, #24]
 801094c:	2200      	movs	r2, #0
 801094e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d002      	beq.n	801095c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	2200      	movs	r2, #0
 801095a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801095c:	68fa      	ldr	r2, [r7, #12]
 801095e:	490d      	ldr	r1, [pc, #52]	; (8010994 <f_mount+0x88>)
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d002      	beq.n	8010972 <f_mount+0x66>
 801096c:	79fb      	ldrb	r3, [r7, #7]
 801096e:	2b01      	cmp	r3, #1
 8010970:	d001      	beq.n	8010976 <f_mount+0x6a>
 8010972:	2300      	movs	r3, #0
 8010974:	e00a      	b.n	801098c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010976:	f107 010c 	add.w	r1, r7, #12
 801097a:	f107 0308 	add.w	r3, r7, #8
 801097e:	2200      	movs	r2, #0
 8010980:	4618      	mov	r0, r3
 8010982:	f7ff fd41 	bl	8010408 <find_volume>
 8010986:	4603      	mov	r3, r0
 8010988:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801098a:	7dfb      	ldrb	r3, [r7, #23]
}
 801098c:	4618      	mov	r0, r3
 801098e:	3720      	adds	r7, #32
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	200380f0 	.word	0x200380f0

08010998 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b098      	sub	sp, #96	; 0x60
 801099c:	af00      	add	r7, sp, #0
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	60b9      	str	r1, [r7, #8]
 80109a2:	4613      	mov	r3, r2
 80109a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d101      	bne.n	80109b0 <f_open+0x18>
 80109ac:	2309      	movs	r3, #9
 80109ae:	e1ad      	b.n	8010d0c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80109b0:	79fb      	ldrb	r3, [r7, #7]
 80109b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80109b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80109b8:	79fa      	ldrb	r2, [r7, #7]
 80109ba:	f107 0110 	add.w	r1, r7, #16
 80109be:	f107 0308 	add.w	r3, r7, #8
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7ff fd20 	bl	8010408 <find_volume>
 80109c8:	4603      	mov	r3, r0
 80109ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80109ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	f040 8191 	bne.w	8010cfa <f_open+0x362>
		dj.obj.fs = fs;
 80109d8:	693b      	ldr	r3, [r7, #16]
 80109da:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80109dc:	68ba      	ldr	r2, [r7, #8]
 80109de:	f107 0314 	add.w	r3, r7, #20
 80109e2:	4611      	mov	r1, r2
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7ff fc03 	bl	80101f0 <follow_path>
 80109ea:	4603      	mov	r3, r0
 80109ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80109f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d11a      	bne.n	8010a2e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80109f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80109fc:	b25b      	sxtb	r3, r3
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	da03      	bge.n	8010a0a <f_open+0x72>
				res = FR_INVALID_NAME;
 8010a02:	2306      	movs	r3, #6
 8010a04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010a08:	e011      	b.n	8010a2e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010a0a:	79fb      	ldrb	r3, [r7, #7]
 8010a0c:	f023 0301 	bic.w	r3, r3, #1
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	bf14      	ite	ne
 8010a14:	2301      	movne	r3, #1
 8010a16:	2300      	moveq	r3, #0
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	461a      	mov	r2, r3
 8010a1c:	f107 0314 	add.w	r3, r7, #20
 8010a20:	4611      	mov	r1, r2
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7fe fbd4 	bl	800f1d0 <chk_lock>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010a2e:	79fb      	ldrb	r3, [r7, #7]
 8010a30:	f003 031c 	and.w	r3, r3, #28
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d07f      	beq.n	8010b38 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010a38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d017      	beq.n	8010a70 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010a40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a44:	2b04      	cmp	r3, #4
 8010a46:	d10e      	bne.n	8010a66 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010a48:	f7fe fc1e 	bl	800f288 <enq_lock>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d006      	beq.n	8010a60 <f_open+0xc8>
 8010a52:	f107 0314 	add.w	r3, r7, #20
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7ff fb03 	bl	8010062 <dir_register>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	e000      	b.n	8010a62 <f_open+0xca>
 8010a60:	2312      	movs	r3, #18
 8010a62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010a66:	79fb      	ldrb	r3, [r7, #7]
 8010a68:	f043 0308 	orr.w	r3, r3, #8
 8010a6c:	71fb      	strb	r3, [r7, #7]
 8010a6e:	e010      	b.n	8010a92 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010a70:	7ebb      	ldrb	r3, [r7, #26]
 8010a72:	f003 0311 	and.w	r3, r3, #17
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d003      	beq.n	8010a82 <f_open+0xea>
					res = FR_DENIED;
 8010a7a:	2307      	movs	r3, #7
 8010a7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010a80:	e007      	b.n	8010a92 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010a82:	79fb      	ldrb	r3, [r7, #7]
 8010a84:	f003 0304 	and.w	r3, r3, #4
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d002      	beq.n	8010a92 <f_open+0xfa>
 8010a8c:	2308      	movs	r3, #8
 8010a8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010a92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d168      	bne.n	8010b6c <f_open+0x1d4>
 8010a9a:	79fb      	ldrb	r3, [r7, #7]
 8010a9c:	f003 0308 	and.w	r3, r3, #8
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d063      	beq.n	8010b6c <f_open+0x1d4>
				dw = GET_FATTIME();
 8010aa4:	f7fd ffb4 	bl	800ea10 <get_fattime>
 8010aa8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aac:	330e      	adds	r3, #14
 8010aae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7fe fae3 	bl	800f07c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ab8:	3316      	adds	r3, #22
 8010aba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7fe fadd 	bl	800f07c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ac4:	330b      	adds	r3, #11
 8010ac6:	2220      	movs	r2, #32
 8010ac8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ace:	4611      	mov	r1, r2
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7ff fa32 	bl	800ff3a <ld_clust>
 8010ad6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010adc:	2200      	movs	r2, #0
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7ff fa4a 	bl	800ff78 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ae6:	331c      	adds	r3, #28
 8010ae8:	2100      	movs	r1, #0
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7fe fac6 	bl	800f07c <st_dword>
					fs->wflag = 1;
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	2201      	movs	r2, #1
 8010af4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d037      	beq.n	8010b6c <f_open+0x1d4>
						dw = fs->winsect;
 8010afc:	693b      	ldr	r3, [r7, #16]
 8010afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b00:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010b02:	f107 0314 	add.w	r3, r7, #20
 8010b06:	2200      	movs	r2, #0
 8010b08:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7fe ff5d 	bl	800f9ca <remove_chain>
 8010b10:	4603      	mov	r3, r0
 8010b12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010b16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d126      	bne.n	8010b6c <f_open+0x1d4>
							res = move_window(fs, dw);
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7fe fd04 	bl	800f530 <move_window>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010b32:	3a01      	subs	r2, #1
 8010b34:	60da      	str	r2, [r3, #12]
 8010b36:	e019      	b.n	8010b6c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010b38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d115      	bne.n	8010b6c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010b40:	7ebb      	ldrb	r3, [r7, #26]
 8010b42:	f003 0310 	and.w	r3, r3, #16
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d003      	beq.n	8010b52 <f_open+0x1ba>
					res = FR_NO_FILE;
 8010b4a:	2304      	movs	r3, #4
 8010b4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010b50:	e00c      	b.n	8010b6c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010b52:	79fb      	ldrb	r3, [r7, #7]
 8010b54:	f003 0302 	and.w	r3, r3, #2
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d007      	beq.n	8010b6c <f_open+0x1d4>
 8010b5c:	7ebb      	ldrb	r3, [r7, #26]
 8010b5e:	f003 0301 	and.w	r3, r3, #1
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d002      	beq.n	8010b6c <f_open+0x1d4>
						res = FR_DENIED;
 8010b66:	2307      	movs	r3, #7
 8010b68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010b6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d128      	bne.n	8010bc6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010b74:	79fb      	ldrb	r3, [r7, #7]
 8010b76:	f003 0308 	and.w	r3, r3, #8
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d003      	beq.n	8010b86 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010b7e:	79fb      	ldrb	r3, [r7, #7]
 8010b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b84:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010b8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010b94:	79fb      	ldrb	r3, [r7, #7]
 8010b96:	f023 0301 	bic.w	r3, r3, #1
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	bf14      	ite	ne
 8010b9e:	2301      	movne	r3, #1
 8010ba0:	2300      	moveq	r3, #0
 8010ba2:	b2db      	uxtb	r3, r3
 8010ba4:	461a      	mov	r2, r3
 8010ba6:	f107 0314 	add.w	r3, r7, #20
 8010baa:	4611      	mov	r1, r2
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7fe fb8d 	bl	800f2cc <inc_lock>
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	691b      	ldr	r3, [r3, #16]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d102      	bne.n	8010bc6 <f_open+0x22e>
 8010bc0:	2302      	movs	r3, #2
 8010bc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010bc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f040 8095 	bne.w	8010cfa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010bd4:	4611      	mov	r1, r2
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7ff f9af 	bl	800ff3a <ld_clust>
 8010bdc:	4602      	mov	r2, r0
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010be4:	331c      	adds	r3, #28
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7fe fa0a 	bl	800f000 <ld_dword>
 8010bec:	4602      	mov	r2, r0
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010bf8:	693a      	ldr	r2, [r7, #16]
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	88da      	ldrh	r2, [r3, #6]
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	79fa      	ldrb	r2, [r7, #7]
 8010c0a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	2200      	movs	r2, #0
 8010c16:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	3330      	adds	r3, #48	; 0x30
 8010c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c26:	2100      	movs	r1, #0
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7fe fa74 	bl	800f116 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010c2e:	79fb      	ldrb	r3, [r7, #7]
 8010c30:	f003 0320 	and.w	r3, r3, #32
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d060      	beq.n	8010cfa <f_open+0x362>
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	68db      	ldr	r3, [r3, #12]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d05c      	beq.n	8010cfa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	68da      	ldr	r2, [r3, #12]
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	895b      	ldrh	r3, [r3, #10]
 8010c4c:	025b      	lsls	r3, r3, #9
 8010c4e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	689b      	ldr	r3, [r3, #8]
 8010c54:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	68db      	ldr	r3, [r3, #12]
 8010c5a:	657b      	str	r3, [r7, #84]	; 0x54
 8010c5c:	e016      	b.n	8010c8c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7fe fd1f 	bl	800f6a6 <get_fat>
 8010c68:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010c6c:	2b01      	cmp	r3, #1
 8010c6e:	d802      	bhi.n	8010c76 <f_open+0x2de>
 8010c70:	2302      	movs	r3, #2
 8010c72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c7c:	d102      	bne.n	8010c84 <f_open+0x2ec>
 8010c7e:	2301      	movs	r3, #1
 8010c80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010c84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c88:	1ad3      	subs	r3, r2, r3
 8010c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8010c8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d103      	bne.n	8010c9c <f_open+0x304>
 8010c94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d8e0      	bhi.n	8010c5e <f_open+0x2c6>
				}
				fp->clust = clst;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ca0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010ca2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d127      	bne.n	8010cfa <f_open+0x362>
 8010caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d022      	beq.n	8010cfa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010cb4:	693b      	ldr	r3, [r7, #16]
 8010cb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7fe fcd5 	bl	800f668 <clust2sect>
 8010cbe:	6478      	str	r0, [r7, #68]	; 0x44
 8010cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d103      	bne.n	8010cce <f_open+0x336>
						res = FR_INT_ERR;
 8010cc6:	2302      	movs	r3, #2
 8010cc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010ccc:	e015      	b.n	8010cfa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cd0:	0a5a      	lsrs	r2, r3, #9
 8010cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cd4:	441a      	add	r2, r3
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010cda:	693b      	ldr	r3, [r7, #16]
 8010cdc:	7858      	ldrb	r0, [r3, #1]
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	6a1a      	ldr	r2, [r3, #32]
 8010ce8:	2301      	movs	r3, #1
 8010cea:	f7fe f913 	bl	800ef14 <disk_read>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d002      	beq.n	8010cfa <f_open+0x362>
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010cfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d002      	beq.n	8010d08 <f_open+0x370>
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	2200      	movs	r2, #0
 8010d06:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010d08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	3760      	adds	r7, #96	; 0x60
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd80      	pop	{r7, pc}

08010d14 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b08c      	sub	sp, #48	; 0x30
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	60f8      	str	r0, [r7, #12]
 8010d1c:	60b9      	str	r1, [r7, #8]
 8010d1e:	607a      	str	r2, [r7, #4]
 8010d20:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	2200      	movs	r2, #0
 8010d2a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	f107 0210 	add.w	r2, r7, #16
 8010d32:	4611      	mov	r1, r2
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7ff fdb3 	bl	80108a0 <validate>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010d40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d107      	bne.n	8010d58 <f_write+0x44>
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	7d5b      	ldrb	r3, [r3, #21]
 8010d4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010d50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d002      	beq.n	8010d5e <f_write+0x4a>
 8010d58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d5c:	e14b      	b.n	8010ff6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	7d1b      	ldrb	r3, [r3, #20]
 8010d62:	f003 0302 	and.w	r3, r3, #2
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d101      	bne.n	8010d6e <f_write+0x5a>
 8010d6a:	2307      	movs	r3, #7
 8010d6c:	e143      	b.n	8010ff6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	699a      	ldr	r2, [r3, #24]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	441a      	add	r2, r3
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	699b      	ldr	r3, [r3, #24]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	f080 812d 	bcs.w	8010fda <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	699b      	ldr	r3, [r3, #24]
 8010d84:	43db      	mvns	r3, r3
 8010d86:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010d88:	e127      	b.n	8010fda <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	699b      	ldr	r3, [r3, #24]
 8010d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	f040 80e3 	bne.w	8010f5e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	699b      	ldr	r3, [r3, #24]
 8010d9c:	0a5b      	lsrs	r3, r3, #9
 8010d9e:	693a      	ldr	r2, [r7, #16]
 8010da0:	8952      	ldrh	r2, [r2, #10]
 8010da2:	3a01      	subs	r2, #1
 8010da4:	4013      	ands	r3, r2
 8010da6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010da8:	69bb      	ldr	r3, [r7, #24]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d143      	bne.n	8010e36 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	699b      	ldr	r3, [r3, #24]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d10c      	bne.n	8010dd0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	689b      	ldr	r3, [r3, #8]
 8010dba:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d11a      	bne.n	8010df8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	2100      	movs	r1, #0
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7fe fe64 	bl	800fa94 <create_chain>
 8010dcc:	62b8      	str	r0, [r7, #40]	; 0x28
 8010dce:	e013      	b.n	8010df8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d007      	beq.n	8010de8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	699b      	ldr	r3, [r3, #24]
 8010ddc:	4619      	mov	r1, r3
 8010dde:	68f8      	ldr	r0, [r7, #12]
 8010de0:	f7fe fef0 	bl	800fbc4 <clmt_clust>
 8010de4:	62b8      	str	r0, [r7, #40]	; 0x28
 8010de6:	e007      	b.n	8010df8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010de8:	68fa      	ldr	r2, [r7, #12]
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	69db      	ldr	r3, [r3, #28]
 8010dee:	4619      	mov	r1, r3
 8010df0:	4610      	mov	r0, r2
 8010df2:	f7fe fe4f 	bl	800fa94 <create_chain>
 8010df6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	f000 80f2 	beq.w	8010fe4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e02:	2b01      	cmp	r3, #1
 8010e04:	d104      	bne.n	8010e10 <f_write+0xfc>
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	2202      	movs	r2, #2
 8010e0a:	755a      	strb	r2, [r3, #21]
 8010e0c:	2302      	movs	r3, #2
 8010e0e:	e0f2      	b.n	8010ff6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e16:	d104      	bne.n	8010e22 <f_write+0x10e>
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	755a      	strb	r2, [r3, #21]
 8010e1e:	2301      	movs	r3, #1
 8010e20:	e0e9      	b.n	8010ff6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e26:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	689b      	ldr	r3, [r3, #8]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d102      	bne.n	8010e36 <f_write+0x122>
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e34:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	7d1b      	ldrb	r3, [r3, #20]
 8010e3a:	b25b      	sxtb	r3, r3
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	da18      	bge.n	8010e72 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010e40:	693b      	ldr	r3, [r7, #16]
 8010e42:	7858      	ldrb	r0, [r3, #1]
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	6a1a      	ldr	r2, [r3, #32]
 8010e4e:	2301      	movs	r3, #1
 8010e50:	f7fe f880 	bl	800ef54 <disk_write>
 8010e54:	4603      	mov	r3, r0
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d004      	beq.n	8010e64 <f_write+0x150>
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	2201      	movs	r2, #1
 8010e5e:	755a      	strb	r2, [r3, #21]
 8010e60:	2301      	movs	r3, #1
 8010e62:	e0c8      	b.n	8010ff6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	7d1b      	ldrb	r3, [r3, #20]
 8010e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e6c:	b2da      	uxtb	r2, r3
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010e72:	693a      	ldr	r2, [r7, #16]
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	69db      	ldr	r3, [r3, #28]
 8010e78:	4619      	mov	r1, r3
 8010e7a:	4610      	mov	r0, r2
 8010e7c:	f7fe fbf4 	bl	800f668 <clust2sect>
 8010e80:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d104      	bne.n	8010e92 <f_write+0x17e>
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	2202      	movs	r2, #2
 8010e8c:	755a      	strb	r2, [r3, #21]
 8010e8e:	2302      	movs	r3, #2
 8010e90:	e0b1      	b.n	8010ff6 <f_write+0x2e2>
			sect += csect;
 8010e92:	697a      	ldr	r2, [r7, #20]
 8010e94:	69bb      	ldr	r3, [r7, #24]
 8010e96:	4413      	add	r3, r2
 8010e98:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	0a5b      	lsrs	r3, r3, #9
 8010e9e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010ea0:	6a3b      	ldr	r3, [r7, #32]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d03c      	beq.n	8010f20 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010ea6:	69ba      	ldr	r2, [r7, #24]
 8010ea8:	6a3b      	ldr	r3, [r7, #32]
 8010eaa:	4413      	add	r3, r2
 8010eac:	693a      	ldr	r2, [r7, #16]
 8010eae:	8952      	ldrh	r2, [r2, #10]
 8010eb0:	4293      	cmp	r3, r2
 8010eb2:	d905      	bls.n	8010ec0 <f_write+0x1ac>
					cc = fs->csize - csect;
 8010eb4:	693b      	ldr	r3, [r7, #16]
 8010eb6:	895b      	ldrh	r3, [r3, #10]
 8010eb8:	461a      	mov	r2, r3
 8010eba:	69bb      	ldr	r3, [r7, #24]
 8010ebc:	1ad3      	subs	r3, r2, r3
 8010ebe:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010ec0:	693b      	ldr	r3, [r7, #16]
 8010ec2:	7858      	ldrb	r0, [r3, #1]
 8010ec4:	6a3b      	ldr	r3, [r7, #32]
 8010ec6:	697a      	ldr	r2, [r7, #20]
 8010ec8:	69f9      	ldr	r1, [r7, #28]
 8010eca:	f7fe f843 	bl	800ef54 <disk_write>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d004      	beq.n	8010ede <f_write+0x1ca>
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	2201      	movs	r2, #1
 8010ed8:	755a      	strb	r2, [r3, #21]
 8010eda:	2301      	movs	r3, #1
 8010edc:	e08b      	b.n	8010ff6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	6a1a      	ldr	r2, [r3, #32]
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	1ad3      	subs	r3, r2, r3
 8010ee6:	6a3a      	ldr	r2, [r7, #32]
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d915      	bls.n	8010f18 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	6a1a      	ldr	r2, [r3, #32]
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	1ad3      	subs	r3, r2, r3
 8010efa:	025b      	lsls	r3, r3, #9
 8010efc:	69fa      	ldr	r2, [r7, #28]
 8010efe:	4413      	add	r3, r2
 8010f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010f04:	4619      	mov	r1, r3
 8010f06:	f7fe f8e5 	bl	800f0d4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	7d1b      	ldrb	r3, [r3, #20]
 8010f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f12:	b2da      	uxtb	r2, r3
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010f18:	6a3b      	ldr	r3, [r7, #32]
 8010f1a:	025b      	lsls	r3, r3, #9
 8010f1c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010f1e:	e03f      	b.n	8010fa0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	6a1b      	ldr	r3, [r3, #32]
 8010f24:	697a      	ldr	r2, [r7, #20]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d016      	beq.n	8010f58 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	699a      	ldr	r2, [r3, #24]
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010f32:	429a      	cmp	r2, r3
 8010f34:	d210      	bcs.n	8010f58 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	7858      	ldrb	r0, [r3, #1]
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f40:	2301      	movs	r3, #1
 8010f42:	697a      	ldr	r2, [r7, #20]
 8010f44:	f7fd ffe6 	bl	800ef14 <disk_read>
 8010f48:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d004      	beq.n	8010f58 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2201      	movs	r2, #1
 8010f52:	755a      	strb	r2, [r3, #21]
 8010f54:	2301      	movs	r3, #1
 8010f56:	e04e      	b.n	8010ff6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	697a      	ldr	r2, [r7, #20]
 8010f5c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	699b      	ldr	r3, [r3, #24]
 8010f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f66:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010f6a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d901      	bls.n	8010f78 <f_write+0x264>
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	699b      	ldr	r3, [r3, #24]
 8010f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f86:	4413      	add	r3, r2
 8010f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f8a:	69f9      	ldr	r1, [r7, #28]
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7fe f8a1 	bl	800f0d4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	7d1b      	ldrb	r3, [r3, #20]
 8010f96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010f9a:	b2da      	uxtb	r2, r3
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010fa0:	69fa      	ldr	r2, [r7, #28]
 8010fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa4:	4413      	add	r3, r2
 8010fa6:	61fb      	str	r3, [r7, #28]
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	699a      	ldr	r2, [r3, #24]
 8010fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fae:	441a      	add	r2, r3
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	619a      	str	r2, [r3, #24]
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	68da      	ldr	r2, [r3, #12]
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	699b      	ldr	r3, [r3, #24]
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	bf38      	it	cc
 8010fc0:	461a      	movcc	r2, r3
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	60da      	str	r2, [r3, #12]
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	681a      	ldr	r2, [r3, #0]
 8010fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fcc:	441a      	add	r2, r3
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	601a      	str	r2, [r3, #0]
 8010fd2:	687a      	ldr	r2, [r7, #4]
 8010fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd6:	1ad3      	subs	r3, r2, r3
 8010fd8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	f47f aed4 	bne.w	8010d8a <f_write+0x76>
 8010fe2:	e000      	b.n	8010fe6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010fe4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	7d1b      	ldrb	r3, [r3, #20]
 8010fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fee:	b2da      	uxtb	r2, r3
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010ff4:	2300      	movs	r3, #0
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3730      	adds	r7, #48	; 0x30
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}

08010ffe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010ffe:	b580      	push	{r7, lr}
 8011000:	b086      	sub	sp, #24
 8011002:	af00      	add	r7, sp, #0
 8011004:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f107 0208 	add.w	r2, r7, #8
 801100c:	4611      	mov	r1, r2
 801100e:	4618      	mov	r0, r3
 8011010:	f7ff fc46 	bl	80108a0 <validate>
 8011014:	4603      	mov	r3, r0
 8011016:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011018:	7dfb      	ldrb	r3, [r7, #23]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d168      	bne.n	80110f0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	7d1b      	ldrb	r3, [r3, #20]
 8011022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011026:	2b00      	cmp	r3, #0
 8011028:	d062      	beq.n	80110f0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	7d1b      	ldrb	r3, [r3, #20]
 801102e:	b25b      	sxtb	r3, r3
 8011030:	2b00      	cmp	r3, #0
 8011032:	da15      	bge.n	8011060 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	7858      	ldrb	r0, [r3, #1]
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6a1a      	ldr	r2, [r3, #32]
 8011042:	2301      	movs	r3, #1
 8011044:	f7fd ff86 	bl	800ef54 <disk_write>
 8011048:	4603      	mov	r3, r0
 801104a:	2b00      	cmp	r3, #0
 801104c:	d001      	beq.n	8011052 <f_sync+0x54>
 801104e:	2301      	movs	r3, #1
 8011050:	e04f      	b.n	80110f2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	7d1b      	ldrb	r3, [r3, #20]
 8011056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801105a:	b2da      	uxtb	r2, r3
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011060:	f7fd fcd6 	bl	800ea10 <get_fattime>
 8011064:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011066:	68ba      	ldr	r2, [r7, #8]
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801106c:	4619      	mov	r1, r3
 801106e:	4610      	mov	r0, r2
 8011070:	f7fe fa5e 	bl	800f530 <move_window>
 8011074:	4603      	mov	r3, r0
 8011076:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011078:	7dfb      	ldrb	r3, [r7, #23]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d138      	bne.n	80110f0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011082:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	330b      	adds	r3, #11
 8011088:	781a      	ldrb	r2, [r3, #0]
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	330b      	adds	r3, #11
 801108e:	f042 0220 	orr.w	r2, r2, #32
 8011092:	b2d2      	uxtb	r2, r2
 8011094:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	6818      	ldr	r0, [r3, #0]
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	689b      	ldr	r3, [r3, #8]
 801109e:	461a      	mov	r2, r3
 80110a0:	68f9      	ldr	r1, [r7, #12]
 80110a2:	f7fe ff69 	bl	800ff78 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	f103 021c 	add.w	r2, r3, #28
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	68db      	ldr	r3, [r3, #12]
 80110b0:	4619      	mov	r1, r3
 80110b2:	4610      	mov	r0, r2
 80110b4:	f7fd ffe2 	bl	800f07c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	3316      	adds	r3, #22
 80110bc:	6939      	ldr	r1, [r7, #16]
 80110be:	4618      	mov	r0, r3
 80110c0:	f7fd ffdc 	bl	800f07c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	3312      	adds	r3, #18
 80110c8:	2100      	movs	r1, #0
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7fd ffbb 	bl	800f046 <st_word>
					fs->wflag = 1;
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	2201      	movs	r2, #1
 80110d4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80110d6:	68bb      	ldr	r3, [r7, #8]
 80110d8:	4618      	mov	r0, r3
 80110da:	f7fe fa57 	bl	800f58c <sync_fs>
 80110de:	4603      	mov	r3, r0
 80110e0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	7d1b      	ldrb	r3, [r3, #20]
 80110e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80110ea:	b2da      	uxtb	r2, r3
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80110f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	3718      	adds	r7, #24
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}

080110fa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80110fa:	b580      	push	{r7, lr}
 80110fc:	b084      	sub	sp, #16
 80110fe:	af00      	add	r7, sp, #0
 8011100:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f7ff ff7b 	bl	8010ffe <f_sync>
 8011108:	4603      	mov	r3, r0
 801110a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801110c:	7bfb      	ldrb	r3, [r7, #15]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d118      	bne.n	8011144 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f107 0208 	add.w	r2, r7, #8
 8011118:	4611      	mov	r1, r2
 801111a:	4618      	mov	r0, r3
 801111c:	f7ff fbc0 	bl	80108a0 <validate>
 8011120:	4603      	mov	r3, r0
 8011122:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011124:	7bfb      	ldrb	r3, [r7, #15]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d10c      	bne.n	8011144 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	691b      	ldr	r3, [r3, #16]
 801112e:	4618      	mov	r0, r3
 8011130:	f7fe f95a 	bl	800f3e8 <dec_lock>
 8011134:	4603      	mov	r3, r0
 8011136:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011138:	7bfb      	ldrb	r3, [r7, #15]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d102      	bne.n	8011144 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2200      	movs	r2, #0
 8011142:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011144:	7bfb      	ldrb	r3, [r7, #15]
}
 8011146:	4618      	mov	r0, r3
 8011148:	3710      	adds	r7, #16
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}
	...

08011150 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8011150:	b590      	push	{r4, r7, lr}
 8011152:	b09d      	sub	sp, #116	; 0x74
 8011154:	af00      	add	r7, sp, #0
 8011156:	60f8      	str	r0, [r7, #12]
 8011158:	607a      	str	r2, [r7, #4]
 801115a:	603b      	str	r3, [r7, #0]
 801115c:	460b      	mov	r3, r1
 801115e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8011160:	2301      	movs	r3, #1
 8011162:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8011164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011168:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 801116a:	f107 030c 	add.w	r3, r7, #12
 801116e:	4618      	mov	r0, r3
 8011170:	f7ff f8af 	bl	80102d2 <get_ldnumber>
 8011174:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011178:	2b00      	cmp	r3, #0
 801117a:	da02      	bge.n	8011182 <f_mkfs+0x32>
 801117c:	230b      	movs	r3, #11
 801117e:	f000 bc0d 	b.w	801199c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8011182:	4a94      	ldr	r2, [pc, #592]	; (80113d4 <f_mkfs+0x284>)
 8011184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d005      	beq.n	801119a <f_mkfs+0x4a>
 801118e:	4a91      	ldr	r2, [pc, #580]	; (80113d4 <f_mkfs+0x284>)
 8011190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011196:	2200      	movs	r2, #0
 8011198:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 801119a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801119c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80111a0:	2300      	movs	r3, #0
 80111a2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80111a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7fd fe8c 	bl	800eec8 <disk_initialize>
 80111b0:	4603      	mov	r3, r0
 80111b2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80111b6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80111ba:	f003 0301 	and.w	r3, r3, #1
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d001      	beq.n	80111c6 <f_mkfs+0x76>
 80111c2:	2303      	movs	r3, #3
 80111c4:	e3ea      	b.n	801199c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80111c6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80111ca:	f003 0304 	and.w	r3, r3, #4
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d001      	beq.n	80111d6 <f_mkfs+0x86>
 80111d2:	230a      	movs	r3, #10
 80111d4:	e3e2      	b.n	801199c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 80111d6:	f107 0214 	add.w	r2, r7, #20
 80111da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80111de:	2103      	movs	r1, #3
 80111e0:	4618      	mov	r0, r3
 80111e2:	f7fd fed7 	bl	800ef94 <disk_ioctl>
 80111e6:	4603      	mov	r3, r0
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d10c      	bne.n	8011206 <f_mkfs+0xb6>
 80111ec:	697b      	ldr	r3, [r7, #20]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d009      	beq.n	8011206 <f_mkfs+0xb6>
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80111f8:	d805      	bhi.n	8011206 <f_mkfs+0xb6>
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	1e5a      	subs	r2, r3, #1
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	4013      	ands	r3, r2
 8011202:	2b00      	cmp	r3, #0
 8011204:	d001      	beq.n	801120a <f_mkfs+0xba>
 8011206:	2301      	movs	r3, #1
 8011208:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 801120a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801120e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d003      	beq.n	801121e <f_mkfs+0xce>
 8011216:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011218:	687a      	ldr	r2, [r7, #4]
 801121a:	429a      	cmp	r2, r3
 801121c:	d309      	bcc.n	8011232 <f_mkfs+0xe2>
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011224:	d805      	bhi.n	8011232 <f_mkfs+0xe2>
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	1e5a      	subs	r2, r3, #1
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	4013      	ands	r3, r2
 801122e:	2b00      	cmp	r3, #0
 8011230:	d001      	beq.n	8011236 <f_mkfs+0xe6>
 8011232:	2313      	movs	r3, #19
 8011234:	e3b2      	b.n	801199c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8011236:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011238:	687a      	ldr	r2, [r7, #4]
 801123a:	fbb2 f3f3 	udiv	r3, r2, r3
 801123e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8011244:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011246:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801124a:	fbb2 f3f3 	udiv	r3, r2, r3
 801124e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8011250:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011254:	fb02 f303 	mul.w	r3, r2, r3
 8011258:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 801125a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801125c:	2b00      	cmp	r3, #0
 801125e:	d101      	bne.n	8011264 <f_mkfs+0x114>
 8011260:	230e      	movs	r3, #14
 8011262:	e39b      	b.n	801199c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8011264:	f107 0210 	add.w	r2, r7, #16
 8011268:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801126c:	2101      	movs	r1, #1
 801126e:	4618      	mov	r0, r3
 8011270:	f7fd fe90 	bl	800ef94 <disk_ioctl>
 8011274:	4603      	mov	r3, r0
 8011276:	2b00      	cmp	r3, #0
 8011278:	d001      	beq.n	801127e <f_mkfs+0x12e>
 801127a:	2301      	movs	r3, #1
 801127c:	e38e      	b.n	801199c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 801127e:	7afb      	ldrb	r3, [r7, #11]
 8011280:	f003 0308 	and.w	r3, r3, #8
 8011284:	2b00      	cmp	r3, #0
 8011286:	d001      	beq.n	801128c <f_mkfs+0x13c>
 8011288:	2300      	movs	r3, #0
 801128a:	e000      	b.n	801128e <f_mkfs+0x13e>
 801128c:	233f      	movs	r3, #63	; 0x3f
 801128e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8011290:	693b      	ldr	r3, [r7, #16]
 8011292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011294:	429a      	cmp	r2, r3
 8011296:	d901      	bls.n	801129c <f_mkfs+0x14c>
 8011298:	230e      	movs	r3, #14
 801129a:	e37f      	b.n	801199c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 801129c:	693a      	ldr	r2, [r7, #16]
 801129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a0:	1ad3      	subs	r3, r2, r3
 80112a2:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80112a4:	693b      	ldr	r3, [r7, #16]
 80112a6:	2b7f      	cmp	r3, #127	; 0x7f
 80112a8:	d801      	bhi.n	80112ae <f_mkfs+0x15e>
 80112aa:	230e      	movs	r3, #14
 80112ac:	e376      	b.n	801199c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	2b80      	cmp	r3, #128	; 0x80
 80112b2:	d901      	bls.n	80112b8 <f_mkfs+0x168>
 80112b4:	2313      	movs	r3, #19
 80112b6:	e371      	b.n	801199c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80112b8:	7afb      	ldrb	r3, [r7, #11]
 80112ba:	f003 0302 	and.w	r3, r3, #2
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d00d      	beq.n	80112de <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80112c2:	7afb      	ldrb	r3, [r7, #11]
 80112c4:	f003 0307 	and.w	r3, r3, #7
 80112c8:	2b02      	cmp	r3, #2
 80112ca:	d004      	beq.n	80112d6 <f_mkfs+0x186>
 80112cc:	7afb      	ldrb	r3, [r7, #11]
 80112ce:	f003 0301 	and.w	r3, r3, #1
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d103      	bne.n	80112de <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 80112d6:	2303      	movs	r3, #3
 80112d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80112dc:	e009      	b.n	80112f2 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80112de:	7afb      	ldrb	r3, [r7, #11]
 80112e0:	f003 0301 	and.w	r3, r3, #1
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d101      	bne.n	80112ec <f_mkfs+0x19c>
 80112e8:	2313      	movs	r3, #19
 80112ea:	e357      	b.n	801199c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 80112ec:	2302      	movs	r3, #2
 80112ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80112f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80112fa:	2b03      	cmp	r3, #3
 80112fc:	d13c      	bne.n	8011378 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 80112fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011300:	2b00      	cmp	r3, #0
 8011302:	d11b      	bne.n	801133c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8011304:	693b      	ldr	r3, [r7, #16]
 8011306:	0c5b      	lsrs	r3, r3, #17
 8011308:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 801130a:	2300      	movs	r3, #0
 801130c:	64bb      	str	r3, [r7, #72]	; 0x48
 801130e:	2301      	movs	r3, #1
 8011310:	653b      	str	r3, [r7, #80]	; 0x50
 8011312:	e005      	b.n	8011320 <f_mkfs+0x1d0>
 8011314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011316:	3301      	adds	r3, #1
 8011318:	64bb      	str	r3, [r7, #72]	; 0x48
 801131a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801131c:	005b      	lsls	r3, r3, #1
 801131e:	653b      	str	r3, [r7, #80]	; 0x50
 8011320:	4a2d      	ldr	r2, [pc, #180]	; (80113d8 <f_mkfs+0x288>)
 8011322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d007      	beq.n	801133c <f_mkfs+0x1ec>
 801132c:	4a2a      	ldr	r2, [pc, #168]	; (80113d8 <f_mkfs+0x288>)
 801132e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011334:	461a      	mov	r2, r3
 8011336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011338:	4293      	cmp	r3, r2
 801133a:	d2eb      	bcs.n	8011314 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 801133c:	693a      	ldr	r2, [r7, #16]
 801133e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011340:	fbb2 f3f3 	udiv	r3, r2, r3
 8011344:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8011346:	6a3b      	ldr	r3, [r7, #32]
 8011348:	3302      	adds	r3, #2
 801134a:	009a      	lsls	r2, r3, #2
 801134c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801134e:	4413      	add	r3, r2
 8011350:	1e5a      	subs	r2, r3, #1
 8011352:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011354:	fbb2 f3f3 	udiv	r3, r2, r3
 8011358:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 801135a:	2320      	movs	r3, #32
 801135c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 801135e:	2300      	movs	r3, #0
 8011360:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8011362:	6a3b      	ldr	r3, [r7, #32]
 8011364:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011368:	4293      	cmp	r3, r2
 801136a:	d903      	bls.n	8011374 <f_mkfs+0x224>
 801136c:	6a3b      	ldr	r3, [r7, #32]
 801136e:	4a1b      	ldr	r2, [pc, #108]	; (80113dc <f_mkfs+0x28c>)
 8011370:	4293      	cmp	r3, r2
 8011372:	d952      	bls.n	801141a <f_mkfs+0x2ca>
 8011374:	230e      	movs	r3, #14
 8011376:	e311      	b.n	801199c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8011378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801137a:	2b00      	cmp	r3, #0
 801137c:	d11b      	bne.n	80113b6 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 801137e:	693b      	ldr	r3, [r7, #16]
 8011380:	0b1b      	lsrs	r3, r3, #12
 8011382:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8011384:	2300      	movs	r3, #0
 8011386:	64bb      	str	r3, [r7, #72]	; 0x48
 8011388:	2301      	movs	r3, #1
 801138a:	653b      	str	r3, [r7, #80]	; 0x50
 801138c:	e005      	b.n	801139a <f_mkfs+0x24a>
 801138e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011390:	3301      	adds	r3, #1
 8011392:	64bb      	str	r3, [r7, #72]	; 0x48
 8011394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011396:	005b      	lsls	r3, r3, #1
 8011398:	653b      	str	r3, [r7, #80]	; 0x50
 801139a:	4a11      	ldr	r2, [pc, #68]	; (80113e0 <f_mkfs+0x290>)
 801139c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801139e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d007      	beq.n	80113b6 <f_mkfs+0x266>
 80113a6:	4a0e      	ldr	r2, [pc, #56]	; (80113e0 <f_mkfs+0x290>)
 80113a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80113ae:	461a      	mov	r2, r3
 80113b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80113b2:	4293      	cmp	r3, r2
 80113b4:	d2eb      	bcs.n	801138e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80113b6:	693a      	ldr	r2, [r7, #16]
 80113b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80113be:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80113c0:	6a3b      	ldr	r3, [r7, #32]
 80113c2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80113c6:	4293      	cmp	r3, r2
 80113c8:	d90c      	bls.n	80113e4 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80113ca:	6a3b      	ldr	r3, [r7, #32]
 80113cc:	3302      	adds	r3, #2
 80113ce:	005b      	lsls	r3, r3, #1
 80113d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80113d2:	e012      	b.n	80113fa <f_mkfs+0x2aa>
 80113d4:	200380f0 	.word	0x200380f0
 80113d8:	080d6a3c 	.word	0x080d6a3c
 80113dc:	0ffffff5 	.word	0x0ffffff5
 80113e0:	080d6a4c 	.word	0x080d6a4c
				} else {
					fmt = FS_FAT12;
 80113e4:	2301      	movs	r3, #1
 80113e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80113ea:	6a3a      	ldr	r2, [r7, #32]
 80113ec:	4613      	mov	r3, r2
 80113ee:	005b      	lsls	r3, r3, #1
 80113f0:	4413      	add	r3, r2
 80113f2:	3301      	adds	r3, #1
 80113f4:	085b      	lsrs	r3, r3, #1
 80113f6:	3303      	adds	r3, #3
 80113f8:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80113fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80113fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80113fe:	4413      	add	r3, r2
 8011400:	1e5a      	subs	r2, r3, #1
 8011402:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011404:	fbb2 f3f3 	udiv	r3, r2, r3
 8011408:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 801140a:	2301      	movs	r3, #1
 801140c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 801140e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011410:	015a      	lsls	r2, r3, #5
 8011412:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011414:	fbb2 f3f3 	udiv	r3, r2, r3
 8011418:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 801141a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801141c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801141e:	4413      	add	r3, r2
 8011420:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8011422:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011426:	fb03 f202 	mul.w	r2, r3, r2
 801142a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801142c:	4413      	add	r3, r2
 801142e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011430:	4413      	add	r3, r2
 8011432:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8011434:	697a      	ldr	r2, [r7, #20]
 8011436:	69fb      	ldr	r3, [r7, #28]
 8011438:	4413      	add	r3, r2
 801143a:	1e5a      	subs	r2, r3, #1
 801143c:	697b      	ldr	r3, [r7, #20]
 801143e:	425b      	negs	r3, r3
 8011440:	401a      	ands	r2, r3
 8011442:	69fb      	ldr	r3, [r7, #28]
 8011444:	1ad3      	subs	r3, r2, r3
 8011446:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8011448:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801144c:	2b03      	cmp	r3, #3
 801144e:	d108      	bne.n	8011462 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8011450:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011454:	4413      	add	r3, r2
 8011456:	657b      	str	r3, [r7, #84]	; 0x54
 8011458:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801145a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801145c:	4413      	add	r3, r2
 801145e:	65bb      	str	r3, [r7, #88]	; 0x58
 8011460:	e006      	b.n	8011470 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8011462:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011466:	fbb2 f3f3 	udiv	r3, r2, r3
 801146a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801146c:	4413      	add	r3, r2
 801146e:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8011470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011472:	011a      	lsls	r2, r3, #4
 8011474:	69fb      	ldr	r3, [r7, #28]
 8011476:	441a      	add	r2, r3
 8011478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801147a:	1ad2      	subs	r2, r2, r3
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	429a      	cmp	r2, r3
 8011480:	d901      	bls.n	8011486 <f_mkfs+0x336>
 8011482:	230e      	movs	r3, #14
 8011484:	e28a      	b.n	801199c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8011486:	693a      	ldr	r2, [r7, #16]
 8011488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801148a:	1ad2      	subs	r2, r2, r3
 801148c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801148e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011490:	fb01 f303 	mul.w	r3, r1, r3
 8011494:	1ad2      	subs	r2, r2, r3
 8011496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011498:	1ad2      	subs	r2, r2, r3
 801149a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801149c:	fbb2 f3f3 	udiv	r3, r2, r3
 80114a0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80114a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80114a6:	2b03      	cmp	r3, #3
 80114a8:	d10f      	bne.n	80114ca <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80114aa:	6a3b      	ldr	r3, [r7, #32]
 80114ac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80114b0:	4293      	cmp	r3, r2
 80114b2:	d80a      	bhi.n	80114ca <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d105      	bne.n	80114c6 <f_mkfs+0x376>
 80114ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114bc:	085b      	lsrs	r3, r3, #1
 80114be:	607b      	str	r3, [r7, #4]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d144      	bne.n	8011550 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80114c6:	230e      	movs	r3, #14
 80114c8:	e268      	b.n	801199c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 80114ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80114ce:	2b02      	cmp	r3, #2
 80114d0:	d133      	bne.n	801153a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80114d2:	6a3b      	ldr	r3, [r7, #32]
 80114d4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80114d8:	4293      	cmp	r3, r2
 80114da:	d91e      	bls.n	801151a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d107      	bne.n	80114f2 <f_mkfs+0x3a2>
 80114e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114e4:	005b      	lsls	r3, r3, #1
 80114e6:	2b40      	cmp	r3, #64	; 0x40
 80114e8:	d803      	bhi.n	80114f2 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80114ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114ec:	005b      	lsls	r3, r3, #1
 80114ee:	607b      	str	r3, [r7, #4]
 80114f0:	e033      	b.n	801155a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80114f2:	7afb      	ldrb	r3, [r7, #11]
 80114f4:	f003 0302 	and.w	r3, r3, #2
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d003      	beq.n	8011504 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80114fc:	2303      	movs	r3, #3
 80114fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8011502:	e02a      	b.n	801155a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d105      	bne.n	8011516 <f_mkfs+0x3c6>
 801150a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801150c:	005b      	lsls	r3, r3, #1
 801150e:	607b      	str	r3, [r7, #4]
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2b80      	cmp	r3, #128	; 0x80
 8011514:	d91e      	bls.n	8011554 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8011516:	230e      	movs	r3, #14
 8011518:	e240      	b.n	801199c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 801151a:	6a3b      	ldr	r3, [r7, #32]
 801151c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011520:	4293      	cmp	r3, r2
 8011522:	d80a      	bhi.n	801153a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d105      	bne.n	8011536 <f_mkfs+0x3e6>
 801152a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801152c:	005b      	lsls	r3, r3, #1
 801152e:	607b      	str	r3, [r7, #4]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	2b80      	cmp	r3, #128	; 0x80
 8011534:	d910      	bls.n	8011558 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8011536:	230e      	movs	r3, #14
 8011538:	e230      	b.n	801199c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 801153a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801153e:	2b01      	cmp	r3, #1
 8011540:	d10c      	bne.n	801155c <f_mkfs+0x40c>
 8011542:	6a3b      	ldr	r3, [r7, #32]
 8011544:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011548:	4293      	cmp	r3, r2
 801154a:	d907      	bls.n	801155c <f_mkfs+0x40c>
 801154c:	230e      	movs	r3, #14
 801154e:	e225      	b.n	801199c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8011550:	bf00      	nop
 8011552:	e6ce      	b.n	80112f2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8011554:	bf00      	nop
 8011556:	e6cc      	b.n	80112f2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8011558:	bf00      	nop
			pau = au;
 801155a:	e6ca      	b.n	80112f2 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 801155c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 801155e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011560:	461a      	mov	r2, r3
 8011562:	2100      	movs	r1, #0
 8011564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011566:	f7fd fdd6 	bl	800f116 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 801156a:	220b      	movs	r2, #11
 801156c:	49b2      	ldr	r1, [pc, #712]	; (8011838 <f_mkfs+0x6e8>)
 801156e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011570:	f7fd fdb0 	bl	800f0d4 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8011574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011576:	330b      	adds	r3, #11
 8011578:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801157a:	4611      	mov	r1, r2
 801157c:	4618      	mov	r0, r3
 801157e:	f7fd fd62 	bl	800f046 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8011582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011584:	330d      	adds	r3, #13
 8011586:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011588:	b2d2      	uxtb	r2, r2
 801158a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 801158c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801158e:	330e      	adds	r3, #14
 8011590:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011592:	b292      	uxth	r2, r2
 8011594:	4611      	mov	r1, r2
 8011596:	4618      	mov	r0, r3
 8011598:	f7fd fd55 	bl	800f046 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 801159c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159e:	3310      	adds	r3, #16
 80115a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80115a2:	b2d2      	uxtb	r2, r2
 80115a4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80115a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a8:	f103 0211 	add.w	r2, r3, #17
 80115ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80115b0:	2b03      	cmp	r3, #3
 80115b2:	d002      	beq.n	80115ba <f_mkfs+0x46a>
 80115b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115b6:	b29b      	uxth	r3, r3
 80115b8:	e000      	b.n	80115bc <f_mkfs+0x46c>
 80115ba:	2300      	movs	r3, #0
 80115bc:	4619      	mov	r1, r3
 80115be:	4610      	mov	r0, r2
 80115c0:	f7fd fd41 	bl	800f046 <st_word>
		if (sz_vol < 0x10000) {
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80115ca:	d208      	bcs.n	80115de <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80115cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ce:	3313      	adds	r3, #19
 80115d0:	693a      	ldr	r2, [r7, #16]
 80115d2:	b292      	uxth	r2, r2
 80115d4:	4611      	mov	r1, r2
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7fd fd35 	bl	800f046 <st_word>
 80115dc:	e006      	b.n	80115ec <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80115de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e0:	3320      	adds	r3, #32
 80115e2:	693a      	ldr	r2, [r7, #16]
 80115e4:	4611      	mov	r1, r2
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7fd fd48 	bl	800f07c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80115ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ee:	3315      	adds	r3, #21
 80115f0:	22f8      	movs	r2, #248	; 0xf8
 80115f2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80115f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f6:	3318      	adds	r3, #24
 80115f8:	213f      	movs	r1, #63	; 0x3f
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7fd fd23 	bl	800f046 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8011600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011602:	331a      	adds	r3, #26
 8011604:	21ff      	movs	r1, #255	; 0xff
 8011606:	4618      	mov	r0, r3
 8011608:	f7fd fd1d 	bl	800f046 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 801160c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801160e:	331c      	adds	r3, #28
 8011610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011612:	4618      	mov	r0, r3
 8011614:	f7fd fd32 	bl	800f07c <st_dword>
		if (fmt == FS_FAT32) {
 8011618:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801161c:	2b03      	cmp	r3, #3
 801161e:	d131      	bne.n	8011684 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8011620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011622:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8011626:	f7fd f9f3 	bl	800ea10 <get_fattime>
 801162a:	4603      	mov	r3, r0
 801162c:	4619      	mov	r1, r3
 801162e:	4620      	mov	r0, r4
 8011630:	f7fd fd24 	bl	800f07c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8011634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011636:	3324      	adds	r3, #36	; 0x24
 8011638:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801163a:	4618      	mov	r0, r3
 801163c:	f7fd fd1e 	bl	800f07c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8011640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011642:	332c      	adds	r3, #44	; 0x2c
 8011644:	2102      	movs	r1, #2
 8011646:	4618      	mov	r0, r3
 8011648:	f7fd fd18 	bl	800f07c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 801164c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801164e:	3330      	adds	r3, #48	; 0x30
 8011650:	2101      	movs	r1, #1
 8011652:	4618      	mov	r0, r3
 8011654:	f7fd fcf7 	bl	800f046 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8011658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801165a:	3332      	adds	r3, #50	; 0x32
 801165c:	2106      	movs	r1, #6
 801165e:	4618      	mov	r0, r3
 8011660:	f7fd fcf1 	bl	800f046 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8011664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011666:	3340      	adds	r3, #64	; 0x40
 8011668:	2280      	movs	r2, #128	; 0x80
 801166a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 801166c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801166e:	3342      	adds	r3, #66	; 0x42
 8011670:	2229      	movs	r2, #41	; 0x29
 8011672:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8011674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011676:	3347      	adds	r3, #71	; 0x47
 8011678:	2213      	movs	r2, #19
 801167a:	4970      	ldr	r1, [pc, #448]	; (801183c <f_mkfs+0x6ec>)
 801167c:	4618      	mov	r0, r3
 801167e:	f7fd fd29 	bl	800f0d4 <mem_cpy>
 8011682:	e020      	b.n	80116c6 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8011684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011686:	f103 0427 	add.w	r4, r3, #39	; 0x27
 801168a:	f7fd f9c1 	bl	800ea10 <get_fattime>
 801168e:	4603      	mov	r3, r0
 8011690:	4619      	mov	r1, r3
 8011692:	4620      	mov	r0, r4
 8011694:	f7fd fcf2 	bl	800f07c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8011698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801169a:	3316      	adds	r3, #22
 801169c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801169e:	b292      	uxth	r2, r2
 80116a0:	4611      	mov	r1, r2
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7fd fccf 	bl	800f046 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80116a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116aa:	3324      	adds	r3, #36	; 0x24
 80116ac:	2280      	movs	r2, #128	; 0x80
 80116ae:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80116b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116b2:	3326      	adds	r3, #38	; 0x26
 80116b4:	2229      	movs	r2, #41	; 0x29
 80116b6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80116b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ba:	332b      	adds	r3, #43	; 0x2b
 80116bc:	2213      	movs	r2, #19
 80116be:	4960      	ldr	r1, [pc, #384]	; (8011840 <f_mkfs+0x6f0>)
 80116c0:	4618      	mov	r0, r3
 80116c2:	f7fd fd07 	bl	800f0d4 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80116c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80116cc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7fd fcb8 	bl	800f046 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80116d6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80116da:	2301      	movs	r3, #1
 80116dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80116e0:	f7fd fc38 	bl	800ef54 <disk_write>
 80116e4:	4603      	mov	r3, r0
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d001      	beq.n	80116ee <f_mkfs+0x59e>
 80116ea:	2301      	movs	r3, #1
 80116ec:	e156      	b.n	801199c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80116ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80116f2:	2b03      	cmp	r3, #3
 80116f4:	d140      	bne.n	8011778 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80116f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f8:	1d9a      	adds	r2, r3, #6
 80116fa:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80116fe:	2301      	movs	r3, #1
 8011700:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011702:	f7fd fc27 	bl	800ef54 <disk_write>
			mem_set(buf, 0, ss);
 8011706:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011708:	461a      	mov	r2, r3
 801170a:	2100      	movs	r1, #0
 801170c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801170e:	f7fd fd02 	bl	800f116 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8011712:	494c      	ldr	r1, [pc, #304]	; (8011844 <f_mkfs+0x6f4>)
 8011714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011716:	f7fd fcb1 	bl	800f07c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 801171a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801171c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011720:	4949      	ldr	r1, [pc, #292]	; (8011848 <f_mkfs+0x6f8>)
 8011722:	4618      	mov	r0, r3
 8011724:	f7fd fcaa 	bl	800f07c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8011728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801172a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801172e:	6a3b      	ldr	r3, [r7, #32]
 8011730:	3b01      	subs	r3, #1
 8011732:	4619      	mov	r1, r3
 8011734:	4610      	mov	r0, r2
 8011736:	f7fd fca1 	bl	800f07c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 801173a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801173c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011740:	2102      	movs	r1, #2
 8011742:	4618      	mov	r0, r3
 8011744:	f7fd fc9a 	bl	800f07c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8011748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801174a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801174e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011752:	4618      	mov	r0, r3
 8011754:	f7fd fc77 	bl	800f046 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8011758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801175a:	1dda      	adds	r2, r3, #7
 801175c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011760:	2301      	movs	r3, #1
 8011762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011764:	f7fd fbf6 	bl	800ef54 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8011768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176a:	1c5a      	adds	r2, r3, #1
 801176c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011770:	2301      	movs	r3, #1
 8011772:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011774:	f7fd fbee 	bl	800ef54 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8011778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801177a:	2100      	movs	r1, #0
 801177c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801177e:	f7fd fcca 	bl	800f116 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8011782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011784:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8011786:	2300      	movs	r3, #0
 8011788:	64bb      	str	r3, [r7, #72]	; 0x48
 801178a:	e04b      	b.n	8011824 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 801178c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011790:	2b03      	cmp	r3, #3
 8011792:	d113      	bne.n	80117bc <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8011794:	f06f 0107 	mvn.w	r1, #7
 8011798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801179a:	f7fd fc6f 	bl	800f07c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 801179e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a0:	3304      	adds	r3, #4
 80117a2:	f04f 31ff 	mov.w	r1, #4294967295
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7fd fc68 	bl	800f07c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80117ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ae:	3308      	adds	r3, #8
 80117b0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7fd fc61 	bl	800f07c <st_dword>
 80117ba:	e00b      	b.n	80117d4 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80117bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80117c0:	2b01      	cmp	r3, #1
 80117c2:	d101      	bne.n	80117c8 <f_mkfs+0x678>
 80117c4:	4b21      	ldr	r3, [pc, #132]	; (801184c <f_mkfs+0x6fc>)
 80117c6:	e001      	b.n	80117cc <f_mkfs+0x67c>
 80117c8:	f06f 0307 	mvn.w	r3, #7
 80117cc:	4619      	mov	r1, r3
 80117ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117d0:	f7fd fc54 	bl	800f07c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80117d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80117d6:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80117d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80117da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117dc:	4293      	cmp	r3, r2
 80117de:	bf28      	it	cs
 80117e0:	4613      	movcs	r3, r2
 80117e2:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80117e4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80117e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80117ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80117ee:	f7fd fbb1 	bl	800ef54 <disk_write>
 80117f2:	4603      	mov	r3, r0
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d001      	beq.n	80117fc <f_mkfs+0x6ac>
 80117f8:	2301      	movs	r3, #1
 80117fa:	e0cf      	b.n	801199c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80117fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80117fe:	461a      	mov	r2, r3
 8011800:	2100      	movs	r1, #0
 8011802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011804:	f7fd fc87 	bl	800f116 <mem_set>
				sect += n; nsect -= n;
 8011808:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801180a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801180c:	4413      	add	r3, r2
 801180e:	667b      	str	r3, [r7, #100]	; 0x64
 8011810:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011814:	1ad3      	subs	r3, r2, r3
 8011816:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8011818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801181a:	2b00      	cmp	r3, #0
 801181c:	d1dc      	bne.n	80117d8 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801181e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011820:	3301      	adds	r3, #1
 8011822:	64bb      	str	r3, [r7, #72]	; 0x48
 8011824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011828:	429a      	cmp	r2, r3
 801182a:	d3af      	bcc.n	801178c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 801182c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011830:	2b03      	cmp	r3, #3
 8011832:	d10d      	bne.n	8011850 <f_mkfs+0x700>
 8011834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011836:	e00c      	b.n	8011852 <f_mkfs+0x702>
 8011838:	080149a0 	.word	0x080149a0
 801183c:	080149ac 	.word	0x080149ac
 8011840:	080149c0 	.word	0x080149c0
 8011844:	41615252 	.word	0x41615252
 8011848:	61417272 	.word	0x61417272
 801184c:	00fffff8 	.word	0x00fffff8
 8011850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011852:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8011854:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011858:	4293      	cmp	r3, r2
 801185a:	bf28      	it	cs
 801185c:	4613      	movcs	r3, r2
 801185e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8011860:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011866:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011868:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801186a:	f7fd fb73 	bl	800ef54 <disk_write>
 801186e:	4603      	mov	r3, r0
 8011870:	2b00      	cmp	r3, #0
 8011872:	d001      	beq.n	8011878 <f_mkfs+0x728>
 8011874:	2301      	movs	r3, #1
 8011876:	e091      	b.n	801199c <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8011878:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801187a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801187c:	4413      	add	r3, r2
 801187e:	667b      	str	r3, [r7, #100]	; 0x64
 8011880:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011884:	1ad3      	subs	r3, r2, r3
 8011886:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8011888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801188a:	2b00      	cmp	r3, #0
 801188c:	d1e2      	bne.n	8011854 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 801188e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011892:	2b03      	cmp	r3, #3
 8011894:	d103      	bne.n	801189e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8011896:	230c      	movs	r3, #12
 8011898:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 801189c:	e010      	b.n	80118c0 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118a4:	d303      	bcc.n	80118ae <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80118a6:	2306      	movs	r3, #6
 80118a8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80118ac:	e008      	b.n	80118c0 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80118ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80118b2:	2b02      	cmp	r3, #2
 80118b4:	d101      	bne.n	80118ba <f_mkfs+0x76a>
 80118b6:	2304      	movs	r3, #4
 80118b8:	e000      	b.n	80118bc <f_mkfs+0x76c>
 80118ba:	2301      	movs	r3, #1
 80118bc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80118c0:	7afb      	ldrb	r3, [r7, #11]
 80118c2:	f003 0308 	and.w	r3, r3, #8
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d15b      	bne.n	8011982 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80118ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80118cc:	461a      	mov	r2, r3
 80118ce:	2100      	movs	r1, #0
 80118d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118d2:	f7fd fc20 	bl	800f116 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80118d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80118dc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80118e0:	4618      	mov	r0, r3
 80118e2:	f7fd fbb0 	bl	800f046 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80118e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80118ec:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80118ee:	69bb      	ldr	r3, [r7, #24]
 80118f0:	2200      	movs	r2, #0
 80118f2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80118f4:	69bb      	ldr	r3, [r7, #24]
 80118f6:	3301      	adds	r3, #1
 80118f8:	2201      	movs	r2, #1
 80118fa:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80118fc:	69bb      	ldr	r3, [r7, #24]
 80118fe:	3302      	adds	r3, #2
 8011900:	2201      	movs	r2, #1
 8011902:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8011904:	69bb      	ldr	r3, [r7, #24]
 8011906:	3303      	adds	r3, #3
 8011908:	2200      	movs	r2, #0
 801190a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 801190c:	69bb      	ldr	r3, [r7, #24]
 801190e:	3304      	adds	r3, #4
 8011910:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8011914:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8011916:	693a      	ldr	r2, [r7, #16]
 8011918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801191a:	441a      	add	r2, r3
 801191c:	4b21      	ldr	r3, [pc, #132]	; (80119a4 <f_mkfs+0x854>)
 801191e:	fba3 1302 	umull	r1, r3, r3, r2
 8011922:	1ad2      	subs	r2, r2, r3
 8011924:	0852      	lsrs	r2, r2, #1
 8011926:	4413      	add	r3, r2
 8011928:	0b5b      	lsrs	r3, r3, #13
 801192a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 801192c:	69bb      	ldr	r3, [r7, #24]
 801192e:	3305      	adds	r3, #5
 8011930:	22fe      	movs	r2, #254	; 0xfe
 8011932:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8011934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011936:	089b      	lsrs	r3, r3, #2
 8011938:	b2da      	uxtb	r2, r3
 801193a:	69bb      	ldr	r3, [r7, #24]
 801193c:	3306      	adds	r3, #6
 801193e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8011942:	b2d2      	uxtb	r2, r2
 8011944:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8011946:	69bb      	ldr	r3, [r7, #24]
 8011948:	3307      	adds	r3, #7
 801194a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801194c:	b2d2      	uxtb	r2, r2
 801194e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8011950:	69bb      	ldr	r3, [r7, #24]
 8011952:	3308      	adds	r3, #8
 8011954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011956:	4618      	mov	r0, r3
 8011958:	f7fd fb90 	bl	800f07c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 801195c:	69bb      	ldr	r3, [r7, #24]
 801195e:	330c      	adds	r3, #12
 8011960:	693a      	ldr	r2, [r7, #16]
 8011962:	4611      	mov	r1, r2
 8011964:	4618      	mov	r0, r3
 8011966:	f7fd fb89 	bl	800f07c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 801196a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801196e:	2301      	movs	r3, #1
 8011970:	2200      	movs	r2, #0
 8011972:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011974:	f7fd faee 	bl	800ef54 <disk_write>
 8011978:	4603      	mov	r3, r0
 801197a:	2b00      	cmp	r3, #0
 801197c:	d001      	beq.n	8011982 <f_mkfs+0x832>
 801197e:	2301      	movs	r3, #1
 8011980:	e00c      	b.n	801199c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8011982:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011986:	2200      	movs	r2, #0
 8011988:	2100      	movs	r1, #0
 801198a:	4618      	mov	r0, r3
 801198c:	f7fd fb02 	bl	800ef94 <disk_ioctl>
 8011990:	4603      	mov	r3, r0
 8011992:	2b00      	cmp	r3, #0
 8011994:	d001      	beq.n	801199a <f_mkfs+0x84a>
 8011996:	2301      	movs	r3, #1
 8011998:	e000      	b.n	801199c <f_mkfs+0x84c>

	return FR_OK;
 801199a:	2300      	movs	r3, #0
}
 801199c:	4618      	mov	r0, r3
 801199e:	3774      	adds	r7, #116	; 0x74
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd90      	pop	{r4, r7, pc}
 80119a4:	0515565b 	.word	0x0515565b

080119a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80119a8:	b480      	push	{r7}
 80119aa:	b087      	sub	sp, #28
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	60f8      	str	r0, [r7, #12]
 80119b0:	60b9      	str	r1, [r7, #8]
 80119b2:	4613      	mov	r3, r2
 80119b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80119b6:	2301      	movs	r3, #1
 80119b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80119ba:	2300      	movs	r3, #0
 80119bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80119be:	4b1f      	ldr	r3, [pc, #124]	; (8011a3c <FATFS_LinkDriverEx+0x94>)
 80119c0:	7a5b      	ldrb	r3, [r3, #9]
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d131      	bne.n	8011a2c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80119c8:	4b1c      	ldr	r3, [pc, #112]	; (8011a3c <FATFS_LinkDriverEx+0x94>)
 80119ca:	7a5b      	ldrb	r3, [r3, #9]
 80119cc:	b2db      	uxtb	r3, r3
 80119ce:	461a      	mov	r2, r3
 80119d0:	4b1a      	ldr	r3, [pc, #104]	; (8011a3c <FATFS_LinkDriverEx+0x94>)
 80119d2:	2100      	movs	r1, #0
 80119d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80119d6:	4b19      	ldr	r3, [pc, #100]	; (8011a3c <FATFS_LinkDriverEx+0x94>)
 80119d8:	7a5b      	ldrb	r3, [r3, #9]
 80119da:	b2db      	uxtb	r3, r3
 80119dc:	4a17      	ldr	r2, [pc, #92]	; (8011a3c <FATFS_LinkDriverEx+0x94>)
 80119de:	009b      	lsls	r3, r3, #2
 80119e0:	4413      	add	r3, r2
 80119e2:	68fa      	ldr	r2, [r7, #12]
 80119e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80119e6:	4b15      	ldr	r3, [pc, #84]	; (8011a3c <FATFS_LinkDriverEx+0x94>)
 80119e8:	7a5b      	ldrb	r3, [r3, #9]
 80119ea:	b2db      	uxtb	r3, r3
 80119ec:	461a      	mov	r2, r3
 80119ee:	4b13      	ldr	r3, [pc, #76]	; (8011a3c <FATFS_LinkDriverEx+0x94>)
 80119f0:	4413      	add	r3, r2
 80119f2:	79fa      	ldrb	r2, [r7, #7]
 80119f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80119f6:	4b11      	ldr	r3, [pc, #68]	; (8011a3c <FATFS_LinkDriverEx+0x94>)
 80119f8:	7a5b      	ldrb	r3, [r3, #9]
 80119fa:	b2db      	uxtb	r3, r3
 80119fc:	1c5a      	adds	r2, r3, #1
 80119fe:	b2d1      	uxtb	r1, r2
 8011a00:	4a0e      	ldr	r2, [pc, #56]	; (8011a3c <FATFS_LinkDriverEx+0x94>)
 8011a02:	7251      	strb	r1, [r2, #9]
 8011a04:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011a06:	7dbb      	ldrb	r3, [r7, #22]
 8011a08:	3330      	adds	r3, #48	; 0x30
 8011a0a:	b2da      	uxtb	r2, r3
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	3301      	adds	r3, #1
 8011a14:	223a      	movs	r2, #58	; 0x3a
 8011a16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011a18:	68bb      	ldr	r3, [r7, #8]
 8011a1a:	3302      	adds	r3, #2
 8011a1c:	222f      	movs	r2, #47	; 0x2f
 8011a1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011a20:	68bb      	ldr	r3, [r7, #8]
 8011a22:	3303      	adds	r3, #3
 8011a24:	2200      	movs	r2, #0
 8011a26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011a28:	2300      	movs	r3, #0
 8011a2a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	371c      	adds	r7, #28
 8011a32:	46bd      	mov	sp, r7
 8011a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a38:	4770      	bx	lr
 8011a3a:	bf00      	nop
 8011a3c:	20038118 	.word	0x20038118

08011a40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b082      	sub	sp, #8
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
 8011a48:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	6839      	ldr	r1, [r7, #0]
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f7ff ffaa 	bl	80119a8 <FATFS_LinkDriverEx>
 8011a54:	4603      	mov	r3, r0
}
 8011a56:	4618      	mov	r0, r3
 8011a58:	3708      	adds	r7, #8
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}
	...

08011a60 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8011a60:	b480      	push	{r7}
 8011a62:	b085      	sub	sp, #20
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
 8011a68:	460b      	mov	r3, r1
 8011a6a:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8011a70:	2301      	movs	r3, #1
 8011a72:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8011a74:	4b15      	ldr	r3, [pc, #84]	; (8011acc <FATFS_UnLinkDriverEx+0x6c>)
 8011a76:	7a5b      	ldrb	r3, [r3, #9]
 8011a78:	b2db      	uxtb	r3, r3
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d01e      	beq.n	8011abc <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	781b      	ldrb	r3, [r3, #0]
 8011a82:	3b30      	subs	r3, #48	; 0x30
 8011a84:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8011a86:	7bbb      	ldrb	r3, [r7, #14]
 8011a88:	4a10      	ldr	r2, [pc, #64]	; (8011acc <FATFS_UnLinkDriverEx+0x6c>)
 8011a8a:	009b      	lsls	r3, r3, #2
 8011a8c:	4413      	add	r3, r2
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d013      	beq.n	8011abc <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8011a94:	7bbb      	ldrb	r3, [r7, #14]
 8011a96:	4a0d      	ldr	r2, [pc, #52]	; (8011acc <FATFS_UnLinkDriverEx+0x6c>)
 8011a98:	009b      	lsls	r3, r3, #2
 8011a9a:	4413      	add	r3, r2
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8011aa0:	7bbb      	ldrb	r3, [r7, #14]
 8011aa2:	4a0a      	ldr	r2, [pc, #40]	; (8011acc <FATFS_UnLinkDriverEx+0x6c>)
 8011aa4:	4413      	add	r3, r2
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8011aaa:	4b08      	ldr	r3, [pc, #32]	; (8011acc <FATFS_UnLinkDriverEx+0x6c>)
 8011aac:	7a5b      	ldrb	r3, [r3, #9]
 8011aae:	b2db      	uxtb	r3, r3
 8011ab0:	3b01      	subs	r3, #1
 8011ab2:	b2da      	uxtb	r2, r3
 8011ab4:	4b05      	ldr	r3, [pc, #20]	; (8011acc <FATFS_UnLinkDriverEx+0x6c>)
 8011ab6:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8011abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3714      	adds	r7, #20
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr
 8011aca:	bf00      	nop
 8011acc:	20038118 	.word	0x20038118

08011ad0 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b082      	sub	sp, #8
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8011ad8:	2100      	movs	r1, #0
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	f7ff ffc0 	bl	8011a60 <FATFS_UnLinkDriverEx>
 8011ae0:	4603      	mov	r3, r0
}
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	3708      	adds	r7, #8
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd80      	pop	{r7, pc}

08011aea <__cvt>:
 8011aea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011aee:	ec55 4b10 	vmov	r4, r5, d0
 8011af2:	2d00      	cmp	r5, #0
 8011af4:	460e      	mov	r6, r1
 8011af6:	4619      	mov	r1, r3
 8011af8:	462b      	mov	r3, r5
 8011afa:	bfbb      	ittet	lt
 8011afc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011b00:	461d      	movlt	r5, r3
 8011b02:	2300      	movge	r3, #0
 8011b04:	232d      	movlt	r3, #45	; 0x2d
 8011b06:	700b      	strb	r3, [r1, #0]
 8011b08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b0a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011b0e:	4691      	mov	r9, r2
 8011b10:	f023 0820 	bic.w	r8, r3, #32
 8011b14:	bfbc      	itt	lt
 8011b16:	4622      	movlt	r2, r4
 8011b18:	4614      	movlt	r4, r2
 8011b1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011b1e:	d005      	beq.n	8011b2c <__cvt+0x42>
 8011b20:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011b24:	d100      	bne.n	8011b28 <__cvt+0x3e>
 8011b26:	3601      	adds	r6, #1
 8011b28:	2102      	movs	r1, #2
 8011b2a:	e000      	b.n	8011b2e <__cvt+0x44>
 8011b2c:	2103      	movs	r1, #3
 8011b2e:	ab03      	add	r3, sp, #12
 8011b30:	9301      	str	r3, [sp, #4]
 8011b32:	ab02      	add	r3, sp, #8
 8011b34:	9300      	str	r3, [sp, #0]
 8011b36:	ec45 4b10 	vmov	d0, r4, r5
 8011b3a:	4653      	mov	r3, sl
 8011b3c:	4632      	mov	r2, r6
 8011b3e:	f000 fe6b 	bl	8012818 <_dtoa_r>
 8011b42:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011b46:	4607      	mov	r7, r0
 8011b48:	d102      	bne.n	8011b50 <__cvt+0x66>
 8011b4a:	f019 0f01 	tst.w	r9, #1
 8011b4e:	d022      	beq.n	8011b96 <__cvt+0xac>
 8011b50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011b54:	eb07 0906 	add.w	r9, r7, r6
 8011b58:	d110      	bne.n	8011b7c <__cvt+0x92>
 8011b5a:	783b      	ldrb	r3, [r7, #0]
 8011b5c:	2b30      	cmp	r3, #48	; 0x30
 8011b5e:	d10a      	bne.n	8011b76 <__cvt+0x8c>
 8011b60:	2200      	movs	r2, #0
 8011b62:	2300      	movs	r3, #0
 8011b64:	4620      	mov	r0, r4
 8011b66:	4629      	mov	r1, r5
 8011b68:	f7ee ffce 	bl	8000b08 <__aeabi_dcmpeq>
 8011b6c:	b918      	cbnz	r0, 8011b76 <__cvt+0x8c>
 8011b6e:	f1c6 0601 	rsb	r6, r6, #1
 8011b72:	f8ca 6000 	str.w	r6, [sl]
 8011b76:	f8da 3000 	ldr.w	r3, [sl]
 8011b7a:	4499      	add	r9, r3
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	2300      	movs	r3, #0
 8011b80:	4620      	mov	r0, r4
 8011b82:	4629      	mov	r1, r5
 8011b84:	f7ee ffc0 	bl	8000b08 <__aeabi_dcmpeq>
 8011b88:	b108      	cbz	r0, 8011b8e <__cvt+0xa4>
 8011b8a:	f8cd 900c 	str.w	r9, [sp, #12]
 8011b8e:	2230      	movs	r2, #48	; 0x30
 8011b90:	9b03      	ldr	r3, [sp, #12]
 8011b92:	454b      	cmp	r3, r9
 8011b94:	d307      	bcc.n	8011ba6 <__cvt+0xbc>
 8011b96:	9b03      	ldr	r3, [sp, #12]
 8011b98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011b9a:	1bdb      	subs	r3, r3, r7
 8011b9c:	4638      	mov	r0, r7
 8011b9e:	6013      	str	r3, [r2, #0]
 8011ba0:	b004      	add	sp, #16
 8011ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ba6:	1c59      	adds	r1, r3, #1
 8011ba8:	9103      	str	r1, [sp, #12]
 8011baa:	701a      	strb	r2, [r3, #0]
 8011bac:	e7f0      	b.n	8011b90 <__cvt+0xa6>

08011bae <__exponent>:
 8011bae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	2900      	cmp	r1, #0
 8011bb4:	bfb8      	it	lt
 8011bb6:	4249      	neglt	r1, r1
 8011bb8:	f803 2b02 	strb.w	r2, [r3], #2
 8011bbc:	bfb4      	ite	lt
 8011bbe:	222d      	movlt	r2, #45	; 0x2d
 8011bc0:	222b      	movge	r2, #43	; 0x2b
 8011bc2:	2909      	cmp	r1, #9
 8011bc4:	7042      	strb	r2, [r0, #1]
 8011bc6:	dd2a      	ble.n	8011c1e <__exponent+0x70>
 8011bc8:	f10d 0207 	add.w	r2, sp, #7
 8011bcc:	4617      	mov	r7, r2
 8011bce:	260a      	movs	r6, #10
 8011bd0:	4694      	mov	ip, r2
 8011bd2:	fb91 f5f6 	sdiv	r5, r1, r6
 8011bd6:	fb06 1415 	mls	r4, r6, r5, r1
 8011bda:	3430      	adds	r4, #48	; 0x30
 8011bdc:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011be0:	460c      	mov	r4, r1
 8011be2:	2c63      	cmp	r4, #99	; 0x63
 8011be4:	f102 32ff 	add.w	r2, r2, #4294967295
 8011be8:	4629      	mov	r1, r5
 8011bea:	dcf1      	bgt.n	8011bd0 <__exponent+0x22>
 8011bec:	3130      	adds	r1, #48	; 0x30
 8011bee:	f1ac 0402 	sub.w	r4, ip, #2
 8011bf2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011bf6:	1c41      	adds	r1, r0, #1
 8011bf8:	4622      	mov	r2, r4
 8011bfa:	42ba      	cmp	r2, r7
 8011bfc:	d30a      	bcc.n	8011c14 <__exponent+0x66>
 8011bfe:	f10d 0209 	add.w	r2, sp, #9
 8011c02:	eba2 020c 	sub.w	r2, r2, ip
 8011c06:	42bc      	cmp	r4, r7
 8011c08:	bf88      	it	hi
 8011c0a:	2200      	movhi	r2, #0
 8011c0c:	4413      	add	r3, r2
 8011c0e:	1a18      	subs	r0, r3, r0
 8011c10:	b003      	add	sp, #12
 8011c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c14:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011c18:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011c1c:	e7ed      	b.n	8011bfa <__exponent+0x4c>
 8011c1e:	2330      	movs	r3, #48	; 0x30
 8011c20:	3130      	adds	r1, #48	; 0x30
 8011c22:	7083      	strb	r3, [r0, #2]
 8011c24:	70c1      	strb	r1, [r0, #3]
 8011c26:	1d03      	adds	r3, r0, #4
 8011c28:	e7f1      	b.n	8011c0e <__exponent+0x60>
	...

08011c2c <_printf_float>:
 8011c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c30:	ed2d 8b02 	vpush	{d8}
 8011c34:	b08d      	sub	sp, #52	; 0x34
 8011c36:	460c      	mov	r4, r1
 8011c38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011c3c:	4616      	mov	r6, r2
 8011c3e:	461f      	mov	r7, r3
 8011c40:	4605      	mov	r5, r0
 8011c42:	f000 fce7 	bl	8012614 <_localeconv_r>
 8011c46:	f8d0 a000 	ldr.w	sl, [r0]
 8011c4a:	4650      	mov	r0, sl
 8011c4c:	f7ee fb30 	bl	80002b0 <strlen>
 8011c50:	2300      	movs	r3, #0
 8011c52:	930a      	str	r3, [sp, #40]	; 0x28
 8011c54:	6823      	ldr	r3, [r4, #0]
 8011c56:	9305      	str	r3, [sp, #20]
 8011c58:	f8d8 3000 	ldr.w	r3, [r8]
 8011c5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011c60:	3307      	adds	r3, #7
 8011c62:	f023 0307 	bic.w	r3, r3, #7
 8011c66:	f103 0208 	add.w	r2, r3, #8
 8011c6a:	f8c8 2000 	str.w	r2, [r8]
 8011c6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011c72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011c76:	9307      	str	r3, [sp, #28]
 8011c78:	f8cd 8018 	str.w	r8, [sp, #24]
 8011c7c:	ee08 0a10 	vmov	s16, r0
 8011c80:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8011c84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011c88:	4b9e      	ldr	r3, [pc, #632]	; (8011f04 <_printf_float+0x2d8>)
 8011c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c8e:	f7ee ff6d 	bl	8000b6c <__aeabi_dcmpun>
 8011c92:	bb88      	cbnz	r0, 8011cf8 <_printf_float+0xcc>
 8011c94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011c98:	4b9a      	ldr	r3, [pc, #616]	; (8011f04 <_printf_float+0x2d8>)
 8011c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c9e:	f7ee ff47 	bl	8000b30 <__aeabi_dcmple>
 8011ca2:	bb48      	cbnz	r0, 8011cf8 <_printf_float+0xcc>
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	4640      	mov	r0, r8
 8011caa:	4649      	mov	r1, r9
 8011cac:	f7ee ff36 	bl	8000b1c <__aeabi_dcmplt>
 8011cb0:	b110      	cbz	r0, 8011cb8 <_printf_float+0x8c>
 8011cb2:	232d      	movs	r3, #45	; 0x2d
 8011cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011cb8:	4a93      	ldr	r2, [pc, #588]	; (8011f08 <_printf_float+0x2dc>)
 8011cba:	4b94      	ldr	r3, [pc, #592]	; (8011f0c <_printf_float+0x2e0>)
 8011cbc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011cc0:	bf94      	ite	ls
 8011cc2:	4690      	movls	r8, r2
 8011cc4:	4698      	movhi	r8, r3
 8011cc6:	2303      	movs	r3, #3
 8011cc8:	6123      	str	r3, [r4, #16]
 8011cca:	9b05      	ldr	r3, [sp, #20]
 8011ccc:	f023 0304 	bic.w	r3, r3, #4
 8011cd0:	6023      	str	r3, [r4, #0]
 8011cd2:	f04f 0900 	mov.w	r9, #0
 8011cd6:	9700      	str	r7, [sp, #0]
 8011cd8:	4633      	mov	r3, r6
 8011cda:	aa0b      	add	r2, sp, #44	; 0x2c
 8011cdc:	4621      	mov	r1, r4
 8011cde:	4628      	mov	r0, r5
 8011ce0:	f000 f9da 	bl	8012098 <_printf_common>
 8011ce4:	3001      	adds	r0, #1
 8011ce6:	f040 8090 	bne.w	8011e0a <_printf_float+0x1de>
 8011cea:	f04f 30ff 	mov.w	r0, #4294967295
 8011cee:	b00d      	add	sp, #52	; 0x34
 8011cf0:	ecbd 8b02 	vpop	{d8}
 8011cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cf8:	4642      	mov	r2, r8
 8011cfa:	464b      	mov	r3, r9
 8011cfc:	4640      	mov	r0, r8
 8011cfe:	4649      	mov	r1, r9
 8011d00:	f7ee ff34 	bl	8000b6c <__aeabi_dcmpun>
 8011d04:	b140      	cbz	r0, 8011d18 <_printf_float+0xec>
 8011d06:	464b      	mov	r3, r9
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	bfbc      	itt	lt
 8011d0c:	232d      	movlt	r3, #45	; 0x2d
 8011d0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011d12:	4a7f      	ldr	r2, [pc, #508]	; (8011f10 <_printf_float+0x2e4>)
 8011d14:	4b7f      	ldr	r3, [pc, #508]	; (8011f14 <_printf_float+0x2e8>)
 8011d16:	e7d1      	b.n	8011cbc <_printf_float+0x90>
 8011d18:	6863      	ldr	r3, [r4, #4]
 8011d1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011d1e:	9206      	str	r2, [sp, #24]
 8011d20:	1c5a      	adds	r2, r3, #1
 8011d22:	d13f      	bne.n	8011da4 <_printf_float+0x178>
 8011d24:	2306      	movs	r3, #6
 8011d26:	6063      	str	r3, [r4, #4]
 8011d28:	9b05      	ldr	r3, [sp, #20]
 8011d2a:	6861      	ldr	r1, [r4, #4]
 8011d2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011d30:	2300      	movs	r3, #0
 8011d32:	9303      	str	r3, [sp, #12]
 8011d34:	ab0a      	add	r3, sp, #40	; 0x28
 8011d36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011d3a:	ab09      	add	r3, sp, #36	; 0x24
 8011d3c:	ec49 8b10 	vmov	d0, r8, r9
 8011d40:	9300      	str	r3, [sp, #0]
 8011d42:	6022      	str	r2, [r4, #0]
 8011d44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011d48:	4628      	mov	r0, r5
 8011d4a:	f7ff fece 	bl	8011aea <__cvt>
 8011d4e:	9b06      	ldr	r3, [sp, #24]
 8011d50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d52:	2b47      	cmp	r3, #71	; 0x47
 8011d54:	4680      	mov	r8, r0
 8011d56:	d108      	bne.n	8011d6a <_printf_float+0x13e>
 8011d58:	1cc8      	adds	r0, r1, #3
 8011d5a:	db02      	blt.n	8011d62 <_printf_float+0x136>
 8011d5c:	6863      	ldr	r3, [r4, #4]
 8011d5e:	4299      	cmp	r1, r3
 8011d60:	dd41      	ble.n	8011de6 <_printf_float+0x1ba>
 8011d62:	f1ab 0302 	sub.w	r3, fp, #2
 8011d66:	fa5f fb83 	uxtb.w	fp, r3
 8011d6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011d6e:	d820      	bhi.n	8011db2 <_printf_float+0x186>
 8011d70:	3901      	subs	r1, #1
 8011d72:	465a      	mov	r2, fp
 8011d74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011d78:	9109      	str	r1, [sp, #36]	; 0x24
 8011d7a:	f7ff ff18 	bl	8011bae <__exponent>
 8011d7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d80:	1813      	adds	r3, r2, r0
 8011d82:	2a01      	cmp	r2, #1
 8011d84:	4681      	mov	r9, r0
 8011d86:	6123      	str	r3, [r4, #16]
 8011d88:	dc02      	bgt.n	8011d90 <_printf_float+0x164>
 8011d8a:	6822      	ldr	r2, [r4, #0]
 8011d8c:	07d2      	lsls	r2, r2, #31
 8011d8e:	d501      	bpl.n	8011d94 <_printf_float+0x168>
 8011d90:	3301      	adds	r3, #1
 8011d92:	6123      	str	r3, [r4, #16]
 8011d94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d09c      	beq.n	8011cd6 <_printf_float+0xaa>
 8011d9c:	232d      	movs	r3, #45	; 0x2d
 8011d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011da2:	e798      	b.n	8011cd6 <_printf_float+0xaa>
 8011da4:	9a06      	ldr	r2, [sp, #24]
 8011da6:	2a47      	cmp	r2, #71	; 0x47
 8011da8:	d1be      	bne.n	8011d28 <_printf_float+0xfc>
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d1bc      	bne.n	8011d28 <_printf_float+0xfc>
 8011dae:	2301      	movs	r3, #1
 8011db0:	e7b9      	b.n	8011d26 <_printf_float+0xfa>
 8011db2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011db6:	d118      	bne.n	8011dea <_printf_float+0x1be>
 8011db8:	2900      	cmp	r1, #0
 8011dba:	6863      	ldr	r3, [r4, #4]
 8011dbc:	dd0b      	ble.n	8011dd6 <_printf_float+0x1aa>
 8011dbe:	6121      	str	r1, [r4, #16]
 8011dc0:	b913      	cbnz	r3, 8011dc8 <_printf_float+0x19c>
 8011dc2:	6822      	ldr	r2, [r4, #0]
 8011dc4:	07d0      	lsls	r0, r2, #31
 8011dc6:	d502      	bpl.n	8011dce <_printf_float+0x1a2>
 8011dc8:	3301      	adds	r3, #1
 8011dca:	440b      	add	r3, r1
 8011dcc:	6123      	str	r3, [r4, #16]
 8011dce:	65a1      	str	r1, [r4, #88]	; 0x58
 8011dd0:	f04f 0900 	mov.w	r9, #0
 8011dd4:	e7de      	b.n	8011d94 <_printf_float+0x168>
 8011dd6:	b913      	cbnz	r3, 8011dde <_printf_float+0x1b2>
 8011dd8:	6822      	ldr	r2, [r4, #0]
 8011dda:	07d2      	lsls	r2, r2, #31
 8011ddc:	d501      	bpl.n	8011de2 <_printf_float+0x1b6>
 8011dde:	3302      	adds	r3, #2
 8011de0:	e7f4      	b.n	8011dcc <_printf_float+0x1a0>
 8011de2:	2301      	movs	r3, #1
 8011de4:	e7f2      	b.n	8011dcc <_printf_float+0x1a0>
 8011de6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011dea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dec:	4299      	cmp	r1, r3
 8011dee:	db05      	blt.n	8011dfc <_printf_float+0x1d0>
 8011df0:	6823      	ldr	r3, [r4, #0]
 8011df2:	6121      	str	r1, [r4, #16]
 8011df4:	07d8      	lsls	r0, r3, #31
 8011df6:	d5ea      	bpl.n	8011dce <_printf_float+0x1a2>
 8011df8:	1c4b      	adds	r3, r1, #1
 8011dfa:	e7e7      	b.n	8011dcc <_printf_float+0x1a0>
 8011dfc:	2900      	cmp	r1, #0
 8011dfe:	bfd4      	ite	le
 8011e00:	f1c1 0202 	rsble	r2, r1, #2
 8011e04:	2201      	movgt	r2, #1
 8011e06:	4413      	add	r3, r2
 8011e08:	e7e0      	b.n	8011dcc <_printf_float+0x1a0>
 8011e0a:	6823      	ldr	r3, [r4, #0]
 8011e0c:	055a      	lsls	r2, r3, #21
 8011e0e:	d407      	bmi.n	8011e20 <_printf_float+0x1f4>
 8011e10:	6923      	ldr	r3, [r4, #16]
 8011e12:	4642      	mov	r2, r8
 8011e14:	4631      	mov	r1, r6
 8011e16:	4628      	mov	r0, r5
 8011e18:	47b8      	blx	r7
 8011e1a:	3001      	adds	r0, #1
 8011e1c:	d12c      	bne.n	8011e78 <_printf_float+0x24c>
 8011e1e:	e764      	b.n	8011cea <_printf_float+0xbe>
 8011e20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011e24:	f240 80e0 	bls.w	8011fe8 <_printf_float+0x3bc>
 8011e28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	2300      	movs	r3, #0
 8011e30:	f7ee fe6a 	bl	8000b08 <__aeabi_dcmpeq>
 8011e34:	2800      	cmp	r0, #0
 8011e36:	d034      	beq.n	8011ea2 <_printf_float+0x276>
 8011e38:	4a37      	ldr	r2, [pc, #220]	; (8011f18 <_printf_float+0x2ec>)
 8011e3a:	2301      	movs	r3, #1
 8011e3c:	4631      	mov	r1, r6
 8011e3e:	4628      	mov	r0, r5
 8011e40:	47b8      	blx	r7
 8011e42:	3001      	adds	r0, #1
 8011e44:	f43f af51 	beq.w	8011cea <_printf_float+0xbe>
 8011e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011e4c:	429a      	cmp	r2, r3
 8011e4e:	db02      	blt.n	8011e56 <_printf_float+0x22a>
 8011e50:	6823      	ldr	r3, [r4, #0]
 8011e52:	07d8      	lsls	r0, r3, #31
 8011e54:	d510      	bpl.n	8011e78 <_printf_float+0x24c>
 8011e56:	ee18 3a10 	vmov	r3, s16
 8011e5a:	4652      	mov	r2, sl
 8011e5c:	4631      	mov	r1, r6
 8011e5e:	4628      	mov	r0, r5
 8011e60:	47b8      	blx	r7
 8011e62:	3001      	adds	r0, #1
 8011e64:	f43f af41 	beq.w	8011cea <_printf_float+0xbe>
 8011e68:	f04f 0800 	mov.w	r8, #0
 8011e6c:	f104 091a 	add.w	r9, r4, #26
 8011e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e72:	3b01      	subs	r3, #1
 8011e74:	4543      	cmp	r3, r8
 8011e76:	dc09      	bgt.n	8011e8c <_printf_float+0x260>
 8011e78:	6823      	ldr	r3, [r4, #0]
 8011e7a:	079b      	lsls	r3, r3, #30
 8011e7c:	f100 8107 	bmi.w	801208e <_printf_float+0x462>
 8011e80:	68e0      	ldr	r0, [r4, #12]
 8011e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e84:	4298      	cmp	r0, r3
 8011e86:	bfb8      	it	lt
 8011e88:	4618      	movlt	r0, r3
 8011e8a:	e730      	b.n	8011cee <_printf_float+0xc2>
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	464a      	mov	r2, r9
 8011e90:	4631      	mov	r1, r6
 8011e92:	4628      	mov	r0, r5
 8011e94:	47b8      	blx	r7
 8011e96:	3001      	adds	r0, #1
 8011e98:	f43f af27 	beq.w	8011cea <_printf_float+0xbe>
 8011e9c:	f108 0801 	add.w	r8, r8, #1
 8011ea0:	e7e6      	b.n	8011e70 <_printf_float+0x244>
 8011ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	dc39      	bgt.n	8011f1c <_printf_float+0x2f0>
 8011ea8:	4a1b      	ldr	r2, [pc, #108]	; (8011f18 <_printf_float+0x2ec>)
 8011eaa:	2301      	movs	r3, #1
 8011eac:	4631      	mov	r1, r6
 8011eae:	4628      	mov	r0, r5
 8011eb0:	47b8      	blx	r7
 8011eb2:	3001      	adds	r0, #1
 8011eb4:	f43f af19 	beq.w	8011cea <_printf_float+0xbe>
 8011eb8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011ebc:	4313      	orrs	r3, r2
 8011ebe:	d102      	bne.n	8011ec6 <_printf_float+0x29a>
 8011ec0:	6823      	ldr	r3, [r4, #0]
 8011ec2:	07d9      	lsls	r1, r3, #31
 8011ec4:	d5d8      	bpl.n	8011e78 <_printf_float+0x24c>
 8011ec6:	ee18 3a10 	vmov	r3, s16
 8011eca:	4652      	mov	r2, sl
 8011ecc:	4631      	mov	r1, r6
 8011ece:	4628      	mov	r0, r5
 8011ed0:	47b8      	blx	r7
 8011ed2:	3001      	adds	r0, #1
 8011ed4:	f43f af09 	beq.w	8011cea <_printf_float+0xbe>
 8011ed8:	f04f 0900 	mov.w	r9, #0
 8011edc:	f104 0a1a 	add.w	sl, r4, #26
 8011ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ee2:	425b      	negs	r3, r3
 8011ee4:	454b      	cmp	r3, r9
 8011ee6:	dc01      	bgt.n	8011eec <_printf_float+0x2c0>
 8011ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011eea:	e792      	b.n	8011e12 <_printf_float+0x1e6>
 8011eec:	2301      	movs	r3, #1
 8011eee:	4652      	mov	r2, sl
 8011ef0:	4631      	mov	r1, r6
 8011ef2:	4628      	mov	r0, r5
 8011ef4:	47b8      	blx	r7
 8011ef6:	3001      	adds	r0, #1
 8011ef8:	f43f aef7 	beq.w	8011cea <_printf_float+0xbe>
 8011efc:	f109 0901 	add.w	r9, r9, #1
 8011f00:	e7ee      	b.n	8011ee0 <_printf_float+0x2b4>
 8011f02:	bf00      	nop
 8011f04:	7fefffff 	.word	0x7fefffff
 8011f08:	080d6a5a 	.word	0x080d6a5a
 8011f0c:	080d6a5e 	.word	0x080d6a5e
 8011f10:	080d6a62 	.word	0x080d6a62
 8011f14:	080d6a66 	.word	0x080d6a66
 8011f18:	080d6a6a 	.word	0x080d6a6a
 8011f1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011f20:	429a      	cmp	r2, r3
 8011f22:	bfa8      	it	ge
 8011f24:	461a      	movge	r2, r3
 8011f26:	2a00      	cmp	r2, #0
 8011f28:	4691      	mov	r9, r2
 8011f2a:	dc37      	bgt.n	8011f9c <_printf_float+0x370>
 8011f2c:	f04f 0b00 	mov.w	fp, #0
 8011f30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011f34:	f104 021a 	add.w	r2, r4, #26
 8011f38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011f3a:	9305      	str	r3, [sp, #20]
 8011f3c:	eba3 0309 	sub.w	r3, r3, r9
 8011f40:	455b      	cmp	r3, fp
 8011f42:	dc33      	bgt.n	8011fac <_printf_float+0x380>
 8011f44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	db3b      	blt.n	8011fc4 <_printf_float+0x398>
 8011f4c:	6823      	ldr	r3, [r4, #0]
 8011f4e:	07da      	lsls	r2, r3, #31
 8011f50:	d438      	bmi.n	8011fc4 <_printf_float+0x398>
 8011f52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011f56:	eba2 0903 	sub.w	r9, r2, r3
 8011f5a:	9b05      	ldr	r3, [sp, #20]
 8011f5c:	1ad2      	subs	r2, r2, r3
 8011f5e:	4591      	cmp	r9, r2
 8011f60:	bfa8      	it	ge
 8011f62:	4691      	movge	r9, r2
 8011f64:	f1b9 0f00 	cmp.w	r9, #0
 8011f68:	dc35      	bgt.n	8011fd6 <_printf_float+0x3aa>
 8011f6a:	f04f 0800 	mov.w	r8, #0
 8011f6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011f72:	f104 0a1a 	add.w	sl, r4, #26
 8011f76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f7a:	1a9b      	subs	r3, r3, r2
 8011f7c:	eba3 0309 	sub.w	r3, r3, r9
 8011f80:	4543      	cmp	r3, r8
 8011f82:	f77f af79 	ble.w	8011e78 <_printf_float+0x24c>
 8011f86:	2301      	movs	r3, #1
 8011f88:	4652      	mov	r2, sl
 8011f8a:	4631      	mov	r1, r6
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	47b8      	blx	r7
 8011f90:	3001      	adds	r0, #1
 8011f92:	f43f aeaa 	beq.w	8011cea <_printf_float+0xbe>
 8011f96:	f108 0801 	add.w	r8, r8, #1
 8011f9a:	e7ec      	b.n	8011f76 <_printf_float+0x34a>
 8011f9c:	4613      	mov	r3, r2
 8011f9e:	4631      	mov	r1, r6
 8011fa0:	4642      	mov	r2, r8
 8011fa2:	4628      	mov	r0, r5
 8011fa4:	47b8      	blx	r7
 8011fa6:	3001      	adds	r0, #1
 8011fa8:	d1c0      	bne.n	8011f2c <_printf_float+0x300>
 8011faa:	e69e      	b.n	8011cea <_printf_float+0xbe>
 8011fac:	2301      	movs	r3, #1
 8011fae:	4631      	mov	r1, r6
 8011fb0:	4628      	mov	r0, r5
 8011fb2:	9205      	str	r2, [sp, #20]
 8011fb4:	47b8      	blx	r7
 8011fb6:	3001      	adds	r0, #1
 8011fb8:	f43f ae97 	beq.w	8011cea <_printf_float+0xbe>
 8011fbc:	9a05      	ldr	r2, [sp, #20]
 8011fbe:	f10b 0b01 	add.w	fp, fp, #1
 8011fc2:	e7b9      	b.n	8011f38 <_printf_float+0x30c>
 8011fc4:	ee18 3a10 	vmov	r3, s16
 8011fc8:	4652      	mov	r2, sl
 8011fca:	4631      	mov	r1, r6
 8011fcc:	4628      	mov	r0, r5
 8011fce:	47b8      	blx	r7
 8011fd0:	3001      	adds	r0, #1
 8011fd2:	d1be      	bne.n	8011f52 <_printf_float+0x326>
 8011fd4:	e689      	b.n	8011cea <_printf_float+0xbe>
 8011fd6:	9a05      	ldr	r2, [sp, #20]
 8011fd8:	464b      	mov	r3, r9
 8011fda:	4442      	add	r2, r8
 8011fdc:	4631      	mov	r1, r6
 8011fde:	4628      	mov	r0, r5
 8011fe0:	47b8      	blx	r7
 8011fe2:	3001      	adds	r0, #1
 8011fe4:	d1c1      	bne.n	8011f6a <_printf_float+0x33e>
 8011fe6:	e680      	b.n	8011cea <_printf_float+0xbe>
 8011fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fea:	2a01      	cmp	r2, #1
 8011fec:	dc01      	bgt.n	8011ff2 <_printf_float+0x3c6>
 8011fee:	07db      	lsls	r3, r3, #31
 8011ff0:	d53a      	bpl.n	8012068 <_printf_float+0x43c>
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	4642      	mov	r2, r8
 8011ff6:	4631      	mov	r1, r6
 8011ff8:	4628      	mov	r0, r5
 8011ffa:	47b8      	blx	r7
 8011ffc:	3001      	adds	r0, #1
 8011ffe:	f43f ae74 	beq.w	8011cea <_printf_float+0xbe>
 8012002:	ee18 3a10 	vmov	r3, s16
 8012006:	4652      	mov	r2, sl
 8012008:	4631      	mov	r1, r6
 801200a:	4628      	mov	r0, r5
 801200c:	47b8      	blx	r7
 801200e:	3001      	adds	r0, #1
 8012010:	f43f ae6b 	beq.w	8011cea <_printf_float+0xbe>
 8012014:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012018:	2200      	movs	r2, #0
 801201a:	2300      	movs	r3, #0
 801201c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8012020:	f7ee fd72 	bl	8000b08 <__aeabi_dcmpeq>
 8012024:	b9d8      	cbnz	r0, 801205e <_printf_float+0x432>
 8012026:	f10a 33ff 	add.w	r3, sl, #4294967295
 801202a:	f108 0201 	add.w	r2, r8, #1
 801202e:	4631      	mov	r1, r6
 8012030:	4628      	mov	r0, r5
 8012032:	47b8      	blx	r7
 8012034:	3001      	adds	r0, #1
 8012036:	d10e      	bne.n	8012056 <_printf_float+0x42a>
 8012038:	e657      	b.n	8011cea <_printf_float+0xbe>
 801203a:	2301      	movs	r3, #1
 801203c:	4652      	mov	r2, sl
 801203e:	4631      	mov	r1, r6
 8012040:	4628      	mov	r0, r5
 8012042:	47b8      	blx	r7
 8012044:	3001      	adds	r0, #1
 8012046:	f43f ae50 	beq.w	8011cea <_printf_float+0xbe>
 801204a:	f108 0801 	add.w	r8, r8, #1
 801204e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012050:	3b01      	subs	r3, #1
 8012052:	4543      	cmp	r3, r8
 8012054:	dcf1      	bgt.n	801203a <_printf_float+0x40e>
 8012056:	464b      	mov	r3, r9
 8012058:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801205c:	e6da      	b.n	8011e14 <_printf_float+0x1e8>
 801205e:	f04f 0800 	mov.w	r8, #0
 8012062:	f104 0a1a 	add.w	sl, r4, #26
 8012066:	e7f2      	b.n	801204e <_printf_float+0x422>
 8012068:	2301      	movs	r3, #1
 801206a:	4642      	mov	r2, r8
 801206c:	e7df      	b.n	801202e <_printf_float+0x402>
 801206e:	2301      	movs	r3, #1
 8012070:	464a      	mov	r2, r9
 8012072:	4631      	mov	r1, r6
 8012074:	4628      	mov	r0, r5
 8012076:	47b8      	blx	r7
 8012078:	3001      	adds	r0, #1
 801207a:	f43f ae36 	beq.w	8011cea <_printf_float+0xbe>
 801207e:	f108 0801 	add.w	r8, r8, #1
 8012082:	68e3      	ldr	r3, [r4, #12]
 8012084:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012086:	1a5b      	subs	r3, r3, r1
 8012088:	4543      	cmp	r3, r8
 801208a:	dcf0      	bgt.n	801206e <_printf_float+0x442>
 801208c:	e6f8      	b.n	8011e80 <_printf_float+0x254>
 801208e:	f04f 0800 	mov.w	r8, #0
 8012092:	f104 0919 	add.w	r9, r4, #25
 8012096:	e7f4      	b.n	8012082 <_printf_float+0x456>

08012098 <_printf_common>:
 8012098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801209c:	4616      	mov	r6, r2
 801209e:	4699      	mov	r9, r3
 80120a0:	688a      	ldr	r2, [r1, #8]
 80120a2:	690b      	ldr	r3, [r1, #16]
 80120a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80120a8:	4293      	cmp	r3, r2
 80120aa:	bfb8      	it	lt
 80120ac:	4613      	movlt	r3, r2
 80120ae:	6033      	str	r3, [r6, #0]
 80120b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80120b4:	4607      	mov	r7, r0
 80120b6:	460c      	mov	r4, r1
 80120b8:	b10a      	cbz	r2, 80120be <_printf_common+0x26>
 80120ba:	3301      	adds	r3, #1
 80120bc:	6033      	str	r3, [r6, #0]
 80120be:	6823      	ldr	r3, [r4, #0]
 80120c0:	0699      	lsls	r1, r3, #26
 80120c2:	bf42      	ittt	mi
 80120c4:	6833      	ldrmi	r3, [r6, #0]
 80120c6:	3302      	addmi	r3, #2
 80120c8:	6033      	strmi	r3, [r6, #0]
 80120ca:	6825      	ldr	r5, [r4, #0]
 80120cc:	f015 0506 	ands.w	r5, r5, #6
 80120d0:	d106      	bne.n	80120e0 <_printf_common+0x48>
 80120d2:	f104 0a19 	add.w	sl, r4, #25
 80120d6:	68e3      	ldr	r3, [r4, #12]
 80120d8:	6832      	ldr	r2, [r6, #0]
 80120da:	1a9b      	subs	r3, r3, r2
 80120dc:	42ab      	cmp	r3, r5
 80120de:	dc26      	bgt.n	801212e <_printf_common+0x96>
 80120e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80120e4:	1e13      	subs	r3, r2, #0
 80120e6:	6822      	ldr	r2, [r4, #0]
 80120e8:	bf18      	it	ne
 80120ea:	2301      	movne	r3, #1
 80120ec:	0692      	lsls	r2, r2, #26
 80120ee:	d42b      	bmi.n	8012148 <_printf_common+0xb0>
 80120f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80120f4:	4649      	mov	r1, r9
 80120f6:	4638      	mov	r0, r7
 80120f8:	47c0      	blx	r8
 80120fa:	3001      	adds	r0, #1
 80120fc:	d01e      	beq.n	801213c <_printf_common+0xa4>
 80120fe:	6823      	ldr	r3, [r4, #0]
 8012100:	6922      	ldr	r2, [r4, #16]
 8012102:	f003 0306 	and.w	r3, r3, #6
 8012106:	2b04      	cmp	r3, #4
 8012108:	bf02      	ittt	eq
 801210a:	68e5      	ldreq	r5, [r4, #12]
 801210c:	6833      	ldreq	r3, [r6, #0]
 801210e:	1aed      	subeq	r5, r5, r3
 8012110:	68a3      	ldr	r3, [r4, #8]
 8012112:	bf0c      	ite	eq
 8012114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012118:	2500      	movne	r5, #0
 801211a:	4293      	cmp	r3, r2
 801211c:	bfc4      	itt	gt
 801211e:	1a9b      	subgt	r3, r3, r2
 8012120:	18ed      	addgt	r5, r5, r3
 8012122:	2600      	movs	r6, #0
 8012124:	341a      	adds	r4, #26
 8012126:	42b5      	cmp	r5, r6
 8012128:	d11a      	bne.n	8012160 <_printf_common+0xc8>
 801212a:	2000      	movs	r0, #0
 801212c:	e008      	b.n	8012140 <_printf_common+0xa8>
 801212e:	2301      	movs	r3, #1
 8012130:	4652      	mov	r2, sl
 8012132:	4649      	mov	r1, r9
 8012134:	4638      	mov	r0, r7
 8012136:	47c0      	blx	r8
 8012138:	3001      	adds	r0, #1
 801213a:	d103      	bne.n	8012144 <_printf_common+0xac>
 801213c:	f04f 30ff 	mov.w	r0, #4294967295
 8012140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012144:	3501      	adds	r5, #1
 8012146:	e7c6      	b.n	80120d6 <_printf_common+0x3e>
 8012148:	18e1      	adds	r1, r4, r3
 801214a:	1c5a      	adds	r2, r3, #1
 801214c:	2030      	movs	r0, #48	; 0x30
 801214e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012152:	4422      	add	r2, r4
 8012154:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012158:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801215c:	3302      	adds	r3, #2
 801215e:	e7c7      	b.n	80120f0 <_printf_common+0x58>
 8012160:	2301      	movs	r3, #1
 8012162:	4622      	mov	r2, r4
 8012164:	4649      	mov	r1, r9
 8012166:	4638      	mov	r0, r7
 8012168:	47c0      	blx	r8
 801216a:	3001      	adds	r0, #1
 801216c:	d0e6      	beq.n	801213c <_printf_common+0xa4>
 801216e:	3601      	adds	r6, #1
 8012170:	e7d9      	b.n	8012126 <_printf_common+0x8e>
	...

08012174 <_printf_i>:
 8012174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012178:	7e0f      	ldrb	r7, [r1, #24]
 801217a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801217c:	2f78      	cmp	r7, #120	; 0x78
 801217e:	4691      	mov	r9, r2
 8012180:	4680      	mov	r8, r0
 8012182:	460c      	mov	r4, r1
 8012184:	469a      	mov	sl, r3
 8012186:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801218a:	d807      	bhi.n	801219c <_printf_i+0x28>
 801218c:	2f62      	cmp	r7, #98	; 0x62
 801218e:	d80a      	bhi.n	80121a6 <_printf_i+0x32>
 8012190:	2f00      	cmp	r7, #0
 8012192:	f000 80d4 	beq.w	801233e <_printf_i+0x1ca>
 8012196:	2f58      	cmp	r7, #88	; 0x58
 8012198:	f000 80c0 	beq.w	801231c <_printf_i+0x1a8>
 801219c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80121a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80121a4:	e03a      	b.n	801221c <_printf_i+0xa8>
 80121a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80121aa:	2b15      	cmp	r3, #21
 80121ac:	d8f6      	bhi.n	801219c <_printf_i+0x28>
 80121ae:	a101      	add	r1, pc, #4	; (adr r1, 80121b4 <_printf_i+0x40>)
 80121b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80121b4:	0801220d 	.word	0x0801220d
 80121b8:	08012221 	.word	0x08012221
 80121bc:	0801219d 	.word	0x0801219d
 80121c0:	0801219d 	.word	0x0801219d
 80121c4:	0801219d 	.word	0x0801219d
 80121c8:	0801219d 	.word	0x0801219d
 80121cc:	08012221 	.word	0x08012221
 80121d0:	0801219d 	.word	0x0801219d
 80121d4:	0801219d 	.word	0x0801219d
 80121d8:	0801219d 	.word	0x0801219d
 80121dc:	0801219d 	.word	0x0801219d
 80121e0:	08012325 	.word	0x08012325
 80121e4:	0801224d 	.word	0x0801224d
 80121e8:	080122df 	.word	0x080122df
 80121ec:	0801219d 	.word	0x0801219d
 80121f0:	0801219d 	.word	0x0801219d
 80121f4:	08012347 	.word	0x08012347
 80121f8:	0801219d 	.word	0x0801219d
 80121fc:	0801224d 	.word	0x0801224d
 8012200:	0801219d 	.word	0x0801219d
 8012204:	0801219d 	.word	0x0801219d
 8012208:	080122e7 	.word	0x080122e7
 801220c:	682b      	ldr	r3, [r5, #0]
 801220e:	1d1a      	adds	r2, r3, #4
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	602a      	str	r2, [r5, #0]
 8012214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801221c:	2301      	movs	r3, #1
 801221e:	e09f      	b.n	8012360 <_printf_i+0x1ec>
 8012220:	6820      	ldr	r0, [r4, #0]
 8012222:	682b      	ldr	r3, [r5, #0]
 8012224:	0607      	lsls	r7, r0, #24
 8012226:	f103 0104 	add.w	r1, r3, #4
 801222a:	6029      	str	r1, [r5, #0]
 801222c:	d501      	bpl.n	8012232 <_printf_i+0xbe>
 801222e:	681e      	ldr	r6, [r3, #0]
 8012230:	e003      	b.n	801223a <_printf_i+0xc6>
 8012232:	0646      	lsls	r6, r0, #25
 8012234:	d5fb      	bpl.n	801222e <_printf_i+0xba>
 8012236:	f9b3 6000 	ldrsh.w	r6, [r3]
 801223a:	2e00      	cmp	r6, #0
 801223c:	da03      	bge.n	8012246 <_printf_i+0xd2>
 801223e:	232d      	movs	r3, #45	; 0x2d
 8012240:	4276      	negs	r6, r6
 8012242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012246:	485a      	ldr	r0, [pc, #360]	; (80123b0 <_printf_i+0x23c>)
 8012248:	230a      	movs	r3, #10
 801224a:	e012      	b.n	8012272 <_printf_i+0xfe>
 801224c:	682b      	ldr	r3, [r5, #0]
 801224e:	6820      	ldr	r0, [r4, #0]
 8012250:	1d19      	adds	r1, r3, #4
 8012252:	6029      	str	r1, [r5, #0]
 8012254:	0605      	lsls	r5, r0, #24
 8012256:	d501      	bpl.n	801225c <_printf_i+0xe8>
 8012258:	681e      	ldr	r6, [r3, #0]
 801225a:	e002      	b.n	8012262 <_printf_i+0xee>
 801225c:	0641      	lsls	r1, r0, #25
 801225e:	d5fb      	bpl.n	8012258 <_printf_i+0xe4>
 8012260:	881e      	ldrh	r6, [r3, #0]
 8012262:	4853      	ldr	r0, [pc, #332]	; (80123b0 <_printf_i+0x23c>)
 8012264:	2f6f      	cmp	r7, #111	; 0x6f
 8012266:	bf0c      	ite	eq
 8012268:	2308      	moveq	r3, #8
 801226a:	230a      	movne	r3, #10
 801226c:	2100      	movs	r1, #0
 801226e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012272:	6865      	ldr	r5, [r4, #4]
 8012274:	60a5      	str	r5, [r4, #8]
 8012276:	2d00      	cmp	r5, #0
 8012278:	bfa2      	ittt	ge
 801227a:	6821      	ldrge	r1, [r4, #0]
 801227c:	f021 0104 	bicge.w	r1, r1, #4
 8012280:	6021      	strge	r1, [r4, #0]
 8012282:	b90e      	cbnz	r6, 8012288 <_printf_i+0x114>
 8012284:	2d00      	cmp	r5, #0
 8012286:	d04b      	beq.n	8012320 <_printf_i+0x1ac>
 8012288:	4615      	mov	r5, r2
 801228a:	fbb6 f1f3 	udiv	r1, r6, r3
 801228e:	fb03 6711 	mls	r7, r3, r1, r6
 8012292:	5dc7      	ldrb	r7, [r0, r7]
 8012294:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012298:	4637      	mov	r7, r6
 801229a:	42bb      	cmp	r3, r7
 801229c:	460e      	mov	r6, r1
 801229e:	d9f4      	bls.n	801228a <_printf_i+0x116>
 80122a0:	2b08      	cmp	r3, #8
 80122a2:	d10b      	bne.n	80122bc <_printf_i+0x148>
 80122a4:	6823      	ldr	r3, [r4, #0]
 80122a6:	07de      	lsls	r6, r3, #31
 80122a8:	d508      	bpl.n	80122bc <_printf_i+0x148>
 80122aa:	6923      	ldr	r3, [r4, #16]
 80122ac:	6861      	ldr	r1, [r4, #4]
 80122ae:	4299      	cmp	r1, r3
 80122b0:	bfde      	ittt	le
 80122b2:	2330      	movle	r3, #48	; 0x30
 80122b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80122b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80122bc:	1b52      	subs	r2, r2, r5
 80122be:	6122      	str	r2, [r4, #16]
 80122c0:	f8cd a000 	str.w	sl, [sp]
 80122c4:	464b      	mov	r3, r9
 80122c6:	aa03      	add	r2, sp, #12
 80122c8:	4621      	mov	r1, r4
 80122ca:	4640      	mov	r0, r8
 80122cc:	f7ff fee4 	bl	8012098 <_printf_common>
 80122d0:	3001      	adds	r0, #1
 80122d2:	d14a      	bne.n	801236a <_printf_i+0x1f6>
 80122d4:	f04f 30ff 	mov.w	r0, #4294967295
 80122d8:	b004      	add	sp, #16
 80122da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122de:	6823      	ldr	r3, [r4, #0]
 80122e0:	f043 0320 	orr.w	r3, r3, #32
 80122e4:	6023      	str	r3, [r4, #0]
 80122e6:	4833      	ldr	r0, [pc, #204]	; (80123b4 <_printf_i+0x240>)
 80122e8:	2778      	movs	r7, #120	; 0x78
 80122ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80122ee:	6823      	ldr	r3, [r4, #0]
 80122f0:	6829      	ldr	r1, [r5, #0]
 80122f2:	061f      	lsls	r7, r3, #24
 80122f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80122f8:	d402      	bmi.n	8012300 <_printf_i+0x18c>
 80122fa:	065f      	lsls	r7, r3, #25
 80122fc:	bf48      	it	mi
 80122fe:	b2b6      	uxthmi	r6, r6
 8012300:	07df      	lsls	r7, r3, #31
 8012302:	bf48      	it	mi
 8012304:	f043 0320 	orrmi.w	r3, r3, #32
 8012308:	6029      	str	r1, [r5, #0]
 801230a:	bf48      	it	mi
 801230c:	6023      	strmi	r3, [r4, #0]
 801230e:	b91e      	cbnz	r6, 8012318 <_printf_i+0x1a4>
 8012310:	6823      	ldr	r3, [r4, #0]
 8012312:	f023 0320 	bic.w	r3, r3, #32
 8012316:	6023      	str	r3, [r4, #0]
 8012318:	2310      	movs	r3, #16
 801231a:	e7a7      	b.n	801226c <_printf_i+0xf8>
 801231c:	4824      	ldr	r0, [pc, #144]	; (80123b0 <_printf_i+0x23c>)
 801231e:	e7e4      	b.n	80122ea <_printf_i+0x176>
 8012320:	4615      	mov	r5, r2
 8012322:	e7bd      	b.n	80122a0 <_printf_i+0x12c>
 8012324:	682b      	ldr	r3, [r5, #0]
 8012326:	6826      	ldr	r6, [r4, #0]
 8012328:	6961      	ldr	r1, [r4, #20]
 801232a:	1d18      	adds	r0, r3, #4
 801232c:	6028      	str	r0, [r5, #0]
 801232e:	0635      	lsls	r5, r6, #24
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	d501      	bpl.n	8012338 <_printf_i+0x1c4>
 8012334:	6019      	str	r1, [r3, #0]
 8012336:	e002      	b.n	801233e <_printf_i+0x1ca>
 8012338:	0670      	lsls	r0, r6, #25
 801233a:	d5fb      	bpl.n	8012334 <_printf_i+0x1c0>
 801233c:	8019      	strh	r1, [r3, #0]
 801233e:	2300      	movs	r3, #0
 8012340:	6123      	str	r3, [r4, #16]
 8012342:	4615      	mov	r5, r2
 8012344:	e7bc      	b.n	80122c0 <_printf_i+0x14c>
 8012346:	682b      	ldr	r3, [r5, #0]
 8012348:	1d1a      	adds	r2, r3, #4
 801234a:	602a      	str	r2, [r5, #0]
 801234c:	681d      	ldr	r5, [r3, #0]
 801234e:	6862      	ldr	r2, [r4, #4]
 8012350:	2100      	movs	r1, #0
 8012352:	4628      	mov	r0, r5
 8012354:	f7ed ff5c 	bl	8000210 <memchr>
 8012358:	b108      	cbz	r0, 801235e <_printf_i+0x1ea>
 801235a:	1b40      	subs	r0, r0, r5
 801235c:	6060      	str	r0, [r4, #4]
 801235e:	6863      	ldr	r3, [r4, #4]
 8012360:	6123      	str	r3, [r4, #16]
 8012362:	2300      	movs	r3, #0
 8012364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012368:	e7aa      	b.n	80122c0 <_printf_i+0x14c>
 801236a:	6923      	ldr	r3, [r4, #16]
 801236c:	462a      	mov	r2, r5
 801236e:	4649      	mov	r1, r9
 8012370:	4640      	mov	r0, r8
 8012372:	47d0      	blx	sl
 8012374:	3001      	adds	r0, #1
 8012376:	d0ad      	beq.n	80122d4 <_printf_i+0x160>
 8012378:	6823      	ldr	r3, [r4, #0]
 801237a:	079b      	lsls	r3, r3, #30
 801237c:	d413      	bmi.n	80123a6 <_printf_i+0x232>
 801237e:	68e0      	ldr	r0, [r4, #12]
 8012380:	9b03      	ldr	r3, [sp, #12]
 8012382:	4298      	cmp	r0, r3
 8012384:	bfb8      	it	lt
 8012386:	4618      	movlt	r0, r3
 8012388:	e7a6      	b.n	80122d8 <_printf_i+0x164>
 801238a:	2301      	movs	r3, #1
 801238c:	4632      	mov	r2, r6
 801238e:	4649      	mov	r1, r9
 8012390:	4640      	mov	r0, r8
 8012392:	47d0      	blx	sl
 8012394:	3001      	adds	r0, #1
 8012396:	d09d      	beq.n	80122d4 <_printf_i+0x160>
 8012398:	3501      	adds	r5, #1
 801239a:	68e3      	ldr	r3, [r4, #12]
 801239c:	9903      	ldr	r1, [sp, #12]
 801239e:	1a5b      	subs	r3, r3, r1
 80123a0:	42ab      	cmp	r3, r5
 80123a2:	dcf2      	bgt.n	801238a <_printf_i+0x216>
 80123a4:	e7eb      	b.n	801237e <_printf_i+0x20a>
 80123a6:	2500      	movs	r5, #0
 80123a8:	f104 0619 	add.w	r6, r4, #25
 80123ac:	e7f5      	b.n	801239a <_printf_i+0x226>
 80123ae:	bf00      	nop
 80123b0:	080d6a6c 	.word	0x080d6a6c
 80123b4:	080d6a7d 	.word	0x080d6a7d

080123b8 <std>:
 80123b8:	2300      	movs	r3, #0
 80123ba:	b510      	push	{r4, lr}
 80123bc:	4604      	mov	r4, r0
 80123be:	e9c0 3300 	strd	r3, r3, [r0]
 80123c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80123c6:	6083      	str	r3, [r0, #8]
 80123c8:	8181      	strh	r1, [r0, #12]
 80123ca:	6643      	str	r3, [r0, #100]	; 0x64
 80123cc:	81c2      	strh	r2, [r0, #14]
 80123ce:	6183      	str	r3, [r0, #24]
 80123d0:	4619      	mov	r1, r3
 80123d2:	2208      	movs	r2, #8
 80123d4:	305c      	adds	r0, #92	; 0x5c
 80123d6:	f000 f914 	bl	8012602 <memset>
 80123da:	4b0d      	ldr	r3, [pc, #52]	; (8012410 <std+0x58>)
 80123dc:	6263      	str	r3, [r4, #36]	; 0x24
 80123de:	4b0d      	ldr	r3, [pc, #52]	; (8012414 <std+0x5c>)
 80123e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80123e2:	4b0d      	ldr	r3, [pc, #52]	; (8012418 <std+0x60>)
 80123e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80123e6:	4b0d      	ldr	r3, [pc, #52]	; (801241c <std+0x64>)
 80123e8:	6323      	str	r3, [r4, #48]	; 0x30
 80123ea:	4b0d      	ldr	r3, [pc, #52]	; (8012420 <std+0x68>)
 80123ec:	6224      	str	r4, [r4, #32]
 80123ee:	429c      	cmp	r4, r3
 80123f0:	d006      	beq.n	8012400 <std+0x48>
 80123f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80123f6:	4294      	cmp	r4, r2
 80123f8:	d002      	beq.n	8012400 <std+0x48>
 80123fa:	33d0      	adds	r3, #208	; 0xd0
 80123fc:	429c      	cmp	r4, r3
 80123fe:	d105      	bne.n	801240c <std+0x54>
 8012400:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012408:	f000 b978 	b.w	80126fc <__retarget_lock_init_recursive>
 801240c:	bd10      	pop	{r4, pc}
 801240e:	bf00      	nop
 8012410:	0801257d 	.word	0x0801257d
 8012414:	0801259f 	.word	0x0801259f
 8012418:	080125d7 	.word	0x080125d7
 801241c:	080125fb 	.word	0x080125fb
 8012420:	20038124 	.word	0x20038124

08012424 <stdio_exit_handler>:
 8012424:	4a02      	ldr	r2, [pc, #8]	; (8012430 <stdio_exit_handler+0xc>)
 8012426:	4903      	ldr	r1, [pc, #12]	; (8012434 <stdio_exit_handler+0x10>)
 8012428:	4803      	ldr	r0, [pc, #12]	; (8012438 <stdio_exit_handler+0x14>)
 801242a:	f000 b869 	b.w	8012500 <_fwalk_sglue>
 801242e:	bf00      	nop
 8012430:	200000d0 	.word	0x200000d0
 8012434:	080140b1 	.word	0x080140b1
 8012438:	200000dc 	.word	0x200000dc

0801243c <cleanup_stdio>:
 801243c:	6841      	ldr	r1, [r0, #4]
 801243e:	4b0c      	ldr	r3, [pc, #48]	; (8012470 <cleanup_stdio+0x34>)
 8012440:	4299      	cmp	r1, r3
 8012442:	b510      	push	{r4, lr}
 8012444:	4604      	mov	r4, r0
 8012446:	d001      	beq.n	801244c <cleanup_stdio+0x10>
 8012448:	f001 fe32 	bl	80140b0 <_fflush_r>
 801244c:	68a1      	ldr	r1, [r4, #8]
 801244e:	4b09      	ldr	r3, [pc, #36]	; (8012474 <cleanup_stdio+0x38>)
 8012450:	4299      	cmp	r1, r3
 8012452:	d002      	beq.n	801245a <cleanup_stdio+0x1e>
 8012454:	4620      	mov	r0, r4
 8012456:	f001 fe2b 	bl	80140b0 <_fflush_r>
 801245a:	68e1      	ldr	r1, [r4, #12]
 801245c:	4b06      	ldr	r3, [pc, #24]	; (8012478 <cleanup_stdio+0x3c>)
 801245e:	4299      	cmp	r1, r3
 8012460:	d004      	beq.n	801246c <cleanup_stdio+0x30>
 8012462:	4620      	mov	r0, r4
 8012464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012468:	f001 be22 	b.w	80140b0 <_fflush_r>
 801246c:	bd10      	pop	{r4, pc}
 801246e:	bf00      	nop
 8012470:	20038124 	.word	0x20038124
 8012474:	2003818c 	.word	0x2003818c
 8012478:	200381f4 	.word	0x200381f4

0801247c <global_stdio_init.part.0>:
 801247c:	b510      	push	{r4, lr}
 801247e:	4b0b      	ldr	r3, [pc, #44]	; (80124ac <global_stdio_init.part.0+0x30>)
 8012480:	4c0b      	ldr	r4, [pc, #44]	; (80124b0 <global_stdio_init.part.0+0x34>)
 8012482:	4a0c      	ldr	r2, [pc, #48]	; (80124b4 <global_stdio_init.part.0+0x38>)
 8012484:	601a      	str	r2, [r3, #0]
 8012486:	4620      	mov	r0, r4
 8012488:	2200      	movs	r2, #0
 801248a:	2104      	movs	r1, #4
 801248c:	f7ff ff94 	bl	80123b8 <std>
 8012490:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012494:	2201      	movs	r2, #1
 8012496:	2109      	movs	r1, #9
 8012498:	f7ff ff8e 	bl	80123b8 <std>
 801249c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80124a0:	2202      	movs	r2, #2
 80124a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124a6:	2112      	movs	r1, #18
 80124a8:	f7ff bf86 	b.w	80123b8 <std>
 80124ac:	2003825c 	.word	0x2003825c
 80124b0:	20038124 	.word	0x20038124
 80124b4:	08012425 	.word	0x08012425

080124b8 <__sfp_lock_acquire>:
 80124b8:	4801      	ldr	r0, [pc, #4]	; (80124c0 <__sfp_lock_acquire+0x8>)
 80124ba:	f000 b920 	b.w	80126fe <__retarget_lock_acquire_recursive>
 80124be:	bf00      	nop
 80124c0:	20038265 	.word	0x20038265

080124c4 <__sfp_lock_release>:
 80124c4:	4801      	ldr	r0, [pc, #4]	; (80124cc <__sfp_lock_release+0x8>)
 80124c6:	f000 b91b 	b.w	8012700 <__retarget_lock_release_recursive>
 80124ca:	bf00      	nop
 80124cc:	20038265 	.word	0x20038265

080124d0 <__sinit>:
 80124d0:	b510      	push	{r4, lr}
 80124d2:	4604      	mov	r4, r0
 80124d4:	f7ff fff0 	bl	80124b8 <__sfp_lock_acquire>
 80124d8:	6a23      	ldr	r3, [r4, #32]
 80124da:	b11b      	cbz	r3, 80124e4 <__sinit+0x14>
 80124dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124e0:	f7ff bff0 	b.w	80124c4 <__sfp_lock_release>
 80124e4:	4b04      	ldr	r3, [pc, #16]	; (80124f8 <__sinit+0x28>)
 80124e6:	6223      	str	r3, [r4, #32]
 80124e8:	4b04      	ldr	r3, [pc, #16]	; (80124fc <__sinit+0x2c>)
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d1f5      	bne.n	80124dc <__sinit+0xc>
 80124f0:	f7ff ffc4 	bl	801247c <global_stdio_init.part.0>
 80124f4:	e7f2      	b.n	80124dc <__sinit+0xc>
 80124f6:	bf00      	nop
 80124f8:	0801243d 	.word	0x0801243d
 80124fc:	2003825c 	.word	0x2003825c

08012500 <_fwalk_sglue>:
 8012500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012504:	4607      	mov	r7, r0
 8012506:	4688      	mov	r8, r1
 8012508:	4614      	mov	r4, r2
 801250a:	2600      	movs	r6, #0
 801250c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012510:	f1b9 0901 	subs.w	r9, r9, #1
 8012514:	d505      	bpl.n	8012522 <_fwalk_sglue+0x22>
 8012516:	6824      	ldr	r4, [r4, #0]
 8012518:	2c00      	cmp	r4, #0
 801251a:	d1f7      	bne.n	801250c <_fwalk_sglue+0xc>
 801251c:	4630      	mov	r0, r6
 801251e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012522:	89ab      	ldrh	r3, [r5, #12]
 8012524:	2b01      	cmp	r3, #1
 8012526:	d907      	bls.n	8012538 <_fwalk_sglue+0x38>
 8012528:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801252c:	3301      	adds	r3, #1
 801252e:	d003      	beq.n	8012538 <_fwalk_sglue+0x38>
 8012530:	4629      	mov	r1, r5
 8012532:	4638      	mov	r0, r7
 8012534:	47c0      	blx	r8
 8012536:	4306      	orrs	r6, r0
 8012538:	3568      	adds	r5, #104	; 0x68
 801253a:	e7e9      	b.n	8012510 <_fwalk_sglue+0x10>

0801253c <siprintf>:
 801253c:	b40e      	push	{r1, r2, r3}
 801253e:	b500      	push	{lr}
 8012540:	b09c      	sub	sp, #112	; 0x70
 8012542:	ab1d      	add	r3, sp, #116	; 0x74
 8012544:	9002      	str	r0, [sp, #8]
 8012546:	9006      	str	r0, [sp, #24]
 8012548:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801254c:	4809      	ldr	r0, [pc, #36]	; (8012574 <siprintf+0x38>)
 801254e:	9107      	str	r1, [sp, #28]
 8012550:	9104      	str	r1, [sp, #16]
 8012552:	4909      	ldr	r1, [pc, #36]	; (8012578 <siprintf+0x3c>)
 8012554:	f853 2b04 	ldr.w	r2, [r3], #4
 8012558:	9105      	str	r1, [sp, #20]
 801255a:	6800      	ldr	r0, [r0, #0]
 801255c:	9301      	str	r3, [sp, #4]
 801255e:	a902      	add	r1, sp, #8
 8012560:	f001 fc22 	bl	8013da8 <_svfiprintf_r>
 8012564:	9b02      	ldr	r3, [sp, #8]
 8012566:	2200      	movs	r2, #0
 8012568:	701a      	strb	r2, [r3, #0]
 801256a:	b01c      	add	sp, #112	; 0x70
 801256c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012570:	b003      	add	sp, #12
 8012572:	4770      	bx	lr
 8012574:	20000128 	.word	0x20000128
 8012578:	ffff0208 	.word	0xffff0208

0801257c <__sread>:
 801257c:	b510      	push	{r4, lr}
 801257e:	460c      	mov	r4, r1
 8012580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012584:	f000 f86c 	bl	8012660 <_read_r>
 8012588:	2800      	cmp	r0, #0
 801258a:	bfab      	itete	ge
 801258c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801258e:	89a3      	ldrhlt	r3, [r4, #12]
 8012590:	181b      	addge	r3, r3, r0
 8012592:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012596:	bfac      	ite	ge
 8012598:	6563      	strge	r3, [r4, #84]	; 0x54
 801259a:	81a3      	strhlt	r3, [r4, #12]
 801259c:	bd10      	pop	{r4, pc}

0801259e <__swrite>:
 801259e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125a2:	461f      	mov	r7, r3
 80125a4:	898b      	ldrh	r3, [r1, #12]
 80125a6:	05db      	lsls	r3, r3, #23
 80125a8:	4605      	mov	r5, r0
 80125aa:	460c      	mov	r4, r1
 80125ac:	4616      	mov	r6, r2
 80125ae:	d505      	bpl.n	80125bc <__swrite+0x1e>
 80125b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125b4:	2302      	movs	r3, #2
 80125b6:	2200      	movs	r2, #0
 80125b8:	f000 f840 	bl	801263c <_lseek_r>
 80125bc:	89a3      	ldrh	r3, [r4, #12]
 80125be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80125c6:	81a3      	strh	r3, [r4, #12]
 80125c8:	4632      	mov	r2, r6
 80125ca:	463b      	mov	r3, r7
 80125cc:	4628      	mov	r0, r5
 80125ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125d2:	f000 b857 	b.w	8012684 <_write_r>

080125d6 <__sseek>:
 80125d6:	b510      	push	{r4, lr}
 80125d8:	460c      	mov	r4, r1
 80125da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125de:	f000 f82d 	bl	801263c <_lseek_r>
 80125e2:	1c43      	adds	r3, r0, #1
 80125e4:	89a3      	ldrh	r3, [r4, #12]
 80125e6:	bf15      	itete	ne
 80125e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80125ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80125ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80125f2:	81a3      	strheq	r3, [r4, #12]
 80125f4:	bf18      	it	ne
 80125f6:	81a3      	strhne	r3, [r4, #12]
 80125f8:	bd10      	pop	{r4, pc}

080125fa <__sclose>:
 80125fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125fe:	f000 b80d 	b.w	801261c <_close_r>

08012602 <memset>:
 8012602:	4402      	add	r2, r0
 8012604:	4603      	mov	r3, r0
 8012606:	4293      	cmp	r3, r2
 8012608:	d100      	bne.n	801260c <memset+0xa>
 801260a:	4770      	bx	lr
 801260c:	f803 1b01 	strb.w	r1, [r3], #1
 8012610:	e7f9      	b.n	8012606 <memset+0x4>
	...

08012614 <_localeconv_r>:
 8012614:	4800      	ldr	r0, [pc, #0]	; (8012618 <_localeconv_r+0x4>)
 8012616:	4770      	bx	lr
 8012618:	2000021c 	.word	0x2000021c

0801261c <_close_r>:
 801261c:	b538      	push	{r3, r4, r5, lr}
 801261e:	4d06      	ldr	r5, [pc, #24]	; (8012638 <_close_r+0x1c>)
 8012620:	2300      	movs	r3, #0
 8012622:	4604      	mov	r4, r0
 8012624:	4608      	mov	r0, r1
 8012626:	602b      	str	r3, [r5, #0]
 8012628:	f7f1 fb3f 	bl	8003caa <_close>
 801262c:	1c43      	adds	r3, r0, #1
 801262e:	d102      	bne.n	8012636 <_close_r+0x1a>
 8012630:	682b      	ldr	r3, [r5, #0]
 8012632:	b103      	cbz	r3, 8012636 <_close_r+0x1a>
 8012634:	6023      	str	r3, [r4, #0]
 8012636:	bd38      	pop	{r3, r4, r5, pc}
 8012638:	20038260 	.word	0x20038260

0801263c <_lseek_r>:
 801263c:	b538      	push	{r3, r4, r5, lr}
 801263e:	4d07      	ldr	r5, [pc, #28]	; (801265c <_lseek_r+0x20>)
 8012640:	4604      	mov	r4, r0
 8012642:	4608      	mov	r0, r1
 8012644:	4611      	mov	r1, r2
 8012646:	2200      	movs	r2, #0
 8012648:	602a      	str	r2, [r5, #0]
 801264a:	461a      	mov	r2, r3
 801264c:	f7f1 fb54 	bl	8003cf8 <_lseek>
 8012650:	1c43      	adds	r3, r0, #1
 8012652:	d102      	bne.n	801265a <_lseek_r+0x1e>
 8012654:	682b      	ldr	r3, [r5, #0]
 8012656:	b103      	cbz	r3, 801265a <_lseek_r+0x1e>
 8012658:	6023      	str	r3, [r4, #0]
 801265a:	bd38      	pop	{r3, r4, r5, pc}
 801265c:	20038260 	.word	0x20038260

08012660 <_read_r>:
 8012660:	b538      	push	{r3, r4, r5, lr}
 8012662:	4d07      	ldr	r5, [pc, #28]	; (8012680 <_read_r+0x20>)
 8012664:	4604      	mov	r4, r0
 8012666:	4608      	mov	r0, r1
 8012668:	4611      	mov	r1, r2
 801266a:	2200      	movs	r2, #0
 801266c:	602a      	str	r2, [r5, #0]
 801266e:	461a      	mov	r2, r3
 8012670:	f7f1 fae2 	bl	8003c38 <_read>
 8012674:	1c43      	adds	r3, r0, #1
 8012676:	d102      	bne.n	801267e <_read_r+0x1e>
 8012678:	682b      	ldr	r3, [r5, #0]
 801267a:	b103      	cbz	r3, 801267e <_read_r+0x1e>
 801267c:	6023      	str	r3, [r4, #0]
 801267e:	bd38      	pop	{r3, r4, r5, pc}
 8012680:	20038260 	.word	0x20038260

08012684 <_write_r>:
 8012684:	b538      	push	{r3, r4, r5, lr}
 8012686:	4d07      	ldr	r5, [pc, #28]	; (80126a4 <_write_r+0x20>)
 8012688:	4604      	mov	r4, r0
 801268a:	4608      	mov	r0, r1
 801268c:	4611      	mov	r1, r2
 801268e:	2200      	movs	r2, #0
 8012690:	602a      	str	r2, [r5, #0]
 8012692:	461a      	mov	r2, r3
 8012694:	f7f1 faed 	bl	8003c72 <_write>
 8012698:	1c43      	adds	r3, r0, #1
 801269a:	d102      	bne.n	80126a2 <_write_r+0x1e>
 801269c:	682b      	ldr	r3, [r5, #0]
 801269e:	b103      	cbz	r3, 80126a2 <_write_r+0x1e>
 80126a0:	6023      	str	r3, [r4, #0]
 80126a2:	bd38      	pop	{r3, r4, r5, pc}
 80126a4:	20038260 	.word	0x20038260

080126a8 <__errno>:
 80126a8:	4b01      	ldr	r3, [pc, #4]	; (80126b0 <__errno+0x8>)
 80126aa:	6818      	ldr	r0, [r3, #0]
 80126ac:	4770      	bx	lr
 80126ae:	bf00      	nop
 80126b0:	20000128 	.word	0x20000128

080126b4 <__libc_init_array>:
 80126b4:	b570      	push	{r4, r5, r6, lr}
 80126b6:	4d0d      	ldr	r5, [pc, #52]	; (80126ec <__libc_init_array+0x38>)
 80126b8:	4c0d      	ldr	r4, [pc, #52]	; (80126f0 <__libc_init_array+0x3c>)
 80126ba:	1b64      	subs	r4, r4, r5
 80126bc:	10a4      	asrs	r4, r4, #2
 80126be:	2600      	movs	r6, #0
 80126c0:	42a6      	cmp	r6, r4
 80126c2:	d109      	bne.n	80126d8 <__libc_init_array+0x24>
 80126c4:	4d0b      	ldr	r5, [pc, #44]	; (80126f4 <__libc_init_array+0x40>)
 80126c6:	4c0c      	ldr	r4, [pc, #48]	; (80126f8 <__libc_init_array+0x44>)
 80126c8:	f002 f896 	bl	80147f8 <_init>
 80126cc:	1b64      	subs	r4, r4, r5
 80126ce:	10a4      	asrs	r4, r4, #2
 80126d0:	2600      	movs	r6, #0
 80126d2:	42a6      	cmp	r6, r4
 80126d4:	d105      	bne.n	80126e2 <__libc_init_array+0x2e>
 80126d6:	bd70      	pop	{r4, r5, r6, pc}
 80126d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80126dc:	4798      	blx	r3
 80126de:	3601      	adds	r6, #1
 80126e0:	e7ee      	b.n	80126c0 <__libc_init_array+0xc>
 80126e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80126e6:	4798      	blx	r3
 80126e8:	3601      	adds	r6, #1
 80126ea:	e7f2      	b.n	80126d2 <__libc_init_array+0x1e>
 80126ec:	080d6dd4 	.word	0x080d6dd4
 80126f0:	080d6dd4 	.word	0x080d6dd4
 80126f4:	080d6dd4 	.word	0x080d6dd4
 80126f8:	080d6dd8 	.word	0x080d6dd8

080126fc <__retarget_lock_init_recursive>:
 80126fc:	4770      	bx	lr

080126fe <__retarget_lock_acquire_recursive>:
 80126fe:	4770      	bx	lr

08012700 <__retarget_lock_release_recursive>:
 8012700:	4770      	bx	lr

08012702 <quorem>:
 8012702:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012706:	6903      	ldr	r3, [r0, #16]
 8012708:	690c      	ldr	r4, [r1, #16]
 801270a:	42a3      	cmp	r3, r4
 801270c:	4607      	mov	r7, r0
 801270e:	db7e      	blt.n	801280e <quorem+0x10c>
 8012710:	3c01      	subs	r4, #1
 8012712:	f101 0814 	add.w	r8, r1, #20
 8012716:	f100 0514 	add.w	r5, r0, #20
 801271a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801271e:	9301      	str	r3, [sp, #4]
 8012720:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012724:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012728:	3301      	adds	r3, #1
 801272a:	429a      	cmp	r2, r3
 801272c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012730:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012734:	fbb2 f6f3 	udiv	r6, r2, r3
 8012738:	d331      	bcc.n	801279e <quorem+0x9c>
 801273a:	f04f 0e00 	mov.w	lr, #0
 801273e:	4640      	mov	r0, r8
 8012740:	46ac      	mov	ip, r5
 8012742:	46f2      	mov	sl, lr
 8012744:	f850 2b04 	ldr.w	r2, [r0], #4
 8012748:	b293      	uxth	r3, r2
 801274a:	fb06 e303 	mla	r3, r6, r3, lr
 801274e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012752:	0c1a      	lsrs	r2, r3, #16
 8012754:	b29b      	uxth	r3, r3
 8012756:	ebaa 0303 	sub.w	r3, sl, r3
 801275a:	f8dc a000 	ldr.w	sl, [ip]
 801275e:	fa13 f38a 	uxtah	r3, r3, sl
 8012762:	fb06 220e 	mla	r2, r6, lr, r2
 8012766:	9300      	str	r3, [sp, #0]
 8012768:	9b00      	ldr	r3, [sp, #0]
 801276a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801276e:	b292      	uxth	r2, r2
 8012770:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012774:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012778:	f8bd 3000 	ldrh.w	r3, [sp]
 801277c:	4581      	cmp	r9, r0
 801277e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012782:	f84c 3b04 	str.w	r3, [ip], #4
 8012786:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801278a:	d2db      	bcs.n	8012744 <quorem+0x42>
 801278c:	f855 300b 	ldr.w	r3, [r5, fp]
 8012790:	b92b      	cbnz	r3, 801279e <quorem+0x9c>
 8012792:	9b01      	ldr	r3, [sp, #4]
 8012794:	3b04      	subs	r3, #4
 8012796:	429d      	cmp	r5, r3
 8012798:	461a      	mov	r2, r3
 801279a:	d32c      	bcc.n	80127f6 <quorem+0xf4>
 801279c:	613c      	str	r4, [r7, #16]
 801279e:	4638      	mov	r0, r7
 80127a0:	f001 f9a8 	bl	8013af4 <__mcmp>
 80127a4:	2800      	cmp	r0, #0
 80127a6:	db22      	blt.n	80127ee <quorem+0xec>
 80127a8:	3601      	adds	r6, #1
 80127aa:	4629      	mov	r1, r5
 80127ac:	2000      	movs	r0, #0
 80127ae:	f858 2b04 	ldr.w	r2, [r8], #4
 80127b2:	f8d1 c000 	ldr.w	ip, [r1]
 80127b6:	b293      	uxth	r3, r2
 80127b8:	1ac3      	subs	r3, r0, r3
 80127ba:	0c12      	lsrs	r2, r2, #16
 80127bc:	fa13 f38c 	uxtah	r3, r3, ip
 80127c0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80127c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80127ce:	45c1      	cmp	r9, r8
 80127d0:	f841 3b04 	str.w	r3, [r1], #4
 80127d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80127d8:	d2e9      	bcs.n	80127ae <quorem+0xac>
 80127da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80127de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80127e2:	b922      	cbnz	r2, 80127ee <quorem+0xec>
 80127e4:	3b04      	subs	r3, #4
 80127e6:	429d      	cmp	r5, r3
 80127e8:	461a      	mov	r2, r3
 80127ea:	d30a      	bcc.n	8012802 <quorem+0x100>
 80127ec:	613c      	str	r4, [r7, #16]
 80127ee:	4630      	mov	r0, r6
 80127f0:	b003      	add	sp, #12
 80127f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127f6:	6812      	ldr	r2, [r2, #0]
 80127f8:	3b04      	subs	r3, #4
 80127fa:	2a00      	cmp	r2, #0
 80127fc:	d1ce      	bne.n	801279c <quorem+0x9a>
 80127fe:	3c01      	subs	r4, #1
 8012800:	e7c9      	b.n	8012796 <quorem+0x94>
 8012802:	6812      	ldr	r2, [r2, #0]
 8012804:	3b04      	subs	r3, #4
 8012806:	2a00      	cmp	r2, #0
 8012808:	d1f0      	bne.n	80127ec <quorem+0xea>
 801280a:	3c01      	subs	r4, #1
 801280c:	e7eb      	b.n	80127e6 <quorem+0xe4>
 801280e:	2000      	movs	r0, #0
 8012810:	e7ee      	b.n	80127f0 <quorem+0xee>
 8012812:	0000      	movs	r0, r0
 8012814:	0000      	movs	r0, r0
	...

08012818 <_dtoa_r>:
 8012818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801281c:	ed2d 8b04 	vpush	{d8-d9}
 8012820:	69c5      	ldr	r5, [r0, #28]
 8012822:	b093      	sub	sp, #76	; 0x4c
 8012824:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012828:	ec57 6b10 	vmov	r6, r7, d0
 801282c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012830:	9107      	str	r1, [sp, #28]
 8012832:	4604      	mov	r4, r0
 8012834:	920a      	str	r2, [sp, #40]	; 0x28
 8012836:	930d      	str	r3, [sp, #52]	; 0x34
 8012838:	b975      	cbnz	r5, 8012858 <_dtoa_r+0x40>
 801283a:	2010      	movs	r0, #16
 801283c:	f000 fe2a 	bl	8013494 <malloc>
 8012840:	4602      	mov	r2, r0
 8012842:	61e0      	str	r0, [r4, #28]
 8012844:	b920      	cbnz	r0, 8012850 <_dtoa_r+0x38>
 8012846:	4bae      	ldr	r3, [pc, #696]	; (8012b00 <_dtoa_r+0x2e8>)
 8012848:	21ef      	movs	r1, #239	; 0xef
 801284a:	48ae      	ldr	r0, [pc, #696]	; (8012b04 <_dtoa_r+0x2ec>)
 801284c:	f001 fc90 	bl	8014170 <__assert_func>
 8012850:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012854:	6005      	str	r5, [r0, #0]
 8012856:	60c5      	str	r5, [r0, #12]
 8012858:	69e3      	ldr	r3, [r4, #28]
 801285a:	6819      	ldr	r1, [r3, #0]
 801285c:	b151      	cbz	r1, 8012874 <_dtoa_r+0x5c>
 801285e:	685a      	ldr	r2, [r3, #4]
 8012860:	604a      	str	r2, [r1, #4]
 8012862:	2301      	movs	r3, #1
 8012864:	4093      	lsls	r3, r2
 8012866:	608b      	str	r3, [r1, #8]
 8012868:	4620      	mov	r0, r4
 801286a:	f000 ff07 	bl	801367c <_Bfree>
 801286e:	69e3      	ldr	r3, [r4, #28]
 8012870:	2200      	movs	r2, #0
 8012872:	601a      	str	r2, [r3, #0]
 8012874:	1e3b      	subs	r3, r7, #0
 8012876:	bfbb      	ittet	lt
 8012878:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801287c:	9303      	strlt	r3, [sp, #12]
 801287e:	2300      	movge	r3, #0
 8012880:	2201      	movlt	r2, #1
 8012882:	bfac      	ite	ge
 8012884:	f8c8 3000 	strge.w	r3, [r8]
 8012888:	f8c8 2000 	strlt.w	r2, [r8]
 801288c:	4b9e      	ldr	r3, [pc, #632]	; (8012b08 <_dtoa_r+0x2f0>)
 801288e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012892:	ea33 0308 	bics.w	r3, r3, r8
 8012896:	d11b      	bne.n	80128d0 <_dtoa_r+0xb8>
 8012898:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801289a:	f242 730f 	movw	r3, #9999	; 0x270f
 801289e:	6013      	str	r3, [r2, #0]
 80128a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80128a4:	4333      	orrs	r3, r6
 80128a6:	f000 8593 	beq.w	80133d0 <_dtoa_r+0xbb8>
 80128aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128ac:	b963      	cbnz	r3, 80128c8 <_dtoa_r+0xb0>
 80128ae:	4b97      	ldr	r3, [pc, #604]	; (8012b0c <_dtoa_r+0x2f4>)
 80128b0:	e027      	b.n	8012902 <_dtoa_r+0xea>
 80128b2:	4b97      	ldr	r3, [pc, #604]	; (8012b10 <_dtoa_r+0x2f8>)
 80128b4:	9300      	str	r3, [sp, #0]
 80128b6:	3308      	adds	r3, #8
 80128b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80128ba:	6013      	str	r3, [r2, #0]
 80128bc:	9800      	ldr	r0, [sp, #0]
 80128be:	b013      	add	sp, #76	; 0x4c
 80128c0:	ecbd 8b04 	vpop	{d8-d9}
 80128c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128c8:	4b90      	ldr	r3, [pc, #576]	; (8012b0c <_dtoa_r+0x2f4>)
 80128ca:	9300      	str	r3, [sp, #0]
 80128cc:	3303      	adds	r3, #3
 80128ce:	e7f3      	b.n	80128b8 <_dtoa_r+0xa0>
 80128d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80128d4:	2200      	movs	r2, #0
 80128d6:	ec51 0b17 	vmov	r0, r1, d7
 80128da:	eeb0 8a47 	vmov.f32	s16, s14
 80128de:	eef0 8a67 	vmov.f32	s17, s15
 80128e2:	2300      	movs	r3, #0
 80128e4:	f7ee f910 	bl	8000b08 <__aeabi_dcmpeq>
 80128e8:	4681      	mov	r9, r0
 80128ea:	b160      	cbz	r0, 8012906 <_dtoa_r+0xee>
 80128ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80128ee:	2301      	movs	r3, #1
 80128f0:	6013      	str	r3, [r2, #0]
 80128f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	f000 8568 	beq.w	80133ca <_dtoa_r+0xbb2>
 80128fa:	4b86      	ldr	r3, [pc, #536]	; (8012b14 <_dtoa_r+0x2fc>)
 80128fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80128fe:	6013      	str	r3, [r2, #0]
 8012900:	3b01      	subs	r3, #1
 8012902:	9300      	str	r3, [sp, #0]
 8012904:	e7da      	b.n	80128bc <_dtoa_r+0xa4>
 8012906:	aa10      	add	r2, sp, #64	; 0x40
 8012908:	a911      	add	r1, sp, #68	; 0x44
 801290a:	4620      	mov	r0, r4
 801290c:	eeb0 0a48 	vmov.f32	s0, s16
 8012910:	eef0 0a68 	vmov.f32	s1, s17
 8012914:	f001 f994 	bl	8013c40 <__d2b>
 8012918:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801291c:	4682      	mov	sl, r0
 801291e:	2d00      	cmp	r5, #0
 8012920:	d07f      	beq.n	8012a22 <_dtoa_r+0x20a>
 8012922:	ee18 3a90 	vmov	r3, s17
 8012926:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801292a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801292e:	ec51 0b18 	vmov	r0, r1, d8
 8012932:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012936:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801293a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801293e:	4619      	mov	r1, r3
 8012940:	2200      	movs	r2, #0
 8012942:	4b75      	ldr	r3, [pc, #468]	; (8012b18 <_dtoa_r+0x300>)
 8012944:	f7ed fcc0 	bl	80002c8 <__aeabi_dsub>
 8012948:	a367      	add	r3, pc, #412	; (adr r3, 8012ae8 <_dtoa_r+0x2d0>)
 801294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801294e:	f7ed fe73 	bl	8000638 <__aeabi_dmul>
 8012952:	a367      	add	r3, pc, #412	; (adr r3, 8012af0 <_dtoa_r+0x2d8>)
 8012954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012958:	f7ed fcb8 	bl	80002cc <__adddf3>
 801295c:	4606      	mov	r6, r0
 801295e:	4628      	mov	r0, r5
 8012960:	460f      	mov	r7, r1
 8012962:	f7ed fdff 	bl	8000564 <__aeabi_i2d>
 8012966:	a364      	add	r3, pc, #400	; (adr r3, 8012af8 <_dtoa_r+0x2e0>)
 8012968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801296c:	f7ed fe64 	bl	8000638 <__aeabi_dmul>
 8012970:	4602      	mov	r2, r0
 8012972:	460b      	mov	r3, r1
 8012974:	4630      	mov	r0, r6
 8012976:	4639      	mov	r1, r7
 8012978:	f7ed fca8 	bl	80002cc <__adddf3>
 801297c:	4606      	mov	r6, r0
 801297e:	460f      	mov	r7, r1
 8012980:	f7ee f90a 	bl	8000b98 <__aeabi_d2iz>
 8012984:	2200      	movs	r2, #0
 8012986:	4683      	mov	fp, r0
 8012988:	2300      	movs	r3, #0
 801298a:	4630      	mov	r0, r6
 801298c:	4639      	mov	r1, r7
 801298e:	f7ee f8c5 	bl	8000b1c <__aeabi_dcmplt>
 8012992:	b148      	cbz	r0, 80129a8 <_dtoa_r+0x190>
 8012994:	4658      	mov	r0, fp
 8012996:	f7ed fde5 	bl	8000564 <__aeabi_i2d>
 801299a:	4632      	mov	r2, r6
 801299c:	463b      	mov	r3, r7
 801299e:	f7ee f8b3 	bl	8000b08 <__aeabi_dcmpeq>
 80129a2:	b908      	cbnz	r0, 80129a8 <_dtoa_r+0x190>
 80129a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80129a8:	f1bb 0f16 	cmp.w	fp, #22
 80129ac:	d857      	bhi.n	8012a5e <_dtoa_r+0x246>
 80129ae:	4b5b      	ldr	r3, [pc, #364]	; (8012b1c <_dtoa_r+0x304>)
 80129b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80129b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129b8:	ec51 0b18 	vmov	r0, r1, d8
 80129bc:	f7ee f8ae 	bl	8000b1c <__aeabi_dcmplt>
 80129c0:	2800      	cmp	r0, #0
 80129c2:	d04e      	beq.n	8012a62 <_dtoa_r+0x24a>
 80129c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80129c8:	2300      	movs	r3, #0
 80129ca:	930c      	str	r3, [sp, #48]	; 0x30
 80129cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80129ce:	1b5b      	subs	r3, r3, r5
 80129d0:	1e5a      	subs	r2, r3, #1
 80129d2:	bf45      	ittet	mi
 80129d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80129d8:	9305      	strmi	r3, [sp, #20]
 80129da:	2300      	movpl	r3, #0
 80129dc:	2300      	movmi	r3, #0
 80129de:	9206      	str	r2, [sp, #24]
 80129e0:	bf54      	ite	pl
 80129e2:	9305      	strpl	r3, [sp, #20]
 80129e4:	9306      	strmi	r3, [sp, #24]
 80129e6:	f1bb 0f00 	cmp.w	fp, #0
 80129ea:	db3c      	blt.n	8012a66 <_dtoa_r+0x24e>
 80129ec:	9b06      	ldr	r3, [sp, #24]
 80129ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80129f2:	445b      	add	r3, fp
 80129f4:	9306      	str	r3, [sp, #24]
 80129f6:	2300      	movs	r3, #0
 80129f8:	9308      	str	r3, [sp, #32]
 80129fa:	9b07      	ldr	r3, [sp, #28]
 80129fc:	2b09      	cmp	r3, #9
 80129fe:	d868      	bhi.n	8012ad2 <_dtoa_r+0x2ba>
 8012a00:	2b05      	cmp	r3, #5
 8012a02:	bfc4      	itt	gt
 8012a04:	3b04      	subgt	r3, #4
 8012a06:	9307      	strgt	r3, [sp, #28]
 8012a08:	9b07      	ldr	r3, [sp, #28]
 8012a0a:	f1a3 0302 	sub.w	r3, r3, #2
 8012a0e:	bfcc      	ite	gt
 8012a10:	2500      	movgt	r5, #0
 8012a12:	2501      	movle	r5, #1
 8012a14:	2b03      	cmp	r3, #3
 8012a16:	f200 8085 	bhi.w	8012b24 <_dtoa_r+0x30c>
 8012a1a:	e8df f003 	tbb	[pc, r3]
 8012a1e:	3b2e      	.short	0x3b2e
 8012a20:	5839      	.short	0x5839
 8012a22:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012a26:	441d      	add	r5, r3
 8012a28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012a2c:	2b20      	cmp	r3, #32
 8012a2e:	bfc1      	itttt	gt
 8012a30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012a34:	fa08 f803 	lslgt.w	r8, r8, r3
 8012a38:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8012a3c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8012a40:	bfd6      	itet	le
 8012a42:	f1c3 0320 	rsble	r3, r3, #32
 8012a46:	ea48 0003 	orrgt.w	r0, r8, r3
 8012a4a:	fa06 f003 	lslle.w	r0, r6, r3
 8012a4e:	f7ed fd79 	bl	8000544 <__aeabi_ui2d>
 8012a52:	2201      	movs	r2, #1
 8012a54:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012a58:	3d01      	subs	r5, #1
 8012a5a:	920e      	str	r2, [sp, #56]	; 0x38
 8012a5c:	e76f      	b.n	801293e <_dtoa_r+0x126>
 8012a5e:	2301      	movs	r3, #1
 8012a60:	e7b3      	b.n	80129ca <_dtoa_r+0x1b2>
 8012a62:	900c      	str	r0, [sp, #48]	; 0x30
 8012a64:	e7b2      	b.n	80129cc <_dtoa_r+0x1b4>
 8012a66:	9b05      	ldr	r3, [sp, #20]
 8012a68:	eba3 030b 	sub.w	r3, r3, fp
 8012a6c:	9305      	str	r3, [sp, #20]
 8012a6e:	f1cb 0300 	rsb	r3, fp, #0
 8012a72:	9308      	str	r3, [sp, #32]
 8012a74:	2300      	movs	r3, #0
 8012a76:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a78:	e7bf      	b.n	80129fa <_dtoa_r+0x1e2>
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8012a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	dc52      	bgt.n	8012b2a <_dtoa_r+0x312>
 8012a84:	2301      	movs	r3, #1
 8012a86:	9301      	str	r3, [sp, #4]
 8012a88:	9304      	str	r3, [sp, #16]
 8012a8a:	461a      	mov	r2, r3
 8012a8c:	920a      	str	r2, [sp, #40]	; 0x28
 8012a8e:	e00b      	b.n	8012aa8 <_dtoa_r+0x290>
 8012a90:	2301      	movs	r3, #1
 8012a92:	e7f3      	b.n	8012a7c <_dtoa_r+0x264>
 8012a94:	2300      	movs	r3, #0
 8012a96:	9309      	str	r3, [sp, #36]	; 0x24
 8012a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a9a:	445b      	add	r3, fp
 8012a9c:	9301      	str	r3, [sp, #4]
 8012a9e:	3301      	adds	r3, #1
 8012aa0:	2b01      	cmp	r3, #1
 8012aa2:	9304      	str	r3, [sp, #16]
 8012aa4:	bfb8      	it	lt
 8012aa6:	2301      	movlt	r3, #1
 8012aa8:	69e0      	ldr	r0, [r4, #28]
 8012aaa:	2100      	movs	r1, #0
 8012aac:	2204      	movs	r2, #4
 8012aae:	f102 0614 	add.w	r6, r2, #20
 8012ab2:	429e      	cmp	r6, r3
 8012ab4:	d93d      	bls.n	8012b32 <_dtoa_r+0x31a>
 8012ab6:	6041      	str	r1, [r0, #4]
 8012ab8:	4620      	mov	r0, r4
 8012aba:	f000 fd9f 	bl	80135fc <_Balloc>
 8012abe:	9000      	str	r0, [sp, #0]
 8012ac0:	2800      	cmp	r0, #0
 8012ac2:	d139      	bne.n	8012b38 <_dtoa_r+0x320>
 8012ac4:	4b16      	ldr	r3, [pc, #88]	; (8012b20 <_dtoa_r+0x308>)
 8012ac6:	4602      	mov	r2, r0
 8012ac8:	f240 11af 	movw	r1, #431	; 0x1af
 8012acc:	e6bd      	b.n	801284a <_dtoa_r+0x32>
 8012ace:	2301      	movs	r3, #1
 8012ad0:	e7e1      	b.n	8012a96 <_dtoa_r+0x27e>
 8012ad2:	2501      	movs	r5, #1
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	9307      	str	r3, [sp, #28]
 8012ad8:	9509      	str	r5, [sp, #36]	; 0x24
 8012ada:	f04f 33ff 	mov.w	r3, #4294967295
 8012ade:	9301      	str	r3, [sp, #4]
 8012ae0:	9304      	str	r3, [sp, #16]
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	2312      	movs	r3, #18
 8012ae6:	e7d1      	b.n	8012a8c <_dtoa_r+0x274>
 8012ae8:	636f4361 	.word	0x636f4361
 8012aec:	3fd287a7 	.word	0x3fd287a7
 8012af0:	8b60c8b3 	.word	0x8b60c8b3
 8012af4:	3fc68a28 	.word	0x3fc68a28
 8012af8:	509f79fb 	.word	0x509f79fb
 8012afc:	3fd34413 	.word	0x3fd34413
 8012b00:	080d6a9b 	.word	0x080d6a9b
 8012b04:	080d6ab2 	.word	0x080d6ab2
 8012b08:	7ff00000 	.word	0x7ff00000
 8012b0c:	080d6a97 	.word	0x080d6a97
 8012b10:	080d6a8e 	.word	0x080d6a8e
 8012b14:	080d6a6b 	.word	0x080d6a6b
 8012b18:	3ff80000 	.word	0x3ff80000
 8012b1c:	080d6ba0 	.word	0x080d6ba0
 8012b20:	080d6b0a 	.word	0x080d6b0a
 8012b24:	2301      	movs	r3, #1
 8012b26:	9309      	str	r3, [sp, #36]	; 0x24
 8012b28:	e7d7      	b.n	8012ada <_dtoa_r+0x2c2>
 8012b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b2c:	9301      	str	r3, [sp, #4]
 8012b2e:	9304      	str	r3, [sp, #16]
 8012b30:	e7ba      	b.n	8012aa8 <_dtoa_r+0x290>
 8012b32:	3101      	adds	r1, #1
 8012b34:	0052      	lsls	r2, r2, #1
 8012b36:	e7ba      	b.n	8012aae <_dtoa_r+0x296>
 8012b38:	69e3      	ldr	r3, [r4, #28]
 8012b3a:	9a00      	ldr	r2, [sp, #0]
 8012b3c:	601a      	str	r2, [r3, #0]
 8012b3e:	9b04      	ldr	r3, [sp, #16]
 8012b40:	2b0e      	cmp	r3, #14
 8012b42:	f200 80a8 	bhi.w	8012c96 <_dtoa_r+0x47e>
 8012b46:	2d00      	cmp	r5, #0
 8012b48:	f000 80a5 	beq.w	8012c96 <_dtoa_r+0x47e>
 8012b4c:	f1bb 0f00 	cmp.w	fp, #0
 8012b50:	dd38      	ble.n	8012bc4 <_dtoa_r+0x3ac>
 8012b52:	4bc0      	ldr	r3, [pc, #768]	; (8012e54 <_dtoa_r+0x63c>)
 8012b54:	f00b 020f 	and.w	r2, fp, #15
 8012b58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012b5c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012b60:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012b64:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012b68:	d019      	beq.n	8012b9e <_dtoa_r+0x386>
 8012b6a:	4bbb      	ldr	r3, [pc, #748]	; (8012e58 <_dtoa_r+0x640>)
 8012b6c:	ec51 0b18 	vmov	r0, r1, d8
 8012b70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012b74:	f7ed fe8a 	bl	800088c <__aeabi_ddiv>
 8012b78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b7c:	f008 080f 	and.w	r8, r8, #15
 8012b80:	2503      	movs	r5, #3
 8012b82:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012e58 <_dtoa_r+0x640>
 8012b86:	f1b8 0f00 	cmp.w	r8, #0
 8012b8a:	d10a      	bne.n	8012ba2 <_dtoa_r+0x38a>
 8012b8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b90:	4632      	mov	r2, r6
 8012b92:	463b      	mov	r3, r7
 8012b94:	f7ed fe7a 	bl	800088c <__aeabi_ddiv>
 8012b98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b9c:	e02b      	b.n	8012bf6 <_dtoa_r+0x3de>
 8012b9e:	2502      	movs	r5, #2
 8012ba0:	e7ef      	b.n	8012b82 <_dtoa_r+0x36a>
 8012ba2:	f018 0f01 	tst.w	r8, #1
 8012ba6:	d008      	beq.n	8012bba <_dtoa_r+0x3a2>
 8012ba8:	4630      	mov	r0, r6
 8012baa:	4639      	mov	r1, r7
 8012bac:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012bb0:	f7ed fd42 	bl	8000638 <__aeabi_dmul>
 8012bb4:	3501      	adds	r5, #1
 8012bb6:	4606      	mov	r6, r0
 8012bb8:	460f      	mov	r7, r1
 8012bba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012bbe:	f109 0908 	add.w	r9, r9, #8
 8012bc2:	e7e0      	b.n	8012b86 <_dtoa_r+0x36e>
 8012bc4:	f000 809f 	beq.w	8012d06 <_dtoa_r+0x4ee>
 8012bc8:	f1cb 0600 	rsb	r6, fp, #0
 8012bcc:	4ba1      	ldr	r3, [pc, #644]	; (8012e54 <_dtoa_r+0x63c>)
 8012bce:	4fa2      	ldr	r7, [pc, #648]	; (8012e58 <_dtoa_r+0x640>)
 8012bd0:	f006 020f 	and.w	r2, r6, #15
 8012bd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bdc:	ec51 0b18 	vmov	r0, r1, d8
 8012be0:	f7ed fd2a 	bl	8000638 <__aeabi_dmul>
 8012be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012be8:	1136      	asrs	r6, r6, #4
 8012bea:	2300      	movs	r3, #0
 8012bec:	2502      	movs	r5, #2
 8012bee:	2e00      	cmp	r6, #0
 8012bf0:	d17e      	bne.n	8012cf0 <_dtoa_r+0x4d8>
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d1d0      	bne.n	8012b98 <_dtoa_r+0x380>
 8012bf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012bf8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	f000 8084 	beq.w	8012d0a <_dtoa_r+0x4f2>
 8012c02:	4b96      	ldr	r3, [pc, #600]	; (8012e5c <_dtoa_r+0x644>)
 8012c04:	2200      	movs	r2, #0
 8012c06:	4640      	mov	r0, r8
 8012c08:	4649      	mov	r1, r9
 8012c0a:	f7ed ff87 	bl	8000b1c <__aeabi_dcmplt>
 8012c0e:	2800      	cmp	r0, #0
 8012c10:	d07b      	beq.n	8012d0a <_dtoa_r+0x4f2>
 8012c12:	9b04      	ldr	r3, [sp, #16]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d078      	beq.n	8012d0a <_dtoa_r+0x4f2>
 8012c18:	9b01      	ldr	r3, [sp, #4]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	dd39      	ble.n	8012c92 <_dtoa_r+0x47a>
 8012c1e:	4b90      	ldr	r3, [pc, #576]	; (8012e60 <_dtoa_r+0x648>)
 8012c20:	2200      	movs	r2, #0
 8012c22:	4640      	mov	r0, r8
 8012c24:	4649      	mov	r1, r9
 8012c26:	f7ed fd07 	bl	8000638 <__aeabi_dmul>
 8012c2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c2e:	9e01      	ldr	r6, [sp, #4]
 8012c30:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012c34:	3501      	adds	r5, #1
 8012c36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012c3a:	4628      	mov	r0, r5
 8012c3c:	f7ed fc92 	bl	8000564 <__aeabi_i2d>
 8012c40:	4642      	mov	r2, r8
 8012c42:	464b      	mov	r3, r9
 8012c44:	f7ed fcf8 	bl	8000638 <__aeabi_dmul>
 8012c48:	4b86      	ldr	r3, [pc, #536]	; (8012e64 <_dtoa_r+0x64c>)
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	f7ed fb3e 	bl	80002cc <__adddf3>
 8012c50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c58:	9303      	str	r3, [sp, #12]
 8012c5a:	2e00      	cmp	r6, #0
 8012c5c:	d158      	bne.n	8012d10 <_dtoa_r+0x4f8>
 8012c5e:	4b82      	ldr	r3, [pc, #520]	; (8012e68 <_dtoa_r+0x650>)
 8012c60:	2200      	movs	r2, #0
 8012c62:	4640      	mov	r0, r8
 8012c64:	4649      	mov	r1, r9
 8012c66:	f7ed fb2f 	bl	80002c8 <__aeabi_dsub>
 8012c6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012c6e:	4680      	mov	r8, r0
 8012c70:	4689      	mov	r9, r1
 8012c72:	f7ed ff71 	bl	8000b58 <__aeabi_dcmpgt>
 8012c76:	2800      	cmp	r0, #0
 8012c78:	f040 8296 	bne.w	80131a8 <_dtoa_r+0x990>
 8012c7c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012c80:	4640      	mov	r0, r8
 8012c82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c86:	4649      	mov	r1, r9
 8012c88:	f7ed ff48 	bl	8000b1c <__aeabi_dcmplt>
 8012c8c:	2800      	cmp	r0, #0
 8012c8e:	f040 8289 	bne.w	80131a4 <_dtoa_r+0x98c>
 8012c92:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012c96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	f2c0 814e 	blt.w	8012f3a <_dtoa_r+0x722>
 8012c9e:	f1bb 0f0e 	cmp.w	fp, #14
 8012ca2:	f300 814a 	bgt.w	8012f3a <_dtoa_r+0x722>
 8012ca6:	4b6b      	ldr	r3, [pc, #428]	; (8012e54 <_dtoa_r+0x63c>)
 8012ca8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012cac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	f280 80dc 	bge.w	8012e70 <_dtoa_r+0x658>
 8012cb8:	9b04      	ldr	r3, [sp, #16]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	f300 80d8 	bgt.w	8012e70 <_dtoa_r+0x658>
 8012cc0:	f040 826f 	bne.w	80131a2 <_dtoa_r+0x98a>
 8012cc4:	4b68      	ldr	r3, [pc, #416]	; (8012e68 <_dtoa_r+0x650>)
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	4640      	mov	r0, r8
 8012cca:	4649      	mov	r1, r9
 8012ccc:	f7ed fcb4 	bl	8000638 <__aeabi_dmul>
 8012cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012cd4:	f7ed ff36 	bl	8000b44 <__aeabi_dcmpge>
 8012cd8:	9e04      	ldr	r6, [sp, #16]
 8012cda:	4637      	mov	r7, r6
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	f040 8245 	bne.w	801316c <_dtoa_r+0x954>
 8012ce2:	9d00      	ldr	r5, [sp, #0]
 8012ce4:	2331      	movs	r3, #49	; 0x31
 8012ce6:	f805 3b01 	strb.w	r3, [r5], #1
 8012cea:	f10b 0b01 	add.w	fp, fp, #1
 8012cee:	e241      	b.n	8013174 <_dtoa_r+0x95c>
 8012cf0:	07f2      	lsls	r2, r6, #31
 8012cf2:	d505      	bpl.n	8012d00 <_dtoa_r+0x4e8>
 8012cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012cf8:	f7ed fc9e 	bl	8000638 <__aeabi_dmul>
 8012cfc:	3501      	adds	r5, #1
 8012cfe:	2301      	movs	r3, #1
 8012d00:	1076      	asrs	r6, r6, #1
 8012d02:	3708      	adds	r7, #8
 8012d04:	e773      	b.n	8012bee <_dtoa_r+0x3d6>
 8012d06:	2502      	movs	r5, #2
 8012d08:	e775      	b.n	8012bf6 <_dtoa_r+0x3de>
 8012d0a:	9e04      	ldr	r6, [sp, #16]
 8012d0c:	465f      	mov	r7, fp
 8012d0e:	e792      	b.n	8012c36 <_dtoa_r+0x41e>
 8012d10:	9900      	ldr	r1, [sp, #0]
 8012d12:	4b50      	ldr	r3, [pc, #320]	; (8012e54 <_dtoa_r+0x63c>)
 8012d14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d18:	4431      	add	r1, r6
 8012d1a:	9102      	str	r1, [sp, #8]
 8012d1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d1e:	eeb0 9a47 	vmov.f32	s18, s14
 8012d22:	eef0 9a67 	vmov.f32	s19, s15
 8012d26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012d2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012d2e:	2900      	cmp	r1, #0
 8012d30:	d044      	beq.n	8012dbc <_dtoa_r+0x5a4>
 8012d32:	494e      	ldr	r1, [pc, #312]	; (8012e6c <_dtoa_r+0x654>)
 8012d34:	2000      	movs	r0, #0
 8012d36:	f7ed fda9 	bl	800088c <__aeabi_ddiv>
 8012d3a:	ec53 2b19 	vmov	r2, r3, d9
 8012d3e:	f7ed fac3 	bl	80002c8 <__aeabi_dsub>
 8012d42:	9d00      	ldr	r5, [sp, #0]
 8012d44:	ec41 0b19 	vmov	d9, r0, r1
 8012d48:	4649      	mov	r1, r9
 8012d4a:	4640      	mov	r0, r8
 8012d4c:	f7ed ff24 	bl	8000b98 <__aeabi_d2iz>
 8012d50:	4606      	mov	r6, r0
 8012d52:	f7ed fc07 	bl	8000564 <__aeabi_i2d>
 8012d56:	4602      	mov	r2, r0
 8012d58:	460b      	mov	r3, r1
 8012d5a:	4640      	mov	r0, r8
 8012d5c:	4649      	mov	r1, r9
 8012d5e:	f7ed fab3 	bl	80002c8 <__aeabi_dsub>
 8012d62:	3630      	adds	r6, #48	; 0x30
 8012d64:	f805 6b01 	strb.w	r6, [r5], #1
 8012d68:	ec53 2b19 	vmov	r2, r3, d9
 8012d6c:	4680      	mov	r8, r0
 8012d6e:	4689      	mov	r9, r1
 8012d70:	f7ed fed4 	bl	8000b1c <__aeabi_dcmplt>
 8012d74:	2800      	cmp	r0, #0
 8012d76:	d164      	bne.n	8012e42 <_dtoa_r+0x62a>
 8012d78:	4642      	mov	r2, r8
 8012d7a:	464b      	mov	r3, r9
 8012d7c:	4937      	ldr	r1, [pc, #220]	; (8012e5c <_dtoa_r+0x644>)
 8012d7e:	2000      	movs	r0, #0
 8012d80:	f7ed faa2 	bl	80002c8 <__aeabi_dsub>
 8012d84:	ec53 2b19 	vmov	r2, r3, d9
 8012d88:	f7ed fec8 	bl	8000b1c <__aeabi_dcmplt>
 8012d8c:	2800      	cmp	r0, #0
 8012d8e:	f040 80b6 	bne.w	8012efe <_dtoa_r+0x6e6>
 8012d92:	9b02      	ldr	r3, [sp, #8]
 8012d94:	429d      	cmp	r5, r3
 8012d96:	f43f af7c 	beq.w	8012c92 <_dtoa_r+0x47a>
 8012d9a:	4b31      	ldr	r3, [pc, #196]	; (8012e60 <_dtoa_r+0x648>)
 8012d9c:	ec51 0b19 	vmov	r0, r1, d9
 8012da0:	2200      	movs	r2, #0
 8012da2:	f7ed fc49 	bl	8000638 <__aeabi_dmul>
 8012da6:	4b2e      	ldr	r3, [pc, #184]	; (8012e60 <_dtoa_r+0x648>)
 8012da8:	ec41 0b19 	vmov	d9, r0, r1
 8012dac:	2200      	movs	r2, #0
 8012dae:	4640      	mov	r0, r8
 8012db0:	4649      	mov	r1, r9
 8012db2:	f7ed fc41 	bl	8000638 <__aeabi_dmul>
 8012db6:	4680      	mov	r8, r0
 8012db8:	4689      	mov	r9, r1
 8012dba:	e7c5      	b.n	8012d48 <_dtoa_r+0x530>
 8012dbc:	ec51 0b17 	vmov	r0, r1, d7
 8012dc0:	f7ed fc3a 	bl	8000638 <__aeabi_dmul>
 8012dc4:	9b02      	ldr	r3, [sp, #8]
 8012dc6:	9d00      	ldr	r5, [sp, #0]
 8012dc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8012dca:	ec41 0b19 	vmov	d9, r0, r1
 8012dce:	4649      	mov	r1, r9
 8012dd0:	4640      	mov	r0, r8
 8012dd2:	f7ed fee1 	bl	8000b98 <__aeabi_d2iz>
 8012dd6:	4606      	mov	r6, r0
 8012dd8:	f7ed fbc4 	bl	8000564 <__aeabi_i2d>
 8012ddc:	3630      	adds	r6, #48	; 0x30
 8012dde:	4602      	mov	r2, r0
 8012de0:	460b      	mov	r3, r1
 8012de2:	4640      	mov	r0, r8
 8012de4:	4649      	mov	r1, r9
 8012de6:	f7ed fa6f 	bl	80002c8 <__aeabi_dsub>
 8012dea:	f805 6b01 	strb.w	r6, [r5], #1
 8012dee:	9b02      	ldr	r3, [sp, #8]
 8012df0:	429d      	cmp	r5, r3
 8012df2:	4680      	mov	r8, r0
 8012df4:	4689      	mov	r9, r1
 8012df6:	f04f 0200 	mov.w	r2, #0
 8012dfa:	d124      	bne.n	8012e46 <_dtoa_r+0x62e>
 8012dfc:	4b1b      	ldr	r3, [pc, #108]	; (8012e6c <_dtoa_r+0x654>)
 8012dfe:	ec51 0b19 	vmov	r0, r1, d9
 8012e02:	f7ed fa63 	bl	80002cc <__adddf3>
 8012e06:	4602      	mov	r2, r0
 8012e08:	460b      	mov	r3, r1
 8012e0a:	4640      	mov	r0, r8
 8012e0c:	4649      	mov	r1, r9
 8012e0e:	f7ed fea3 	bl	8000b58 <__aeabi_dcmpgt>
 8012e12:	2800      	cmp	r0, #0
 8012e14:	d173      	bne.n	8012efe <_dtoa_r+0x6e6>
 8012e16:	ec53 2b19 	vmov	r2, r3, d9
 8012e1a:	4914      	ldr	r1, [pc, #80]	; (8012e6c <_dtoa_r+0x654>)
 8012e1c:	2000      	movs	r0, #0
 8012e1e:	f7ed fa53 	bl	80002c8 <__aeabi_dsub>
 8012e22:	4602      	mov	r2, r0
 8012e24:	460b      	mov	r3, r1
 8012e26:	4640      	mov	r0, r8
 8012e28:	4649      	mov	r1, r9
 8012e2a:	f7ed fe77 	bl	8000b1c <__aeabi_dcmplt>
 8012e2e:	2800      	cmp	r0, #0
 8012e30:	f43f af2f 	beq.w	8012c92 <_dtoa_r+0x47a>
 8012e34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012e36:	1e6b      	subs	r3, r5, #1
 8012e38:	930f      	str	r3, [sp, #60]	; 0x3c
 8012e3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012e3e:	2b30      	cmp	r3, #48	; 0x30
 8012e40:	d0f8      	beq.n	8012e34 <_dtoa_r+0x61c>
 8012e42:	46bb      	mov	fp, r7
 8012e44:	e04a      	b.n	8012edc <_dtoa_r+0x6c4>
 8012e46:	4b06      	ldr	r3, [pc, #24]	; (8012e60 <_dtoa_r+0x648>)
 8012e48:	f7ed fbf6 	bl	8000638 <__aeabi_dmul>
 8012e4c:	4680      	mov	r8, r0
 8012e4e:	4689      	mov	r9, r1
 8012e50:	e7bd      	b.n	8012dce <_dtoa_r+0x5b6>
 8012e52:	bf00      	nop
 8012e54:	080d6ba0 	.word	0x080d6ba0
 8012e58:	080d6b78 	.word	0x080d6b78
 8012e5c:	3ff00000 	.word	0x3ff00000
 8012e60:	40240000 	.word	0x40240000
 8012e64:	401c0000 	.word	0x401c0000
 8012e68:	40140000 	.word	0x40140000
 8012e6c:	3fe00000 	.word	0x3fe00000
 8012e70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012e74:	9d00      	ldr	r5, [sp, #0]
 8012e76:	4642      	mov	r2, r8
 8012e78:	464b      	mov	r3, r9
 8012e7a:	4630      	mov	r0, r6
 8012e7c:	4639      	mov	r1, r7
 8012e7e:	f7ed fd05 	bl	800088c <__aeabi_ddiv>
 8012e82:	f7ed fe89 	bl	8000b98 <__aeabi_d2iz>
 8012e86:	9001      	str	r0, [sp, #4]
 8012e88:	f7ed fb6c 	bl	8000564 <__aeabi_i2d>
 8012e8c:	4642      	mov	r2, r8
 8012e8e:	464b      	mov	r3, r9
 8012e90:	f7ed fbd2 	bl	8000638 <__aeabi_dmul>
 8012e94:	4602      	mov	r2, r0
 8012e96:	460b      	mov	r3, r1
 8012e98:	4630      	mov	r0, r6
 8012e9a:	4639      	mov	r1, r7
 8012e9c:	f7ed fa14 	bl	80002c8 <__aeabi_dsub>
 8012ea0:	9e01      	ldr	r6, [sp, #4]
 8012ea2:	9f04      	ldr	r7, [sp, #16]
 8012ea4:	3630      	adds	r6, #48	; 0x30
 8012ea6:	f805 6b01 	strb.w	r6, [r5], #1
 8012eaa:	9e00      	ldr	r6, [sp, #0]
 8012eac:	1bae      	subs	r6, r5, r6
 8012eae:	42b7      	cmp	r7, r6
 8012eb0:	4602      	mov	r2, r0
 8012eb2:	460b      	mov	r3, r1
 8012eb4:	d134      	bne.n	8012f20 <_dtoa_r+0x708>
 8012eb6:	f7ed fa09 	bl	80002cc <__adddf3>
 8012eba:	4642      	mov	r2, r8
 8012ebc:	464b      	mov	r3, r9
 8012ebe:	4606      	mov	r6, r0
 8012ec0:	460f      	mov	r7, r1
 8012ec2:	f7ed fe49 	bl	8000b58 <__aeabi_dcmpgt>
 8012ec6:	b9c8      	cbnz	r0, 8012efc <_dtoa_r+0x6e4>
 8012ec8:	4642      	mov	r2, r8
 8012eca:	464b      	mov	r3, r9
 8012ecc:	4630      	mov	r0, r6
 8012ece:	4639      	mov	r1, r7
 8012ed0:	f7ed fe1a 	bl	8000b08 <__aeabi_dcmpeq>
 8012ed4:	b110      	cbz	r0, 8012edc <_dtoa_r+0x6c4>
 8012ed6:	9b01      	ldr	r3, [sp, #4]
 8012ed8:	07db      	lsls	r3, r3, #31
 8012eda:	d40f      	bmi.n	8012efc <_dtoa_r+0x6e4>
 8012edc:	4651      	mov	r1, sl
 8012ede:	4620      	mov	r0, r4
 8012ee0:	f000 fbcc 	bl	801367c <_Bfree>
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012ee8:	702b      	strb	r3, [r5, #0]
 8012eea:	f10b 0301 	add.w	r3, fp, #1
 8012eee:	6013      	str	r3, [r2, #0]
 8012ef0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	f43f ace2 	beq.w	80128bc <_dtoa_r+0xa4>
 8012ef8:	601d      	str	r5, [r3, #0]
 8012efa:	e4df      	b.n	80128bc <_dtoa_r+0xa4>
 8012efc:	465f      	mov	r7, fp
 8012efe:	462b      	mov	r3, r5
 8012f00:	461d      	mov	r5, r3
 8012f02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012f06:	2a39      	cmp	r2, #57	; 0x39
 8012f08:	d106      	bne.n	8012f18 <_dtoa_r+0x700>
 8012f0a:	9a00      	ldr	r2, [sp, #0]
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	d1f7      	bne.n	8012f00 <_dtoa_r+0x6e8>
 8012f10:	9900      	ldr	r1, [sp, #0]
 8012f12:	2230      	movs	r2, #48	; 0x30
 8012f14:	3701      	adds	r7, #1
 8012f16:	700a      	strb	r2, [r1, #0]
 8012f18:	781a      	ldrb	r2, [r3, #0]
 8012f1a:	3201      	adds	r2, #1
 8012f1c:	701a      	strb	r2, [r3, #0]
 8012f1e:	e790      	b.n	8012e42 <_dtoa_r+0x62a>
 8012f20:	4ba3      	ldr	r3, [pc, #652]	; (80131b0 <_dtoa_r+0x998>)
 8012f22:	2200      	movs	r2, #0
 8012f24:	f7ed fb88 	bl	8000638 <__aeabi_dmul>
 8012f28:	2200      	movs	r2, #0
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	4606      	mov	r6, r0
 8012f2e:	460f      	mov	r7, r1
 8012f30:	f7ed fdea 	bl	8000b08 <__aeabi_dcmpeq>
 8012f34:	2800      	cmp	r0, #0
 8012f36:	d09e      	beq.n	8012e76 <_dtoa_r+0x65e>
 8012f38:	e7d0      	b.n	8012edc <_dtoa_r+0x6c4>
 8012f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f3c:	2a00      	cmp	r2, #0
 8012f3e:	f000 80ca 	beq.w	80130d6 <_dtoa_r+0x8be>
 8012f42:	9a07      	ldr	r2, [sp, #28]
 8012f44:	2a01      	cmp	r2, #1
 8012f46:	f300 80ad 	bgt.w	80130a4 <_dtoa_r+0x88c>
 8012f4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012f4c:	2a00      	cmp	r2, #0
 8012f4e:	f000 80a5 	beq.w	801309c <_dtoa_r+0x884>
 8012f52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012f56:	9e08      	ldr	r6, [sp, #32]
 8012f58:	9d05      	ldr	r5, [sp, #20]
 8012f5a:	9a05      	ldr	r2, [sp, #20]
 8012f5c:	441a      	add	r2, r3
 8012f5e:	9205      	str	r2, [sp, #20]
 8012f60:	9a06      	ldr	r2, [sp, #24]
 8012f62:	2101      	movs	r1, #1
 8012f64:	441a      	add	r2, r3
 8012f66:	4620      	mov	r0, r4
 8012f68:	9206      	str	r2, [sp, #24]
 8012f6a:	f000 fc3d 	bl	80137e8 <__i2b>
 8012f6e:	4607      	mov	r7, r0
 8012f70:	b165      	cbz	r5, 8012f8c <_dtoa_r+0x774>
 8012f72:	9b06      	ldr	r3, [sp, #24]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	dd09      	ble.n	8012f8c <_dtoa_r+0x774>
 8012f78:	42ab      	cmp	r3, r5
 8012f7a:	9a05      	ldr	r2, [sp, #20]
 8012f7c:	bfa8      	it	ge
 8012f7e:	462b      	movge	r3, r5
 8012f80:	1ad2      	subs	r2, r2, r3
 8012f82:	9205      	str	r2, [sp, #20]
 8012f84:	9a06      	ldr	r2, [sp, #24]
 8012f86:	1aed      	subs	r5, r5, r3
 8012f88:	1ad3      	subs	r3, r2, r3
 8012f8a:	9306      	str	r3, [sp, #24]
 8012f8c:	9b08      	ldr	r3, [sp, #32]
 8012f8e:	b1f3      	cbz	r3, 8012fce <_dtoa_r+0x7b6>
 8012f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	f000 80a3 	beq.w	80130de <_dtoa_r+0x8c6>
 8012f98:	2e00      	cmp	r6, #0
 8012f9a:	dd10      	ble.n	8012fbe <_dtoa_r+0x7a6>
 8012f9c:	4639      	mov	r1, r7
 8012f9e:	4632      	mov	r2, r6
 8012fa0:	4620      	mov	r0, r4
 8012fa2:	f000 fce1 	bl	8013968 <__pow5mult>
 8012fa6:	4652      	mov	r2, sl
 8012fa8:	4601      	mov	r1, r0
 8012faa:	4607      	mov	r7, r0
 8012fac:	4620      	mov	r0, r4
 8012fae:	f000 fc31 	bl	8013814 <__multiply>
 8012fb2:	4651      	mov	r1, sl
 8012fb4:	4680      	mov	r8, r0
 8012fb6:	4620      	mov	r0, r4
 8012fb8:	f000 fb60 	bl	801367c <_Bfree>
 8012fbc:	46c2      	mov	sl, r8
 8012fbe:	9b08      	ldr	r3, [sp, #32]
 8012fc0:	1b9a      	subs	r2, r3, r6
 8012fc2:	d004      	beq.n	8012fce <_dtoa_r+0x7b6>
 8012fc4:	4651      	mov	r1, sl
 8012fc6:	4620      	mov	r0, r4
 8012fc8:	f000 fcce 	bl	8013968 <__pow5mult>
 8012fcc:	4682      	mov	sl, r0
 8012fce:	2101      	movs	r1, #1
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	f000 fc09 	bl	80137e8 <__i2b>
 8012fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	4606      	mov	r6, r0
 8012fdc:	f340 8081 	ble.w	80130e2 <_dtoa_r+0x8ca>
 8012fe0:	461a      	mov	r2, r3
 8012fe2:	4601      	mov	r1, r0
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	f000 fcbf 	bl	8013968 <__pow5mult>
 8012fea:	9b07      	ldr	r3, [sp, #28]
 8012fec:	2b01      	cmp	r3, #1
 8012fee:	4606      	mov	r6, r0
 8012ff0:	dd7a      	ble.n	80130e8 <_dtoa_r+0x8d0>
 8012ff2:	f04f 0800 	mov.w	r8, #0
 8012ff6:	6933      	ldr	r3, [r6, #16]
 8012ff8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012ffc:	6918      	ldr	r0, [r3, #16]
 8012ffe:	f000 fba5 	bl	801374c <__hi0bits>
 8013002:	f1c0 0020 	rsb	r0, r0, #32
 8013006:	9b06      	ldr	r3, [sp, #24]
 8013008:	4418      	add	r0, r3
 801300a:	f010 001f 	ands.w	r0, r0, #31
 801300e:	f000 8094 	beq.w	801313a <_dtoa_r+0x922>
 8013012:	f1c0 0320 	rsb	r3, r0, #32
 8013016:	2b04      	cmp	r3, #4
 8013018:	f340 8085 	ble.w	8013126 <_dtoa_r+0x90e>
 801301c:	9b05      	ldr	r3, [sp, #20]
 801301e:	f1c0 001c 	rsb	r0, r0, #28
 8013022:	4403      	add	r3, r0
 8013024:	9305      	str	r3, [sp, #20]
 8013026:	9b06      	ldr	r3, [sp, #24]
 8013028:	4403      	add	r3, r0
 801302a:	4405      	add	r5, r0
 801302c:	9306      	str	r3, [sp, #24]
 801302e:	9b05      	ldr	r3, [sp, #20]
 8013030:	2b00      	cmp	r3, #0
 8013032:	dd05      	ble.n	8013040 <_dtoa_r+0x828>
 8013034:	4651      	mov	r1, sl
 8013036:	461a      	mov	r2, r3
 8013038:	4620      	mov	r0, r4
 801303a:	f000 fcef 	bl	8013a1c <__lshift>
 801303e:	4682      	mov	sl, r0
 8013040:	9b06      	ldr	r3, [sp, #24]
 8013042:	2b00      	cmp	r3, #0
 8013044:	dd05      	ble.n	8013052 <_dtoa_r+0x83a>
 8013046:	4631      	mov	r1, r6
 8013048:	461a      	mov	r2, r3
 801304a:	4620      	mov	r0, r4
 801304c:	f000 fce6 	bl	8013a1c <__lshift>
 8013050:	4606      	mov	r6, r0
 8013052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013054:	2b00      	cmp	r3, #0
 8013056:	d072      	beq.n	801313e <_dtoa_r+0x926>
 8013058:	4631      	mov	r1, r6
 801305a:	4650      	mov	r0, sl
 801305c:	f000 fd4a 	bl	8013af4 <__mcmp>
 8013060:	2800      	cmp	r0, #0
 8013062:	da6c      	bge.n	801313e <_dtoa_r+0x926>
 8013064:	2300      	movs	r3, #0
 8013066:	4651      	mov	r1, sl
 8013068:	220a      	movs	r2, #10
 801306a:	4620      	mov	r0, r4
 801306c:	f000 fb28 	bl	80136c0 <__multadd>
 8013070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013072:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013076:	4682      	mov	sl, r0
 8013078:	2b00      	cmp	r3, #0
 801307a:	f000 81b0 	beq.w	80133de <_dtoa_r+0xbc6>
 801307e:	2300      	movs	r3, #0
 8013080:	4639      	mov	r1, r7
 8013082:	220a      	movs	r2, #10
 8013084:	4620      	mov	r0, r4
 8013086:	f000 fb1b 	bl	80136c0 <__multadd>
 801308a:	9b01      	ldr	r3, [sp, #4]
 801308c:	2b00      	cmp	r3, #0
 801308e:	4607      	mov	r7, r0
 8013090:	f300 8096 	bgt.w	80131c0 <_dtoa_r+0x9a8>
 8013094:	9b07      	ldr	r3, [sp, #28]
 8013096:	2b02      	cmp	r3, #2
 8013098:	dc59      	bgt.n	801314e <_dtoa_r+0x936>
 801309a:	e091      	b.n	80131c0 <_dtoa_r+0x9a8>
 801309c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801309e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80130a2:	e758      	b.n	8012f56 <_dtoa_r+0x73e>
 80130a4:	9b04      	ldr	r3, [sp, #16]
 80130a6:	1e5e      	subs	r6, r3, #1
 80130a8:	9b08      	ldr	r3, [sp, #32]
 80130aa:	42b3      	cmp	r3, r6
 80130ac:	bfbf      	itttt	lt
 80130ae:	9b08      	ldrlt	r3, [sp, #32]
 80130b0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80130b2:	9608      	strlt	r6, [sp, #32]
 80130b4:	1af3      	sublt	r3, r6, r3
 80130b6:	bfb4      	ite	lt
 80130b8:	18d2      	addlt	r2, r2, r3
 80130ba:	1b9e      	subge	r6, r3, r6
 80130bc:	9b04      	ldr	r3, [sp, #16]
 80130be:	bfbc      	itt	lt
 80130c0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80130c2:	2600      	movlt	r6, #0
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	bfb7      	itett	lt
 80130c8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80130cc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80130d0:	1a9d      	sublt	r5, r3, r2
 80130d2:	2300      	movlt	r3, #0
 80130d4:	e741      	b.n	8012f5a <_dtoa_r+0x742>
 80130d6:	9e08      	ldr	r6, [sp, #32]
 80130d8:	9d05      	ldr	r5, [sp, #20]
 80130da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80130dc:	e748      	b.n	8012f70 <_dtoa_r+0x758>
 80130de:	9a08      	ldr	r2, [sp, #32]
 80130e0:	e770      	b.n	8012fc4 <_dtoa_r+0x7ac>
 80130e2:	9b07      	ldr	r3, [sp, #28]
 80130e4:	2b01      	cmp	r3, #1
 80130e6:	dc19      	bgt.n	801311c <_dtoa_r+0x904>
 80130e8:	9b02      	ldr	r3, [sp, #8]
 80130ea:	b9bb      	cbnz	r3, 801311c <_dtoa_r+0x904>
 80130ec:	9b03      	ldr	r3, [sp, #12]
 80130ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80130f2:	b99b      	cbnz	r3, 801311c <_dtoa_r+0x904>
 80130f4:	9b03      	ldr	r3, [sp, #12]
 80130f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80130fa:	0d1b      	lsrs	r3, r3, #20
 80130fc:	051b      	lsls	r3, r3, #20
 80130fe:	b183      	cbz	r3, 8013122 <_dtoa_r+0x90a>
 8013100:	9b05      	ldr	r3, [sp, #20]
 8013102:	3301      	adds	r3, #1
 8013104:	9305      	str	r3, [sp, #20]
 8013106:	9b06      	ldr	r3, [sp, #24]
 8013108:	3301      	adds	r3, #1
 801310a:	9306      	str	r3, [sp, #24]
 801310c:	f04f 0801 	mov.w	r8, #1
 8013110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013112:	2b00      	cmp	r3, #0
 8013114:	f47f af6f 	bne.w	8012ff6 <_dtoa_r+0x7de>
 8013118:	2001      	movs	r0, #1
 801311a:	e774      	b.n	8013006 <_dtoa_r+0x7ee>
 801311c:	f04f 0800 	mov.w	r8, #0
 8013120:	e7f6      	b.n	8013110 <_dtoa_r+0x8f8>
 8013122:	4698      	mov	r8, r3
 8013124:	e7f4      	b.n	8013110 <_dtoa_r+0x8f8>
 8013126:	d082      	beq.n	801302e <_dtoa_r+0x816>
 8013128:	9a05      	ldr	r2, [sp, #20]
 801312a:	331c      	adds	r3, #28
 801312c:	441a      	add	r2, r3
 801312e:	9205      	str	r2, [sp, #20]
 8013130:	9a06      	ldr	r2, [sp, #24]
 8013132:	441a      	add	r2, r3
 8013134:	441d      	add	r5, r3
 8013136:	9206      	str	r2, [sp, #24]
 8013138:	e779      	b.n	801302e <_dtoa_r+0x816>
 801313a:	4603      	mov	r3, r0
 801313c:	e7f4      	b.n	8013128 <_dtoa_r+0x910>
 801313e:	9b04      	ldr	r3, [sp, #16]
 8013140:	2b00      	cmp	r3, #0
 8013142:	dc37      	bgt.n	80131b4 <_dtoa_r+0x99c>
 8013144:	9b07      	ldr	r3, [sp, #28]
 8013146:	2b02      	cmp	r3, #2
 8013148:	dd34      	ble.n	80131b4 <_dtoa_r+0x99c>
 801314a:	9b04      	ldr	r3, [sp, #16]
 801314c:	9301      	str	r3, [sp, #4]
 801314e:	9b01      	ldr	r3, [sp, #4]
 8013150:	b963      	cbnz	r3, 801316c <_dtoa_r+0x954>
 8013152:	4631      	mov	r1, r6
 8013154:	2205      	movs	r2, #5
 8013156:	4620      	mov	r0, r4
 8013158:	f000 fab2 	bl	80136c0 <__multadd>
 801315c:	4601      	mov	r1, r0
 801315e:	4606      	mov	r6, r0
 8013160:	4650      	mov	r0, sl
 8013162:	f000 fcc7 	bl	8013af4 <__mcmp>
 8013166:	2800      	cmp	r0, #0
 8013168:	f73f adbb 	bgt.w	8012ce2 <_dtoa_r+0x4ca>
 801316c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801316e:	9d00      	ldr	r5, [sp, #0]
 8013170:	ea6f 0b03 	mvn.w	fp, r3
 8013174:	f04f 0800 	mov.w	r8, #0
 8013178:	4631      	mov	r1, r6
 801317a:	4620      	mov	r0, r4
 801317c:	f000 fa7e 	bl	801367c <_Bfree>
 8013180:	2f00      	cmp	r7, #0
 8013182:	f43f aeab 	beq.w	8012edc <_dtoa_r+0x6c4>
 8013186:	f1b8 0f00 	cmp.w	r8, #0
 801318a:	d005      	beq.n	8013198 <_dtoa_r+0x980>
 801318c:	45b8      	cmp	r8, r7
 801318e:	d003      	beq.n	8013198 <_dtoa_r+0x980>
 8013190:	4641      	mov	r1, r8
 8013192:	4620      	mov	r0, r4
 8013194:	f000 fa72 	bl	801367c <_Bfree>
 8013198:	4639      	mov	r1, r7
 801319a:	4620      	mov	r0, r4
 801319c:	f000 fa6e 	bl	801367c <_Bfree>
 80131a0:	e69c      	b.n	8012edc <_dtoa_r+0x6c4>
 80131a2:	2600      	movs	r6, #0
 80131a4:	4637      	mov	r7, r6
 80131a6:	e7e1      	b.n	801316c <_dtoa_r+0x954>
 80131a8:	46bb      	mov	fp, r7
 80131aa:	4637      	mov	r7, r6
 80131ac:	e599      	b.n	8012ce2 <_dtoa_r+0x4ca>
 80131ae:	bf00      	nop
 80131b0:	40240000 	.word	0x40240000
 80131b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	f000 80c8 	beq.w	801334c <_dtoa_r+0xb34>
 80131bc:	9b04      	ldr	r3, [sp, #16]
 80131be:	9301      	str	r3, [sp, #4]
 80131c0:	2d00      	cmp	r5, #0
 80131c2:	dd05      	ble.n	80131d0 <_dtoa_r+0x9b8>
 80131c4:	4639      	mov	r1, r7
 80131c6:	462a      	mov	r2, r5
 80131c8:	4620      	mov	r0, r4
 80131ca:	f000 fc27 	bl	8013a1c <__lshift>
 80131ce:	4607      	mov	r7, r0
 80131d0:	f1b8 0f00 	cmp.w	r8, #0
 80131d4:	d05b      	beq.n	801328e <_dtoa_r+0xa76>
 80131d6:	6879      	ldr	r1, [r7, #4]
 80131d8:	4620      	mov	r0, r4
 80131da:	f000 fa0f 	bl	80135fc <_Balloc>
 80131de:	4605      	mov	r5, r0
 80131e0:	b928      	cbnz	r0, 80131ee <_dtoa_r+0x9d6>
 80131e2:	4b83      	ldr	r3, [pc, #524]	; (80133f0 <_dtoa_r+0xbd8>)
 80131e4:	4602      	mov	r2, r0
 80131e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80131ea:	f7ff bb2e 	b.w	801284a <_dtoa_r+0x32>
 80131ee:	693a      	ldr	r2, [r7, #16]
 80131f0:	3202      	adds	r2, #2
 80131f2:	0092      	lsls	r2, r2, #2
 80131f4:	f107 010c 	add.w	r1, r7, #12
 80131f8:	300c      	adds	r0, #12
 80131fa:	f000 ffab 	bl	8014154 <memcpy>
 80131fe:	2201      	movs	r2, #1
 8013200:	4629      	mov	r1, r5
 8013202:	4620      	mov	r0, r4
 8013204:	f000 fc0a 	bl	8013a1c <__lshift>
 8013208:	9b00      	ldr	r3, [sp, #0]
 801320a:	3301      	adds	r3, #1
 801320c:	9304      	str	r3, [sp, #16]
 801320e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013212:	4413      	add	r3, r2
 8013214:	9308      	str	r3, [sp, #32]
 8013216:	9b02      	ldr	r3, [sp, #8]
 8013218:	f003 0301 	and.w	r3, r3, #1
 801321c:	46b8      	mov	r8, r7
 801321e:	9306      	str	r3, [sp, #24]
 8013220:	4607      	mov	r7, r0
 8013222:	9b04      	ldr	r3, [sp, #16]
 8013224:	4631      	mov	r1, r6
 8013226:	3b01      	subs	r3, #1
 8013228:	4650      	mov	r0, sl
 801322a:	9301      	str	r3, [sp, #4]
 801322c:	f7ff fa69 	bl	8012702 <quorem>
 8013230:	4641      	mov	r1, r8
 8013232:	9002      	str	r0, [sp, #8]
 8013234:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013238:	4650      	mov	r0, sl
 801323a:	f000 fc5b 	bl	8013af4 <__mcmp>
 801323e:	463a      	mov	r2, r7
 8013240:	9005      	str	r0, [sp, #20]
 8013242:	4631      	mov	r1, r6
 8013244:	4620      	mov	r0, r4
 8013246:	f000 fc71 	bl	8013b2c <__mdiff>
 801324a:	68c2      	ldr	r2, [r0, #12]
 801324c:	4605      	mov	r5, r0
 801324e:	bb02      	cbnz	r2, 8013292 <_dtoa_r+0xa7a>
 8013250:	4601      	mov	r1, r0
 8013252:	4650      	mov	r0, sl
 8013254:	f000 fc4e 	bl	8013af4 <__mcmp>
 8013258:	4602      	mov	r2, r0
 801325a:	4629      	mov	r1, r5
 801325c:	4620      	mov	r0, r4
 801325e:	9209      	str	r2, [sp, #36]	; 0x24
 8013260:	f000 fa0c 	bl	801367c <_Bfree>
 8013264:	9b07      	ldr	r3, [sp, #28]
 8013266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013268:	9d04      	ldr	r5, [sp, #16]
 801326a:	ea43 0102 	orr.w	r1, r3, r2
 801326e:	9b06      	ldr	r3, [sp, #24]
 8013270:	4319      	orrs	r1, r3
 8013272:	d110      	bne.n	8013296 <_dtoa_r+0xa7e>
 8013274:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013278:	d029      	beq.n	80132ce <_dtoa_r+0xab6>
 801327a:	9b05      	ldr	r3, [sp, #20]
 801327c:	2b00      	cmp	r3, #0
 801327e:	dd02      	ble.n	8013286 <_dtoa_r+0xa6e>
 8013280:	9b02      	ldr	r3, [sp, #8]
 8013282:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013286:	9b01      	ldr	r3, [sp, #4]
 8013288:	f883 9000 	strb.w	r9, [r3]
 801328c:	e774      	b.n	8013178 <_dtoa_r+0x960>
 801328e:	4638      	mov	r0, r7
 8013290:	e7ba      	b.n	8013208 <_dtoa_r+0x9f0>
 8013292:	2201      	movs	r2, #1
 8013294:	e7e1      	b.n	801325a <_dtoa_r+0xa42>
 8013296:	9b05      	ldr	r3, [sp, #20]
 8013298:	2b00      	cmp	r3, #0
 801329a:	db04      	blt.n	80132a6 <_dtoa_r+0xa8e>
 801329c:	9907      	ldr	r1, [sp, #28]
 801329e:	430b      	orrs	r3, r1
 80132a0:	9906      	ldr	r1, [sp, #24]
 80132a2:	430b      	orrs	r3, r1
 80132a4:	d120      	bne.n	80132e8 <_dtoa_r+0xad0>
 80132a6:	2a00      	cmp	r2, #0
 80132a8:	dded      	ble.n	8013286 <_dtoa_r+0xa6e>
 80132aa:	4651      	mov	r1, sl
 80132ac:	2201      	movs	r2, #1
 80132ae:	4620      	mov	r0, r4
 80132b0:	f000 fbb4 	bl	8013a1c <__lshift>
 80132b4:	4631      	mov	r1, r6
 80132b6:	4682      	mov	sl, r0
 80132b8:	f000 fc1c 	bl	8013af4 <__mcmp>
 80132bc:	2800      	cmp	r0, #0
 80132be:	dc03      	bgt.n	80132c8 <_dtoa_r+0xab0>
 80132c0:	d1e1      	bne.n	8013286 <_dtoa_r+0xa6e>
 80132c2:	f019 0f01 	tst.w	r9, #1
 80132c6:	d0de      	beq.n	8013286 <_dtoa_r+0xa6e>
 80132c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80132cc:	d1d8      	bne.n	8013280 <_dtoa_r+0xa68>
 80132ce:	9a01      	ldr	r2, [sp, #4]
 80132d0:	2339      	movs	r3, #57	; 0x39
 80132d2:	7013      	strb	r3, [r2, #0]
 80132d4:	462b      	mov	r3, r5
 80132d6:	461d      	mov	r5, r3
 80132d8:	3b01      	subs	r3, #1
 80132da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80132de:	2a39      	cmp	r2, #57	; 0x39
 80132e0:	d06c      	beq.n	80133bc <_dtoa_r+0xba4>
 80132e2:	3201      	adds	r2, #1
 80132e4:	701a      	strb	r2, [r3, #0]
 80132e6:	e747      	b.n	8013178 <_dtoa_r+0x960>
 80132e8:	2a00      	cmp	r2, #0
 80132ea:	dd07      	ble.n	80132fc <_dtoa_r+0xae4>
 80132ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80132f0:	d0ed      	beq.n	80132ce <_dtoa_r+0xab6>
 80132f2:	9a01      	ldr	r2, [sp, #4]
 80132f4:	f109 0301 	add.w	r3, r9, #1
 80132f8:	7013      	strb	r3, [r2, #0]
 80132fa:	e73d      	b.n	8013178 <_dtoa_r+0x960>
 80132fc:	9b04      	ldr	r3, [sp, #16]
 80132fe:	9a08      	ldr	r2, [sp, #32]
 8013300:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013304:	4293      	cmp	r3, r2
 8013306:	d043      	beq.n	8013390 <_dtoa_r+0xb78>
 8013308:	4651      	mov	r1, sl
 801330a:	2300      	movs	r3, #0
 801330c:	220a      	movs	r2, #10
 801330e:	4620      	mov	r0, r4
 8013310:	f000 f9d6 	bl	80136c0 <__multadd>
 8013314:	45b8      	cmp	r8, r7
 8013316:	4682      	mov	sl, r0
 8013318:	f04f 0300 	mov.w	r3, #0
 801331c:	f04f 020a 	mov.w	r2, #10
 8013320:	4641      	mov	r1, r8
 8013322:	4620      	mov	r0, r4
 8013324:	d107      	bne.n	8013336 <_dtoa_r+0xb1e>
 8013326:	f000 f9cb 	bl	80136c0 <__multadd>
 801332a:	4680      	mov	r8, r0
 801332c:	4607      	mov	r7, r0
 801332e:	9b04      	ldr	r3, [sp, #16]
 8013330:	3301      	adds	r3, #1
 8013332:	9304      	str	r3, [sp, #16]
 8013334:	e775      	b.n	8013222 <_dtoa_r+0xa0a>
 8013336:	f000 f9c3 	bl	80136c0 <__multadd>
 801333a:	4639      	mov	r1, r7
 801333c:	4680      	mov	r8, r0
 801333e:	2300      	movs	r3, #0
 8013340:	220a      	movs	r2, #10
 8013342:	4620      	mov	r0, r4
 8013344:	f000 f9bc 	bl	80136c0 <__multadd>
 8013348:	4607      	mov	r7, r0
 801334a:	e7f0      	b.n	801332e <_dtoa_r+0xb16>
 801334c:	9b04      	ldr	r3, [sp, #16]
 801334e:	9301      	str	r3, [sp, #4]
 8013350:	9d00      	ldr	r5, [sp, #0]
 8013352:	4631      	mov	r1, r6
 8013354:	4650      	mov	r0, sl
 8013356:	f7ff f9d4 	bl	8012702 <quorem>
 801335a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801335e:	9b00      	ldr	r3, [sp, #0]
 8013360:	f805 9b01 	strb.w	r9, [r5], #1
 8013364:	1aea      	subs	r2, r5, r3
 8013366:	9b01      	ldr	r3, [sp, #4]
 8013368:	4293      	cmp	r3, r2
 801336a:	dd07      	ble.n	801337c <_dtoa_r+0xb64>
 801336c:	4651      	mov	r1, sl
 801336e:	2300      	movs	r3, #0
 8013370:	220a      	movs	r2, #10
 8013372:	4620      	mov	r0, r4
 8013374:	f000 f9a4 	bl	80136c0 <__multadd>
 8013378:	4682      	mov	sl, r0
 801337a:	e7ea      	b.n	8013352 <_dtoa_r+0xb3a>
 801337c:	9b01      	ldr	r3, [sp, #4]
 801337e:	2b00      	cmp	r3, #0
 8013380:	bfc8      	it	gt
 8013382:	461d      	movgt	r5, r3
 8013384:	9b00      	ldr	r3, [sp, #0]
 8013386:	bfd8      	it	le
 8013388:	2501      	movle	r5, #1
 801338a:	441d      	add	r5, r3
 801338c:	f04f 0800 	mov.w	r8, #0
 8013390:	4651      	mov	r1, sl
 8013392:	2201      	movs	r2, #1
 8013394:	4620      	mov	r0, r4
 8013396:	f000 fb41 	bl	8013a1c <__lshift>
 801339a:	4631      	mov	r1, r6
 801339c:	4682      	mov	sl, r0
 801339e:	f000 fba9 	bl	8013af4 <__mcmp>
 80133a2:	2800      	cmp	r0, #0
 80133a4:	dc96      	bgt.n	80132d4 <_dtoa_r+0xabc>
 80133a6:	d102      	bne.n	80133ae <_dtoa_r+0xb96>
 80133a8:	f019 0f01 	tst.w	r9, #1
 80133ac:	d192      	bne.n	80132d4 <_dtoa_r+0xabc>
 80133ae:	462b      	mov	r3, r5
 80133b0:	461d      	mov	r5, r3
 80133b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80133b6:	2a30      	cmp	r2, #48	; 0x30
 80133b8:	d0fa      	beq.n	80133b0 <_dtoa_r+0xb98>
 80133ba:	e6dd      	b.n	8013178 <_dtoa_r+0x960>
 80133bc:	9a00      	ldr	r2, [sp, #0]
 80133be:	429a      	cmp	r2, r3
 80133c0:	d189      	bne.n	80132d6 <_dtoa_r+0xabe>
 80133c2:	f10b 0b01 	add.w	fp, fp, #1
 80133c6:	2331      	movs	r3, #49	; 0x31
 80133c8:	e796      	b.n	80132f8 <_dtoa_r+0xae0>
 80133ca:	4b0a      	ldr	r3, [pc, #40]	; (80133f4 <_dtoa_r+0xbdc>)
 80133cc:	f7ff ba99 	b.w	8012902 <_dtoa_r+0xea>
 80133d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	f47f aa6d 	bne.w	80128b2 <_dtoa_r+0x9a>
 80133d8:	4b07      	ldr	r3, [pc, #28]	; (80133f8 <_dtoa_r+0xbe0>)
 80133da:	f7ff ba92 	b.w	8012902 <_dtoa_r+0xea>
 80133de:	9b01      	ldr	r3, [sp, #4]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	dcb5      	bgt.n	8013350 <_dtoa_r+0xb38>
 80133e4:	9b07      	ldr	r3, [sp, #28]
 80133e6:	2b02      	cmp	r3, #2
 80133e8:	f73f aeb1 	bgt.w	801314e <_dtoa_r+0x936>
 80133ec:	e7b0      	b.n	8013350 <_dtoa_r+0xb38>
 80133ee:	bf00      	nop
 80133f0:	080d6b0a 	.word	0x080d6b0a
 80133f4:	080d6a6a 	.word	0x080d6a6a
 80133f8:	080d6a8e 	.word	0x080d6a8e

080133fc <_free_r>:
 80133fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80133fe:	2900      	cmp	r1, #0
 8013400:	d044      	beq.n	801348c <_free_r+0x90>
 8013402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013406:	9001      	str	r0, [sp, #4]
 8013408:	2b00      	cmp	r3, #0
 801340a:	f1a1 0404 	sub.w	r4, r1, #4
 801340e:	bfb8      	it	lt
 8013410:	18e4      	addlt	r4, r4, r3
 8013412:	f000 f8e7 	bl	80135e4 <__malloc_lock>
 8013416:	4a1e      	ldr	r2, [pc, #120]	; (8013490 <_free_r+0x94>)
 8013418:	9801      	ldr	r0, [sp, #4]
 801341a:	6813      	ldr	r3, [r2, #0]
 801341c:	b933      	cbnz	r3, 801342c <_free_r+0x30>
 801341e:	6063      	str	r3, [r4, #4]
 8013420:	6014      	str	r4, [r2, #0]
 8013422:	b003      	add	sp, #12
 8013424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013428:	f000 b8e2 	b.w	80135f0 <__malloc_unlock>
 801342c:	42a3      	cmp	r3, r4
 801342e:	d908      	bls.n	8013442 <_free_r+0x46>
 8013430:	6825      	ldr	r5, [r4, #0]
 8013432:	1961      	adds	r1, r4, r5
 8013434:	428b      	cmp	r3, r1
 8013436:	bf01      	itttt	eq
 8013438:	6819      	ldreq	r1, [r3, #0]
 801343a:	685b      	ldreq	r3, [r3, #4]
 801343c:	1949      	addeq	r1, r1, r5
 801343e:	6021      	streq	r1, [r4, #0]
 8013440:	e7ed      	b.n	801341e <_free_r+0x22>
 8013442:	461a      	mov	r2, r3
 8013444:	685b      	ldr	r3, [r3, #4]
 8013446:	b10b      	cbz	r3, 801344c <_free_r+0x50>
 8013448:	42a3      	cmp	r3, r4
 801344a:	d9fa      	bls.n	8013442 <_free_r+0x46>
 801344c:	6811      	ldr	r1, [r2, #0]
 801344e:	1855      	adds	r5, r2, r1
 8013450:	42a5      	cmp	r5, r4
 8013452:	d10b      	bne.n	801346c <_free_r+0x70>
 8013454:	6824      	ldr	r4, [r4, #0]
 8013456:	4421      	add	r1, r4
 8013458:	1854      	adds	r4, r2, r1
 801345a:	42a3      	cmp	r3, r4
 801345c:	6011      	str	r1, [r2, #0]
 801345e:	d1e0      	bne.n	8013422 <_free_r+0x26>
 8013460:	681c      	ldr	r4, [r3, #0]
 8013462:	685b      	ldr	r3, [r3, #4]
 8013464:	6053      	str	r3, [r2, #4]
 8013466:	440c      	add	r4, r1
 8013468:	6014      	str	r4, [r2, #0]
 801346a:	e7da      	b.n	8013422 <_free_r+0x26>
 801346c:	d902      	bls.n	8013474 <_free_r+0x78>
 801346e:	230c      	movs	r3, #12
 8013470:	6003      	str	r3, [r0, #0]
 8013472:	e7d6      	b.n	8013422 <_free_r+0x26>
 8013474:	6825      	ldr	r5, [r4, #0]
 8013476:	1961      	adds	r1, r4, r5
 8013478:	428b      	cmp	r3, r1
 801347a:	bf04      	itt	eq
 801347c:	6819      	ldreq	r1, [r3, #0]
 801347e:	685b      	ldreq	r3, [r3, #4]
 8013480:	6063      	str	r3, [r4, #4]
 8013482:	bf04      	itt	eq
 8013484:	1949      	addeq	r1, r1, r5
 8013486:	6021      	streq	r1, [r4, #0]
 8013488:	6054      	str	r4, [r2, #4]
 801348a:	e7ca      	b.n	8013422 <_free_r+0x26>
 801348c:	b003      	add	sp, #12
 801348e:	bd30      	pop	{r4, r5, pc}
 8013490:	20038268 	.word	0x20038268

08013494 <malloc>:
 8013494:	4b02      	ldr	r3, [pc, #8]	; (80134a0 <malloc+0xc>)
 8013496:	4601      	mov	r1, r0
 8013498:	6818      	ldr	r0, [r3, #0]
 801349a:	f000 b823 	b.w	80134e4 <_malloc_r>
 801349e:	bf00      	nop
 80134a0:	20000128 	.word	0x20000128

080134a4 <sbrk_aligned>:
 80134a4:	b570      	push	{r4, r5, r6, lr}
 80134a6:	4e0e      	ldr	r6, [pc, #56]	; (80134e0 <sbrk_aligned+0x3c>)
 80134a8:	460c      	mov	r4, r1
 80134aa:	6831      	ldr	r1, [r6, #0]
 80134ac:	4605      	mov	r5, r0
 80134ae:	b911      	cbnz	r1, 80134b6 <sbrk_aligned+0x12>
 80134b0:	f000 fe40 	bl	8014134 <_sbrk_r>
 80134b4:	6030      	str	r0, [r6, #0]
 80134b6:	4621      	mov	r1, r4
 80134b8:	4628      	mov	r0, r5
 80134ba:	f000 fe3b 	bl	8014134 <_sbrk_r>
 80134be:	1c43      	adds	r3, r0, #1
 80134c0:	d00a      	beq.n	80134d8 <sbrk_aligned+0x34>
 80134c2:	1cc4      	adds	r4, r0, #3
 80134c4:	f024 0403 	bic.w	r4, r4, #3
 80134c8:	42a0      	cmp	r0, r4
 80134ca:	d007      	beq.n	80134dc <sbrk_aligned+0x38>
 80134cc:	1a21      	subs	r1, r4, r0
 80134ce:	4628      	mov	r0, r5
 80134d0:	f000 fe30 	bl	8014134 <_sbrk_r>
 80134d4:	3001      	adds	r0, #1
 80134d6:	d101      	bne.n	80134dc <sbrk_aligned+0x38>
 80134d8:	f04f 34ff 	mov.w	r4, #4294967295
 80134dc:	4620      	mov	r0, r4
 80134de:	bd70      	pop	{r4, r5, r6, pc}
 80134e0:	2003826c 	.word	0x2003826c

080134e4 <_malloc_r>:
 80134e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134e8:	1ccd      	adds	r5, r1, #3
 80134ea:	f025 0503 	bic.w	r5, r5, #3
 80134ee:	3508      	adds	r5, #8
 80134f0:	2d0c      	cmp	r5, #12
 80134f2:	bf38      	it	cc
 80134f4:	250c      	movcc	r5, #12
 80134f6:	2d00      	cmp	r5, #0
 80134f8:	4607      	mov	r7, r0
 80134fa:	db01      	blt.n	8013500 <_malloc_r+0x1c>
 80134fc:	42a9      	cmp	r1, r5
 80134fe:	d905      	bls.n	801350c <_malloc_r+0x28>
 8013500:	230c      	movs	r3, #12
 8013502:	603b      	str	r3, [r7, #0]
 8013504:	2600      	movs	r6, #0
 8013506:	4630      	mov	r0, r6
 8013508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801350c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80135e0 <_malloc_r+0xfc>
 8013510:	f000 f868 	bl	80135e4 <__malloc_lock>
 8013514:	f8d8 3000 	ldr.w	r3, [r8]
 8013518:	461c      	mov	r4, r3
 801351a:	bb5c      	cbnz	r4, 8013574 <_malloc_r+0x90>
 801351c:	4629      	mov	r1, r5
 801351e:	4638      	mov	r0, r7
 8013520:	f7ff ffc0 	bl	80134a4 <sbrk_aligned>
 8013524:	1c43      	adds	r3, r0, #1
 8013526:	4604      	mov	r4, r0
 8013528:	d155      	bne.n	80135d6 <_malloc_r+0xf2>
 801352a:	f8d8 4000 	ldr.w	r4, [r8]
 801352e:	4626      	mov	r6, r4
 8013530:	2e00      	cmp	r6, #0
 8013532:	d145      	bne.n	80135c0 <_malloc_r+0xdc>
 8013534:	2c00      	cmp	r4, #0
 8013536:	d048      	beq.n	80135ca <_malloc_r+0xe6>
 8013538:	6823      	ldr	r3, [r4, #0]
 801353a:	4631      	mov	r1, r6
 801353c:	4638      	mov	r0, r7
 801353e:	eb04 0903 	add.w	r9, r4, r3
 8013542:	f000 fdf7 	bl	8014134 <_sbrk_r>
 8013546:	4581      	cmp	r9, r0
 8013548:	d13f      	bne.n	80135ca <_malloc_r+0xe6>
 801354a:	6821      	ldr	r1, [r4, #0]
 801354c:	1a6d      	subs	r5, r5, r1
 801354e:	4629      	mov	r1, r5
 8013550:	4638      	mov	r0, r7
 8013552:	f7ff ffa7 	bl	80134a4 <sbrk_aligned>
 8013556:	3001      	adds	r0, #1
 8013558:	d037      	beq.n	80135ca <_malloc_r+0xe6>
 801355a:	6823      	ldr	r3, [r4, #0]
 801355c:	442b      	add	r3, r5
 801355e:	6023      	str	r3, [r4, #0]
 8013560:	f8d8 3000 	ldr.w	r3, [r8]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d038      	beq.n	80135da <_malloc_r+0xf6>
 8013568:	685a      	ldr	r2, [r3, #4]
 801356a:	42a2      	cmp	r2, r4
 801356c:	d12b      	bne.n	80135c6 <_malloc_r+0xe2>
 801356e:	2200      	movs	r2, #0
 8013570:	605a      	str	r2, [r3, #4]
 8013572:	e00f      	b.n	8013594 <_malloc_r+0xb0>
 8013574:	6822      	ldr	r2, [r4, #0]
 8013576:	1b52      	subs	r2, r2, r5
 8013578:	d41f      	bmi.n	80135ba <_malloc_r+0xd6>
 801357a:	2a0b      	cmp	r2, #11
 801357c:	d917      	bls.n	80135ae <_malloc_r+0xca>
 801357e:	1961      	adds	r1, r4, r5
 8013580:	42a3      	cmp	r3, r4
 8013582:	6025      	str	r5, [r4, #0]
 8013584:	bf18      	it	ne
 8013586:	6059      	strne	r1, [r3, #4]
 8013588:	6863      	ldr	r3, [r4, #4]
 801358a:	bf08      	it	eq
 801358c:	f8c8 1000 	streq.w	r1, [r8]
 8013590:	5162      	str	r2, [r4, r5]
 8013592:	604b      	str	r3, [r1, #4]
 8013594:	4638      	mov	r0, r7
 8013596:	f104 060b 	add.w	r6, r4, #11
 801359a:	f000 f829 	bl	80135f0 <__malloc_unlock>
 801359e:	f026 0607 	bic.w	r6, r6, #7
 80135a2:	1d23      	adds	r3, r4, #4
 80135a4:	1af2      	subs	r2, r6, r3
 80135a6:	d0ae      	beq.n	8013506 <_malloc_r+0x22>
 80135a8:	1b9b      	subs	r3, r3, r6
 80135aa:	50a3      	str	r3, [r4, r2]
 80135ac:	e7ab      	b.n	8013506 <_malloc_r+0x22>
 80135ae:	42a3      	cmp	r3, r4
 80135b0:	6862      	ldr	r2, [r4, #4]
 80135b2:	d1dd      	bne.n	8013570 <_malloc_r+0x8c>
 80135b4:	f8c8 2000 	str.w	r2, [r8]
 80135b8:	e7ec      	b.n	8013594 <_malloc_r+0xb0>
 80135ba:	4623      	mov	r3, r4
 80135bc:	6864      	ldr	r4, [r4, #4]
 80135be:	e7ac      	b.n	801351a <_malloc_r+0x36>
 80135c0:	4634      	mov	r4, r6
 80135c2:	6876      	ldr	r6, [r6, #4]
 80135c4:	e7b4      	b.n	8013530 <_malloc_r+0x4c>
 80135c6:	4613      	mov	r3, r2
 80135c8:	e7cc      	b.n	8013564 <_malloc_r+0x80>
 80135ca:	230c      	movs	r3, #12
 80135cc:	603b      	str	r3, [r7, #0]
 80135ce:	4638      	mov	r0, r7
 80135d0:	f000 f80e 	bl	80135f0 <__malloc_unlock>
 80135d4:	e797      	b.n	8013506 <_malloc_r+0x22>
 80135d6:	6025      	str	r5, [r4, #0]
 80135d8:	e7dc      	b.n	8013594 <_malloc_r+0xb0>
 80135da:	605b      	str	r3, [r3, #4]
 80135dc:	deff      	udf	#255	; 0xff
 80135de:	bf00      	nop
 80135e0:	20038268 	.word	0x20038268

080135e4 <__malloc_lock>:
 80135e4:	4801      	ldr	r0, [pc, #4]	; (80135ec <__malloc_lock+0x8>)
 80135e6:	f7ff b88a 	b.w	80126fe <__retarget_lock_acquire_recursive>
 80135ea:	bf00      	nop
 80135ec:	20038264 	.word	0x20038264

080135f0 <__malloc_unlock>:
 80135f0:	4801      	ldr	r0, [pc, #4]	; (80135f8 <__malloc_unlock+0x8>)
 80135f2:	f7ff b885 	b.w	8012700 <__retarget_lock_release_recursive>
 80135f6:	bf00      	nop
 80135f8:	20038264 	.word	0x20038264

080135fc <_Balloc>:
 80135fc:	b570      	push	{r4, r5, r6, lr}
 80135fe:	69c6      	ldr	r6, [r0, #28]
 8013600:	4604      	mov	r4, r0
 8013602:	460d      	mov	r5, r1
 8013604:	b976      	cbnz	r6, 8013624 <_Balloc+0x28>
 8013606:	2010      	movs	r0, #16
 8013608:	f7ff ff44 	bl	8013494 <malloc>
 801360c:	4602      	mov	r2, r0
 801360e:	61e0      	str	r0, [r4, #28]
 8013610:	b920      	cbnz	r0, 801361c <_Balloc+0x20>
 8013612:	4b18      	ldr	r3, [pc, #96]	; (8013674 <_Balloc+0x78>)
 8013614:	4818      	ldr	r0, [pc, #96]	; (8013678 <_Balloc+0x7c>)
 8013616:	216b      	movs	r1, #107	; 0x6b
 8013618:	f000 fdaa 	bl	8014170 <__assert_func>
 801361c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013620:	6006      	str	r6, [r0, #0]
 8013622:	60c6      	str	r6, [r0, #12]
 8013624:	69e6      	ldr	r6, [r4, #28]
 8013626:	68f3      	ldr	r3, [r6, #12]
 8013628:	b183      	cbz	r3, 801364c <_Balloc+0x50>
 801362a:	69e3      	ldr	r3, [r4, #28]
 801362c:	68db      	ldr	r3, [r3, #12]
 801362e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013632:	b9b8      	cbnz	r0, 8013664 <_Balloc+0x68>
 8013634:	2101      	movs	r1, #1
 8013636:	fa01 f605 	lsl.w	r6, r1, r5
 801363a:	1d72      	adds	r2, r6, #5
 801363c:	0092      	lsls	r2, r2, #2
 801363e:	4620      	mov	r0, r4
 8013640:	f000 fdb4 	bl	80141ac <_calloc_r>
 8013644:	b160      	cbz	r0, 8013660 <_Balloc+0x64>
 8013646:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801364a:	e00e      	b.n	801366a <_Balloc+0x6e>
 801364c:	2221      	movs	r2, #33	; 0x21
 801364e:	2104      	movs	r1, #4
 8013650:	4620      	mov	r0, r4
 8013652:	f000 fdab 	bl	80141ac <_calloc_r>
 8013656:	69e3      	ldr	r3, [r4, #28]
 8013658:	60f0      	str	r0, [r6, #12]
 801365a:	68db      	ldr	r3, [r3, #12]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d1e4      	bne.n	801362a <_Balloc+0x2e>
 8013660:	2000      	movs	r0, #0
 8013662:	bd70      	pop	{r4, r5, r6, pc}
 8013664:	6802      	ldr	r2, [r0, #0]
 8013666:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801366a:	2300      	movs	r3, #0
 801366c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013670:	e7f7      	b.n	8013662 <_Balloc+0x66>
 8013672:	bf00      	nop
 8013674:	080d6a9b 	.word	0x080d6a9b
 8013678:	080d6b1b 	.word	0x080d6b1b

0801367c <_Bfree>:
 801367c:	b570      	push	{r4, r5, r6, lr}
 801367e:	69c6      	ldr	r6, [r0, #28]
 8013680:	4605      	mov	r5, r0
 8013682:	460c      	mov	r4, r1
 8013684:	b976      	cbnz	r6, 80136a4 <_Bfree+0x28>
 8013686:	2010      	movs	r0, #16
 8013688:	f7ff ff04 	bl	8013494 <malloc>
 801368c:	4602      	mov	r2, r0
 801368e:	61e8      	str	r0, [r5, #28]
 8013690:	b920      	cbnz	r0, 801369c <_Bfree+0x20>
 8013692:	4b09      	ldr	r3, [pc, #36]	; (80136b8 <_Bfree+0x3c>)
 8013694:	4809      	ldr	r0, [pc, #36]	; (80136bc <_Bfree+0x40>)
 8013696:	218f      	movs	r1, #143	; 0x8f
 8013698:	f000 fd6a 	bl	8014170 <__assert_func>
 801369c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80136a0:	6006      	str	r6, [r0, #0]
 80136a2:	60c6      	str	r6, [r0, #12]
 80136a4:	b13c      	cbz	r4, 80136b6 <_Bfree+0x3a>
 80136a6:	69eb      	ldr	r3, [r5, #28]
 80136a8:	6862      	ldr	r2, [r4, #4]
 80136aa:	68db      	ldr	r3, [r3, #12]
 80136ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80136b0:	6021      	str	r1, [r4, #0]
 80136b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80136b6:	bd70      	pop	{r4, r5, r6, pc}
 80136b8:	080d6a9b 	.word	0x080d6a9b
 80136bc:	080d6b1b 	.word	0x080d6b1b

080136c0 <__multadd>:
 80136c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136c4:	690d      	ldr	r5, [r1, #16]
 80136c6:	4607      	mov	r7, r0
 80136c8:	460c      	mov	r4, r1
 80136ca:	461e      	mov	r6, r3
 80136cc:	f101 0c14 	add.w	ip, r1, #20
 80136d0:	2000      	movs	r0, #0
 80136d2:	f8dc 3000 	ldr.w	r3, [ip]
 80136d6:	b299      	uxth	r1, r3
 80136d8:	fb02 6101 	mla	r1, r2, r1, r6
 80136dc:	0c1e      	lsrs	r6, r3, #16
 80136de:	0c0b      	lsrs	r3, r1, #16
 80136e0:	fb02 3306 	mla	r3, r2, r6, r3
 80136e4:	b289      	uxth	r1, r1
 80136e6:	3001      	adds	r0, #1
 80136e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80136ec:	4285      	cmp	r5, r0
 80136ee:	f84c 1b04 	str.w	r1, [ip], #4
 80136f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80136f6:	dcec      	bgt.n	80136d2 <__multadd+0x12>
 80136f8:	b30e      	cbz	r6, 801373e <__multadd+0x7e>
 80136fa:	68a3      	ldr	r3, [r4, #8]
 80136fc:	42ab      	cmp	r3, r5
 80136fe:	dc19      	bgt.n	8013734 <__multadd+0x74>
 8013700:	6861      	ldr	r1, [r4, #4]
 8013702:	4638      	mov	r0, r7
 8013704:	3101      	adds	r1, #1
 8013706:	f7ff ff79 	bl	80135fc <_Balloc>
 801370a:	4680      	mov	r8, r0
 801370c:	b928      	cbnz	r0, 801371a <__multadd+0x5a>
 801370e:	4602      	mov	r2, r0
 8013710:	4b0c      	ldr	r3, [pc, #48]	; (8013744 <__multadd+0x84>)
 8013712:	480d      	ldr	r0, [pc, #52]	; (8013748 <__multadd+0x88>)
 8013714:	21ba      	movs	r1, #186	; 0xba
 8013716:	f000 fd2b 	bl	8014170 <__assert_func>
 801371a:	6922      	ldr	r2, [r4, #16]
 801371c:	3202      	adds	r2, #2
 801371e:	f104 010c 	add.w	r1, r4, #12
 8013722:	0092      	lsls	r2, r2, #2
 8013724:	300c      	adds	r0, #12
 8013726:	f000 fd15 	bl	8014154 <memcpy>
 801372a:	4621      	mov	r1, r4
 801372c:	4638      	mov	r0, r7
 801372e:	f7ff ffa5 	bl	801367c <_Bfree>
 8013732:	4644      	mov	r4, r8
 8013734:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013738:	3501      	adds	r5, #1
 801373a:	615e      	str	r6, [r3, #20]
 801373c:	6125      	str	r5, [r4, #16]
 801373e:	4620      	mov	r0, r4
 8013740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013744:	080d6b0a 	.word	0x080d6b0a
 8013748:	080d6b1b 	.word	0x080d6b1b

0801374c <__hi0bits>:
 801374c:	0c03      	lsrs	r3, r0, #16
 801374e:	041b      	lsls	r3, r3, #16
 8013750:	b9d3      	cbnz	r3, 8013788 <__hi0bits+0x3c>
 8013752:	0400      	lsls	r0, r0, #16
 8013754:	2310      	movs	r3, #16
 8013756:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801375a:	bf04      	itt	eq
 801375c:	0200      	lsleq	r0, r0, #8
 801375e:	3308      	addeq	r3, #8
 8013760:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013764:	bf04      	itt	eq
 8013766:	0100      	lsleq	r0, r0, #4
 8013768:	3304      	addeq	r3, #4
 801376a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801376e:	bf04      	itt	eq
 8013770:	0080      	lsleq	r0, r0, #2
 8013772:	3302      	addeq	r3, #2
 8013774:	2800      	cmp	r0, #0
 8013776:	db05      	blt.n	8013784 <__hi0bits+0x38>
 8013778:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801377c:	f103 0301 	add.w	r3, r3, #1
 8013780:	bf08      	it	eq
 8013782:	2320      	moveq	r3, #32
 8013784:	4618      	mov	r0, r3
 8013786:	4770      	bx	lr
 8013788:	2300      	movs	r3, #0
 801378a:	e7e4      	b.n	8013756 <__hi0bits+0xa>

0801378c <__lo0bits>:
 801378c:	6803      	ldr	r3, [r0, #0]
 801378e:	f013 0207 	ands.w	r2, r3, #7
 8013792:	d00c      	beq.n	80137ae <__lo0bits+0x22>
 8013794:	07d9      	lsls	r1, r3, #31
 8013796:	d422      	bmi.n	80137de <__lo0bits+0x52>
 8013798:	079a      	lsls	r2, r3, #30
 801379a:	bf49      	itett	mi
 801379c:	085b      	lsrmi	r3, r3, #1
 801379e:	089b      	lsrpl	r3, r3, #2
 80137a0:	6003      	strmi	r3, [r0, #0]
 80137a2:	2201      	movmi	r2, #1
 80137a4:	bf5c      	itt	pl
 80137a6:	6003      	strpl	r3, [r0, #0]
 80137a8:	2202      	movpl	r2, #2
 80137aa:	4610      	mov	r0, r2
 80137ac:	4770      	bx	lr
 80137ae:	b299      	uxth	r1, r3
 80137b0:	b909      	cbnz	r1, 80137b6 <__lo0bits+0x2a>
 80137b2:	0c1b      	lsrs	r3, r3, #16
 80137b4:	2210      	movs	r2, #16
 80137b6:	b2d9      	uxtb	r1, r3
 80137b8:	b909      	cbnz	r1, 80137be <__lo0bits+0x32>
 80137ba:	3208      	adds	r2, #8
 80137bc:	0a1b      	lsrs	r3, r3, #8
 80137be:	0719      	lsls	r1, r3, #28
 80137c0:	bf04      	itt	eq
 80137c2:	091b      	lsreq	r3, r3, #4
 80137c4:	3204      	addeq	r2, #4
 80137c6:	0799      	lsls	r1, r3, #30
 80137c8:	bf04      	itt	eq
 80137ca:	089b      	lsreq	r3, r3, #2
 80137cc:	3202      	addeq	r2, #2
 80137ce:	07d9      	lsls	r1, r3, #31
 80137d0:	d403      	bmi.n	80137da <__lo0bits+0x4e>
 80137d2:	085b      	lsrs	r3, r3, #1
 80137d4:	f102 0201 	add.w	r2, r2, #1
 80137d8:	d003      	beq.n	80137e2 <__lo0bits+0x56>
 80137da:	6003      	str	r3, [r0, #0]
 80137dc:	e7e5      	b.n	80137aa <__lo0bits+0x1e>
 80137de:	2200      	movs	r2, #0
 80137e0:	e7e3      	b.n	80137aa <__lo0bits+0x1e>
 80137e2:	2220      	movs	r2, #32
 80137e4:	e7e1      	b.n	80137aa <__lo0bits+0x1e>
	...

080137e8 <__i2b>:
 80137e8:	b510      	push	{r4, lr}
 80137ea:	460c      	mov	r4, r1
 80137ec:	2101      	movs	r1, #1
 80137ee:	f7ff ff05 	bl	80135fc <_Balloc>
 80137f2:	4602      	mov	r2, r0
 80137f4:	b928      	cbnz	r0, 8013802 <__i2b+0x1a>
 80137f6:	4b05      	ldr	r3, [pc, #20]	; (801380c <__i2b+0x24>)
 80137f8:	4805      	ldr	r0, [pc, #20]	; (8013810 <__i2b+0x28>)
 80137fa:	f240 1145 	movw	r1, #325	; 0x145
 80137fe:	f000 fcb7 	bl	8014170 <__assert_func>
 8013802:	2301      	movs	r3, #1
 8013804:	6144      	str	r4, [r0, #20]
 8013806:	6103      	str	r3, [r0, #16]
 8013808:	bd10      	pop	{r4, pc}
 801380a:	bf00      	nop
 801380c:	080d6b0a 	.word	0x080d6b0a
 8013810:	080d6b1b 	.word	0x080d6b1b

08013814 <__multiply>:
 8013814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013818:	4691      	mov	r9, r2
 801381a:	690a      	ldr	r2, [r1, #16]
 801381c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013820:	429a      	cmp	r2, r3
 8013822:	bfb8      	it	lt
 8013824:	460b      	movlt	r3, r1
 8013826:	460c      	mov	r4, r1
 8013828:	bfbc      	itt	lt
 801382a:	464c      	movlt	r4, r9
 801382c:	4699      	movlt	r9, r3
 801382e:	6927      	ldr	r7, [r4, #16]
 8013830:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013834:	68a3      	ldr	r3, [r4, #8]
 8013836:	6861      	ldr	r1, [r4, #4]
 8013838:	eb07 060a 	add.w	r6, r7, sl
 801383c:	42b3      	cmp	r3, r6
 801383e:	b085      	sub	sp, #20
 8013840:	bfb8      	it	lt
 8013842:	3101      	addlt	r1, #1
 8013844:	f7ff feda 	bl	80135fc <_Balloc>
 8013848:	b930      	cbnz	r0, 8013858 <__multiply+0x44>
 801384a:	4602      	mov	r2, r0
 801384c:	4b44      	ldr	r3, [pc, #272]	; (8013960 <__multiply+0x14c>)
 801384e:	4845      	ldr	r0, [pc, #276]	; (8013964 <__multiply+0x150>)
 8013850:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8013854:	f000 fc8c 	bl	8014170 <__assert_func>
 8013858:	f100 0514 	add.w	r5, r0, #20
 801385c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013860:	462b      	mov	r3, r5
 8013862:	2200      	movs	r2, #0
 8013864:	4543      	cmp	r3, r8
 8013866:	d321      	bcc.n	80138ac <__multiply+0x98>
 8013868:	f104 0314 	add.w	r3, r4, #20
 801386c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013870:	f109 0314 	add.w	r3, r9, #20
 8013874:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013878:	9202      	str	r2, [sp, #8]
 801387a:	1b3a      	subs	r2, r7, r4
 801387c:	3a15      	subs	r2, #21
 801387e:	f022 0203 	bic.w	r2, r2, #3
 8013882:	3204      	adds	r2, #4
 8013884:	f104 0115 	add.w	r1, r4, #21
 8013888:	428f      	cmp	r7, r1
 801388a:	bf38      	it	cc
 801388c:	2204      	movcc	r2, #4
 801388e:	9201      	str	r2, [sp, #4]
 8013890:	9a02      	ldr	r2, [sp, #8]
 8013892:	9303      	str	r3, [sp, #12]
 8013894:	429a      	cmp	r2, r3
 8013896:	d80c      	bhi.n	80138b2 <__multiply+0x9e>
 8013898:	2e00      	cmp	r6, #0
 801389a:	dd03      	ble.n	80138a4 <__multiply+0x90>
 801389c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d05b      	beq.n	801395c <__multiply+0x148>
 80138a4:	6106      	str	r6, [r0, #16]
 80138a6:	b005      	add	sp, #20
 80138a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ac:	f843 2b04 	str.w	r2, [r3], #4
 80138b0:	e7d8      	b.n	8013864 <__multiply+0x50>
 80138b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80138b6:	f1ba 0f00 	cmp.w	sl, #0
 80138ba:	d024      	beq.n	8013906 <__multiply+0xf2>
 80138bc:	f104 0e14 	add.w	lr, r4, #20
 80138c0:	46a9      	mov	r9, r5
 80138c2:	f04f 0c00 	mov.w	ip, #0
 80138c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80138ca:	f8d9 1000 	ldr.w	r1, [r9]
 80138ce:	fa1f fb82 	uxth.w	fp, r2
 80138d2:	b289      	uxth	r1, r1
 80138d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80138d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80138dc:	f8d9 2000 	ldr.w	r2, [r9]
 80138e0:	4461      	add	r1, ip
 80138e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80138e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80138ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80138ee:	b289      	uxth	r1, r1
 80138f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80138f4:	4577      	cmp	r7, lr
 80138f6:	f849 1b04 	str.w	r1, [r9], #4
 80138fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80138fe:	d8e2      	bhi.n	80138c6 <__multiply+0xb2>
 8013900:	9a01      	ldr	r2, [sp, #4]
 8013902:	f845 c002 	str.w	ip, [r5, r2]
 8013906:	9a03      	ldr	r2, [sp, #12]
 8013908:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801390c:	3304      	adds	r3, #4
 801390e:	f1b9 0f00 	cmp.w	r9, #0
 8013912:	d021      	beq.n	8013958 <__multiply+0x144>
 8013914:	6829      	ldr	r1, [r5, #0]
 8013916:	f104 0c14 	add.w	ip, r4, #20
 801391a:	46ae      	mov	lr, r5
 801391c:	f04f 0a00 	mov.w	sl, #0
 8013920:	f8bc b000 	ldrh.w	fp, [ip]
 8013924:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013928:	fb09 220b 	mla	r2, r9, fp, r2
 801392c:	4452      	add	r2, sl
 801392e:	b289      	uxth	r1, r1
 8013930:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013934:	f84e 1b04 	str.w	r1, [lr], #4
 8013938:	f85c 1b04 	ldr.w	r1, [ip], #4
 801393c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013940:	f8be 1000 	ldrh.w	r1, [lr]
 8013944:	fb09 110a 	mla	r1, r9, sl, r1
 8013948:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801394c:	4567      	cmp	r7, ip
 801394e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013952:	d8e5      	bhi.n	8013920 <__multiply+0x10c>
 8013954:	9a01      	ldr	r2, [sp, #4]
 8013956:	50a9      	str	r1, [r5, r2]
 8013958:	3504      	adds	r5, #4
 801395a:	e799      	b.n	8013890 <__multiply+0x7c>
 801395c:	3e01      	subs	r6, #1
 801395e:	e79b      	b.n	8013898 <__multiply+0x84>
 8013960:	080d6b0a 	.word	0x080d6b0a
 8013964:	080d6b1b 	.word	0x080d6b1b

08013968 <__pow5mult>:
 8013968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801396c:	4615      	mov	r5, r2
 801396e:	f012 0203 	ands.w	r2, r2, #3
 8013972:	4606      	mov	r6, r0
 8013974:	460f      	mov	r7, r1
 8013976:	d007      	beq.n	8013988 <__pow5mult+0x20>
 8013978:	4c25      	ldr	r4, [pc, #148]	; (8013a10 <__pow5mult+0xa8>)
 801397a:	3a01      	subs	r2, #1
 801397c:	2300      	movs	r3, #0
 801397e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013982:	f7ff fe9d 	bl	80136c0 <__multadd>
 8013986:	4607      	mov	r7, r0
 8013988:	10ad      	asrs	r5, r5, #2
 801398a:	d03d      	beq.n	8013a08 <__pow5mult+0xa0>
 801398c:	69f4      	ldr	r4, [r6, #28]
 801398e:	b97c      	cbnz	r4, 80139b0 <__pow5mult+0x48>
 8013990:	2010      	movs	r0, #16
 8013992:	f7ff fd7f 	bl	8013494 <malloc>
 8013996:	4602      	mov	r2, r0
 8013998:	61f0      	str	r0, [r6, #28]
 801399a:	b928      	cbnz	r0, 80139a8 <__pow5mult+0x40>
 801399c:	4b1d      	ldr	r3, [pc, #116]	; (8013a14 <__pow5mult+0xac>)
 801399e:	481e      	ldr	r0, [pc, #120]	; (8013a18 <__pow5mult+0xb0>)
 80139a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80139a4:	f000 fbe4 	bl	8014170 <__assert_func>
 80139a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80139ac:	6004      	str	r4, [r0, #0]
 80139ae:	60c4      	str	r4, [r0, #12]
 80139b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80139b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80139b8:	b94c      	cbnz	r4, 80139ce <__pow5mult+0x66>
 80139ba:	f240 2171 	movw	r1, #625	; 0x271
 80139be:	4630      	mov	r0, r6
 80139c0:	f7ff ff12 	bl	80137e8 <__i2b>
 80139c4:	2300      	movs	r3, #0
 80139c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80139ca:	4604      	mov	r4, r0
 80139cc:	6003      	str	r3, [r0, #0]
 80139ce:	f04f 0900 	mov.w	r9, #0
 80139d2:	07eb      	lsls	r3, r5, #31
 80139d4:	d50a      	bpl.n	80139ec <__pow5mult+0x84>
 80139d6:	4639      	mov	r1, r7
 80139d8:	4622      	mov	r2, r4
 80139da:	4630      	mov	r0, r6
 80139dc:	f7ff ff1a 	bl	8013814 <__multiply>
 80139e0:	4639      	mov	r1, r7
 80139e2:	4680      	mov	r8, r0
 80139e4:	4630      	mov	r0, r6
 80139e6:	f7ff fe49 	bl	801367c <_Bfree>
 80139ea:	4647      	mov	r7, r8
 80139ec:	106d      	asrs	r5, r5, #1
 80139ee:	d00b      	beq.n	8013a08 <__pow5mult+0xa0>
 80139f0:	6820      	ldr	r0, [r4, #0]
 80139f2:	b938      	cbnz	r0, 8013a04 <__pow5mult+0x9c>
 80139f4:	4622      	mov	r2, r4
 80139f6:	4621      	mov	r1, r4
 80139f8:	4630      	mov	r0, r6
 80139fa:	f7ff ff0b 	bl	8013814 <__multiply>
 80139fe:	6020      	str	r0, [r4, #0]
 8013a00:	f8c0 9000 	str.w	r9, [r0]
 8013a04:	4604      	mov	r4, r0
 8013a06:	e7e4      	b.n	80139d2 <__pow5mult+0x6a>
 8013a08:	4638      	mov	r0, r7
 8013a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a0e:	bf00      	nop
 8013a10:	080d6c68 	.word	0x080d6c68
 8013a14:	080d6a9b 	.word	0x080d6a9b
 8013a18:	080d6b1b 	.word	0x080d6b1b

08013a1c <__lshift>:
 8013a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a20:	460c      	mov	r4, r1
 8013a22:	6849      	ldr	r1, [r1, #4]
 8013a24:	6923      	ldr	r3, [r4, #16]
 8013a26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013a2a:	68a3      	ldr	r3, [r4, #8]
 8013a2c:	4607      	mov	r7, r0
 8013a2e:	4691      	mov	r9, r2
 8013a30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013a34:	f108 0601 	add.w	r6, r8, #1
 8013a38:	42b3      	cmp	r3, r6
 8013a3a:	db0b      	blt.n	8013a54 <__lshift+0x38>
 8013a3c:	4638      	mov	r0, r7
 8013a3e:	f7ff fddd 	bl	80135fc <_Balloc>
 8013a42:	4605      	mov	r5, r0
 8013a44:	b948      	cbnz	r0, 8013a5a <__lshift+0x3e>
 8013a46:	4602      	mov	r2, r0
 8013a48:	4b28      	ldr	r3, [pc, #160]	; (8013aec <__lshift+0xd0>)
 8013a4a:	4829      	ldr	r0, [pc, #164]	; (8013af0 <__lshift+0xd4>)
 8013a4c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013a50:	f000 fb8e 	bl	8014170 <__assert_func>
 8013a54:	3101      	adds	r1, #1
 8013a56:	005b      	lsls	r3, r3, #1
 8013a58:	e7ee      	b.n	8013a38 <__lshift+0x1c>
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	f100 0114 	add.w	r1, r0, #20
 8013a60:	f100 0210 	add.w	r2, r0, #16
 8013a64:	4618      	mov	r0, r3
 8013a66:	4553      	cmp	r3, sl
 8013a68:	db33      	blt.n	8013ad2 <__lshift+0xb6>
 8013a6a:	6920      	ldr	r0, [r4, #16]
 8013a6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013a70:	f104 0314 	add.w	r3, r4, #20
 8013a74:	f019 091f 	ands.w	r9, r9, #31
 8013a78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013a7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013a80:	d02b      	beq.n	8013ada <__lshift+0xbe>
 8013a82:	f1c9 0e20 	rsb	lr, r9, #32
 8013a86:	468a      	mov	sl, r1
 8013a88:	2200      	movs	r2, #0
 8013a8a:	6818      	ldr	r0, [r3, #0]
 8013a8c:	fa00 f009 	lsl.w	r0, r0, r9
 8013a90:	4310      	orrs	r0, r2
 8013a92:	f84a 0b04 	str.w	r0, [sl], #4
 8013a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a9a:	459c      	cmp	ip, r3
 8013a9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013aa0:	d8f3      	bhi.n	8013a8a <__lshift+0x6e>
 8013aa2:	ebac 0304 	sub.w	r3, ip, r4
 8013aa6:	3b15      	subs	r3, #21
 8013aa8:	f023 0303 	bic.w	r3, r3, #3
 8013aac:	3304      	adds	r3, #4
 8013aae:	f104 0015 	add.w	r0, r4, #21
 8013ab2:	4584      	cmp	ip, r0
 8013ab4:	bf38      	it	cc
 8013ab6:	2304      	movcc	r3, #4
 8013ab8:	50ca      	str	r2, [r1, r3]
 8013aba:	b10a      	cbz	r2, 8013ac0 <__lshift+0xa4>
 8013abc:	f108 0602 	add.w	r6, r8, #2
 8013ac0:	3e01      	subs	r6, #1
 8013ac2:	4638      	mov	r0, r7
 8013ac4:	612e      	str	r6, [r5, #16]
 8013ac6:	4621      	mov	r1, r4
 8013ac8:	f7ff fdd8 	bl	801367c <_Bfree>
 8013acc:	4628      	mov	r0, r5
 8013ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ad2:	f842 0f04 	str.w	r0, [r2, #4]!
 8013ad6:	3301      	adds	r3, #1
 8013ad8:	e7c5      	b.n	8013a66 <__lshift+0x4a>
 8013ada:	3904      	subs	r1, #4
 8013adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ae0:	f841 2f04 	str.w	r2, [r1, #4]!
 8013ae4:	459c      	cmp	ip, r3
 8013ae6:	d8f9      	bhi.n	8013adc <__lshift+0xc0>
 8013ae8:	e7ea      	b.n	8013ac0 <__lshift+0xa4>
 8013aea:	bf00      	nop
 8013aec:	080d6b0a 	.word	0x080d6b0a
 8013af0:	080d6b1b 	.word	0x080d6b1b

08013af4 <__mcmp>:
 8013af4:	b530      	push	{r4, r5, lr}
 8013af6:	6902      	ldr	r2, [r0, #16]
 8013af8:	690c      	ldr	r4, [r1, #16]
 8013afa:	1b12      	subs	r2, r2, r4
 8013afc:	d10e      	bne.n	8013b1c <__mcmp+0x28>
 8013afe:	f100 0314 	add.w	r3, r0, #20
 8013b02:	3114      	adds	r1, #20
 8013b04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013b08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013b0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013b10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013b14:	42a5      	cmp	r5, r4
 8013b16:	d003      	beq.n	8013b20 <__mcmp+0x2c>
 8013b18:	d305      	bcc.n	8013b26 <__mcmp+0x32>
 8013b1a:	2201      	movs	r2, #1
 8013b1c:	4610      	mov	r0, r2
 8013b1e:	bd30      	pop	{r4, r5, pc}
 8013b20:	4283      	cmp	r3, r0
 8013b22:	d3f3      	bcc.n	8013b0c <__mcmp+0x18>
 8013b24:	e7fa      	b.n	8013b1c <__mcmp+0x28>
 8013b26:	f04f 32ff 	mov.w	r2, #4294967295
 8013b2a:	e7f7      	b.n	8013b1c <__mcmp+0x28>

08013b2c <__mdiff>:
 8013b2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b30:	460c      	mov	r4, r1
 8013b32:	4606      	mov	r6, r0
 8013b34:	4611      	mov	r1, r2
 8013b36:	4620      	mov	r0, r4
 8013b38:	4690      	mov	r8, r2
 8013b3a:	f7ff ffdb 	bl	8013af4 <__mcmp>
 8013b3e:	1e05      	subs	r5, r0, #0
 8013b40:	d110      	bne.n	8013b64 <__mdiff+0x38>
 8013b42:	4629      	mov	r1, r5
 8013b44:	4630      	mov	r0, r6
 8013b46:	f7ff fd59 	bl	80135fc <_Balloc>
 8013b4a:	b930      	cbnz	r0, 8013b5a <__mdiff+0x2e>
 8013b4c:	4b3a      	ldr	r3, [pc, #232]	; (8013c38 <__mdiff+0x10c>)
 8013b4e:	4602      	mov	r2, r0
 8013b50:	f240 2137 	movw	r1, #567	; 0x237
 8013b54:	4839      	ldr	r0, [pc, #228]	; (8013c3c <__mdiff+0x110>)
 8013b56:	f000 fb0b 	bl	8014170 <__assert_func>
 8013b5a:	2301      	movs	r3, #1
 8013b5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b64:	bfa4      	itt	ge
 8013b66:	4643      	movge	r3, r8
 8013b68:	46a0      	movge	r8, r4
 8013b6a:	4630      	mov	r0, r6
 8013b6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013b70:	bfa6      	itte	ge
 8013b72:	461c      	movge	r4, r3
 8013b74:	2500      	movge	r5, #0
 8013b76:	2501      	movlt	r5, #1
 8013b78:	f7ff fd40 	bl	80135fc <_Balloc>
 8013b7c:	b920      	cbnz	r0, 8013b88 <__mdiff+0x5c>
 8013b7e:	4b2e      	ldr	r3, [pc, #184]	; (8013c38 <__mdiff+0x10c>)
 8013b80:	4602      	mov	r2, r0
 8013b82:	f240 2145 	movw	r1, #581	; 0x245
 8013b86:	e7e5      	b.n	8013b54 <__mdiff+0x28>
 8013b88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013b8c:	6926      	ldr	r6, [r4, #16]
 8013b8e:	60c5      	str	r5, [r0, #12]
 8013b90:	f104 0914 	add.w	r9, r4, #20
 8013b94:	f108 0514 	add.w	r5, r8, #20
 8013b98:	f100 0e14 	add.w	lr, r0, #20
 8013b9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013ba0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013ba4:	f108 0210 	add.w	r2, r8, #16
 8013ba8:	46f2      	mov	sl, lr
 8013baa:	2100      	movs	r1, #0
 8013bac:	f859 3b04 	ldr.w	r3, [r9], #4
 8013bb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013bb4:	fa11 f88b 	uxtah	r8, r1, fp
 8013bb8:	b299      	uxth	r1, r3
 8013bba:	0c1b      	lsrs	r3, r3, #16
 8013bbc:	eba8 0801 	sub.w	r8, r8, r1
 8013bc0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013bc4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013bc8:	fa1f f888 	uxth.w	r8, r8
 8013bcc:	1419      	asrs	r1, r3, #16
 8013bce:	454e      	cmp	r6, r9
 8013bd0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013bd4:	f84a 3b04 	str.w	r3, [sl], #4
 8013bd8:	d8e8      	bhi.n	8013bac <__mdiff+0x80>
 8013bda:	1b33      	subs	r3, r6, r4
 8013bdc:	3b15      	subs	r3, #21
 8013bde:	f023 0303 	bic.w	r3, r3, #3
 8013be2:	3304      	adds	r3, #4
 8013be4:	3415      	adds	r4, #21
 8013be6:	42a6      	cmp	r6, r4
 8013be8:	bf38      	it	cc
 8013bea:	2304      	movcc	r3, #4
 8013bec:	441d      	add	r5, r3
 8013bee:	4473      	add	r3, lr
 8013bf0:	469e      	mov	lr, r3
 8013bf2:	462e      	mov	r6, r5
 8013bf4:	4566      	cmp	r6, ip
 8013bf6:	d30e      	bcc.n	8013c16 <__mdiff+0xea>
 8013bf8:	f10c 0203 	add.w	r2, ip, #3
 8013bfc:	1b52      	subs	r2, r2, r5
 8013bfe:	f022 0203 	bic.w	r2, r2, #3
 8013c02:	3d03      	subs	r5, #3
 8013c04:	45ac      	cmp	ip, r5
 8013c06:	bf38      	it	cc
 8013c08:	2200      	movcc	r2, #0
 8013c0a:	4413      	add	r3, r2
 8013c0c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013c10:	b17a      	cbz	r2, 8013c32 <__mdiff+0x106>
 8013c12:	6107      	str	r7, [r0, #16]
 8013c14:	e7a4      	b.n	8013b60 <__mdiff+0x34>
 8013c16:	f856 8b04 	ldr.w	r8, [r6], #4
 8013c1a:	fa11 f288 	uxtah	r2, r1, r8
 8013c1e:	1414      	asrs	r4, r2, #16
 8013c20:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013c24:	b292      	uxth	r2, r2
 8013c26:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013c2a:	f84e 2b04 	str.w	r2, [lr], #4
 8013c2e:	1421      	asrs	r1, r4, #16
 8013c30:	e7e0      	b.n	8013bf4 <__mdiff+0xc8>
 8013c32:	3f01      	subs	r7, #1
 8013c34:	e7ea      	b.n	8013c0c <__mdiff+0xe0>
 8013c36:	bf00      	nop
 8013c38:	080d6b0a 	.word	0x080d6b0a
 8013c3c:	080d6b1b 	.word	0x080d6b1b

08013c40 <__d2b>:
 8013c40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013c44:	460f      	mov	r7, r1
 8013c46:	2101      	movs	r1, #1
 8013c48:	ec59 8b10 	vmov	r8, r9, d0
 8013c4c:	4616      	mov	r6, r2
 8013c4e:	f7ff fcd5 	bl	80135fc <_Balloc>
 8013c52:	4604      	mov	r4, r0
 8013c54:	b930      	cbnz	r0, 8013c64 <__d2b+0x24>
 8013c56:	4602      	mov	r2, r0
 8013c58:	4b24      	ldr	r3, [pc, #144]	; (8013cec <__d2b+0xac>)
 8013c5a:	4825      	ldr	r0, [pc, #148]	; (8013cf0 <__d2b+0xb0>)
 8013c5c:	f240 310f 	movw	r1, #783	; 0x30f
 8013c60:	f000 fa86 	bl	8014170 <__assert_func>
 8013c64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013c68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013c6c:	bb2d      	cbnz	r5, 8013cba <__d2b+0x7a>
 8013c6e:	9301      	str	r3, [sp, #4]
 8013c70:	f1b8 0300 	subs.w	r3, r8, #0
 8013c74:	d026      	beq.n	8013cc4 <__d2b+0x84>
 8013c76:	4668      	mov	r0, sp
 8013c78:	9300      	str	r3, [sp, #0]
 8013c7a:	f7ff fd87 	bl	801378c <__lo0bits>
 8013c7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013c82:	b1e8      	cbz	r0, 8013cc0 <__d2b+0x80>
 8013c84:	f1c0 0320 	rsb	r3, r0, #32
 8013c88:	fa02 f303 	lsl.w	r3, r2, r3
 8013c8c:	430b      	orrs	r3, r1
 8013c8e:	40c2      	lsrs	r2, r0
 8013c90:	6163      	str	r3, [r4, #20]
 8013c92:	9201      	str	r2, [sp, #4]
 8013c94:	9b01      	ldr	r3, [sp, #4]
 8013c96:	61a3      	str	r3, [r4, #24]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	bf14      	ite	ne
 8013c9c:	2202      	movne	r2, #2
 8013c9e:	2201      	moveq	r2, #1
 8013ca0:	6122      	str	r2, [r4, #16]
 8013ca2:	b1bd      	cbz	r5, 8013cd4 <__d2b+0x94>
 8013ca4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013ca8:	4405      	add	r5, r0
 8013caa:	603d      	str	r5, [r7, #0]
 8013cac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013cb0:	6030      	str	r0, [r6, #0]
 8013cb2:	4620      	mov	r0, r4
 8013cb4:	b003      	add	sp, #12
 8013cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013cbe:	e7d6      	b.n	8013c6e <__d2b+0x2e>
 8013cc0:	6161      	str	r1, [r4, #20]
 8013cc2:	e7e7      	b.n	8013c94 <__d2b+0x54>
 8013cc4:	a801      	add	r0, sp, #4
 8013cc6:	f7ff fd61 	bl	801378c <__lo0bits>
 8013cca:	9b01      	ldr	r3, [sp, #4]
 8013ccc:	6163      	str	r3, [r4, #20]
 8013cce:	3020      	adds	r0, #32
 8013cd0:	2201      	movs	r2, #1
 8013cd2:	e7e5      	b.n	8013ca0 <__d2b+0x60>
 8013cd4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013cd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013cdc:	6038      	str	r0, [r7, #0]
 8013cde:	6918      	ldr	r0, [r3, #16]
 8013ce0:	f7ff fd34 	bl	801374c <__hi0bits>
 8013ce4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013ce8:	e7e2      	b.n	8013cb0 <__d2b+0x70>
 8013cea:	bf00      	nop
 8013cec:	080d6b0a 	.word	0x080d6b0a
 8013cf0:	080d6b1b 	.word	0x080d6b1b

08013cf4 <__ssputs_r>:
 8013cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cf8:	688e      	ldr	r6, [r1, #8]
 8013cfa:	461f      	mov	r7, r3
 8013cfc:	42be      	cmp	r6, r7
 8013cfe:	680b      	ldr	r3, [r1, #0]
 8013d00:	4682      	mov	sl, r0
 8013d02:	460c      	mov	r4, r1
 8013d04:	4690      	mov	r8, r2
 8013d06:	d82c      	bhi.n	8013d62 <__ssputs_r+0x6e>
 8013d08:	898a      	ldrh	r2, [r1, #12]
 8013d0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013d0e:	d026      	beq.n	8013d5e <__ssputs_r+0x6a>
 8013d10:	6965      	ldr	r5, [r4, #20]
 8013d12:	6909      	ldr	r1, [r1, #16]
 8013d14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013d18:	eba3 0901 	sub.w	r9, r3, r1
 8013d1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013d20:	1c7b      	adds	r3, r7, #1
 8013d22:	444b      	add	r3, r9
 8013d24:	106d      	asrs	r5, r5, #1
 8013d26:	429d      	cmp	r5, r3
 8013d28:	bf38      	it	cc
 8013d2a:	461d      	movcc	r5, r3
 8013d2c:	0553      	lsls	r3, r2, #21
 8013d2e:	d527      	bpl.n	8013d80 <__ssputs_r+0x8c>
 8013d30:	4629      	mov	r1, r5
 8013d32:	f7ff fbd7 	bl	80134e4 <_malloc_r>
 8013d36:	4606      	mov	r6, r0
 8013d38:	b360      	cbz	r0, 8013d94 <__ssputs_r+0xa0>
 8013d3a:	6921      	ldr	r1, [r4, #16]
 8013d3c:	464a      	mov	r2, r9
 8013d3e:	f000 fa09 	bl	8014154 <memcpy>
 8013d42:	89a3      	ldrh	r3, [r4, #12]
 8013d44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d4c:	81a3      	strh	r3, [r4, #12]
 8013d4e:	6126      	str	r6, [r4, #16]
 8013d50:	6165      	str	r5, [r4, #20]
 8013d52:	444e      	add	r6, r9
 8013d54:	eba5 0509 	sub.w	r5, r5, r9
 8013d58:	6026      	str	r6, [r4, #0]
 8013d5a:	60a5      	str	r5, [r4, #8]
 8013d5c:	463e      	mov	r6, r7
 8013d5e:	42be      	cmp	r6, r7
 8013d60:	d900      	bls.n	8013d64 <__ssputs_r+0x70>
 8013d62:	463e      	mov	r6, r7
 8013d64:	6820      	ldr	r0, [r4, #0]
 8013d66:	4632      	mov	r2, r6
 8013d68:	4641      	mov	r1, r8
 8013d6a:	f000 f9c9 	bl	8014100 <memmove>
 8013d6e:	68a3      	ldr	r3, [r4, #8]
 8013d70:	1b9b      	subs	r3, r3, r6
 8013d72:	60a3      	str	r3, [r4, #8]
 8013d74:	6823      	ldr	r3, [r4, #0]
 8013d76:	4433      	add	r3, r6
 8013d78:	6023      	str	r3, [r4, #0]
 8013d7a:	2000      	movs	r0, #0
 8013d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d80:	462a      	mov	r2, r5
 8013d82:	f000 fa3b 	bl	80141fc <_realloc_r>
 8013d86:	4606      	mov	r6, r0
 8013d88:	2800      	cmp	r0, #0
 8013d8a:	d1e0      	bne.n	8013d4e <__ssputs_r+0x5a>
 8013d8c:	6921      	ldr	r1, [r4, #16]
 8013d8e:	4650      	mov	r0, sl
 8013d90:	f7ff fb34 	bl	80133fc <_free_r>
 8013d94:	230c      	movs	r3, #12
 8013d96:	f8ca 3000 	str.w	r3, [sl]
 8013d9a:	89a3      	ldrh	r3, [r4, #12]
 8013d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013da0:	81a3      	strh	r3, [r4, #12]
 8013da2:	f04f 30ff 	mov.w	r0, #4294967295
 8013da6:	e7e9      	b.n	8013d7c <__ssputs_r+0x88>

08013da8 <_svfiprintf_r>:
 8013da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dac:	4698      	mov	r8, r3
 8013dae:	898b      	ldrh	r3, [r1, #12]
 8013db0:	061b      	lsls	r3, r3, #24
 8013db2:	b09d      	sub	sp, #116	; 0x74
 8013db4:	4607      	mov	r7, r0
 8013db6:	460d      	mov	r5, r1
 8013db8:	4614      	mov	r4, r2
 8013dba:	d50e      	bpl.n	8013dda <_svfiprintf_r+0x32>
 8013dbc:	690b      	ldr	r3, [r1, #16]
 8013dbe:	b963      	cbnz	r3, 8013dda <_svfiprintf_r+0x32>
 8013dc0:	2140      	movs	r1, #64	; 0x40
 8013dc2:	f7ff fb8f 	bl	80134e4 <_malloc_r>
 8013dc6:	6028      	str	r0, [r5, #0]
 8013dc8:	6128      	str	r0, [r5, #16]
 8013dca:	b920      	cbnz	r0, 8013dd6 <_svfiprintf_r+0x2e>
 8013dcc:	230c      	movs	r3, #12
 8013dce:	603b      	str	r3, [r7, #0]
 8013dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8013dd4:	e0d0      	b.n	8013f78 <_svfiprintf_r+0x1d0>
 8013dd6:	2340      	movs	r3, #64	; 0x40
 8013dd8:	616b      	str	r3, [r5, #20]
 8013dda:	2300      	movs	r3, #0
 8013ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8013dde:	2320      	movs	r3, #32
 8013de0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8013de8:	2330      	movs	r3, #48	; 0x30
 8013dea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013f90 <_svfiprintf_r+0x1e8>
 8013dee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013df2:	f04f 0901 	mov.w	r9, #1
 8013df6:	4623      	mov	r3, r4
 8013df8:	469a      	mov	sl, r3
 8013dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013dfe:	b10a      	cbz	r2, 8013e04 <_svfiprintf_r+0x5c>
 8013e00:	2a25      	cmp	r2, #37	; 0x25
 8013e02:	d1f9      	bne.n	8013df8 <_svfiprintf_r+0x50>
 8013e04:	ebba 0b04 	subs.w	fp, sl, r4
 8013e08:	d00b      	beq.n	8013e22 <_svfiprintf_r+0x7a>
 8013e0a:	465b      	mov	r3, fp
 8013e0c:	4622      	mov	r2, r4
 8013e0e:	4629      	mov	r1, r5
 8013e10:	4638      	mov	r0, r7
 8013e12:	f7ff ff6f 	bl	8013cf4 <__ssputs_r>
 8013e16:	3001      	adds	r0, #1
 8013e18:	f000 80a9 	beq.w	8013f6e <_svfiprintf_r+0x1c6>
 8013e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e1e:	445a      	add	r2, fp
 8013e20:	9209      	str	r2, [sp, #36]	; 0x24
 8013e22:	f89a 3000 	ldrb.w	r3, [sl]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	f000 80a1 	beq.w	8013f6e <_svfiprintf_r+0x1c6>
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8013e32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e36:	f10a 0a01 	add.w	sl, sl, #1
 8013e3a:	9304      	str	r3, [sp, #16]
 8013e3c:	9307      	str	r3, [sp, #28]
 8013e3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013e42:	931a      	str	r3, [sp, #104]	; 0x68
 8013e44:	4654      	mov	r4, sl
 8013e46:	2205      	movs	r2, #5
 8013e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e4c:	4850      	ldr	r0, [pc, #320]	; (8013f90 <_svfiprintf_r+0x1e8>)
 8013e4e:	f7ec f9df 	bl	8000210 <memchr>
 8013e52:	9a04      	ldr	r2, [sp, #16]
 8013e54:	b9d8      	cbnz	r0, 8013e8e <_svfiprintf_r+0xe6>
 8013e56:	06d0      	lsls	r0, r2, #27
 8013e58:	bf44      	itt	mi
 8013e5a:	2320      	movmi	r3, #32
 8013e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e60:	0711      	lsls	r1, r2, #28
 8013e62:	bf44      	itt	mi
 8013e64:	232b      	movmi	r3, #43	; 0x2b
 8013e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8013e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8013e70:	d015      	beq.n	8013e9e <_svfiprintf_r+0xf6>
 8013e72:	9a07      	ldr	r2, [sp, #28]
 8013e74:	4654      	mov	r4, sl
 8013e76:	2000      	movs	r0, #0
 8013e78:	f04f 0c0a 	mov.w	ip, #10
 8013e7c:	4621      	mov	r1, r4
 8013e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e82:	3b30      	subs	r3, #48	; 0x30
 8013e84:	2b09      	cmp	r3, #9
 8013e86:	d94d      	bls.n	8013f24 <_svfiprintf_r+0x17c>
 8013e88:	b1b0      	cbz	r0, 8013eb8 <_svfiprintf_r+0x110>
 8013e8a:	9207      	str	r2, [sp, #28]
 8013e8c:	e014      	b.n	8013eb8 <_svfiprintf_r+0x110>
 8013e8e:	eba0 0308 	sub.w	r3, r0, r8
 8013e92:	fa09 f303 	lsl.w	r3, r9, r3
 8013e96:	4313      	orrs	r3, r2
 8013e98:	9304      	str	r3, [sp, #16]
 8013e9a:	46a2      	mov	sl, r4
 8013e9c:	e7d2      	b.n	8013e44 <_svfiprintf_r+0x9c>
 8013e9e:	9b03      	ldr	r3, [sp, #12]
 8013ea0:	1d19      	adds	r1, r3, #4
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	9103      	str	r1, [sp, #12]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	bfbb      	ittet	lt
 8013eaa:	425b      	neglt	r3, r3
 8013eac:	f042 0202 	orrlt.w	r2, r2, #2
 8013eb0:	9307      	strge	r3, [sp, #28]
 8013eb2:	9307      	strlt	r3, [sp, #28]
 8013eb4:	bfb8      	it	lt
 8013eb6:	9204      	strlt	r2, [sp, #16]
 8013eb8:	7823      	ldrb	r3, [r4, #0]
 8013eba:	2b2e      	cmp	r3, #46	; 0x2e
 8013ebc:	d10c      	bne.n	8013ed8 <_svfiprintf_r+0x130>
 8013ebe:	7863      	ldrb	r3, [r4, #1]
 8013ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8013ec2:	d134      	bne.n	8013f2e <_svfiprintf_r+0x186>
 8013ec4:	9b03      	ldr	r3, [sp, #12]
 8013ec6:	1d1a      	adds	r2, r3, #4
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	9203      	str	r2, [sp, #12]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	bfb8      	it	lt
 8013ed0:	f04f 33ff 	movlt.w	r3, #4294967295
 8013ed4:	3402      	adds	r4, #2
 8013ed6:	9305      	str	r3, [sp, #20]
 8013ed8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013fa0 <_svfiprintf_r+0x1f8>
 8013edc:	7821      	ldrb	r1, [r4, #0]
 8013ede:	2203      	movs	r2, #3
 8013ee0:	4650      	mov	r0, sl
 8013ee2:	f7ec f995 	bl	8000210 <memchr>
 8013ee6:	b138      	cbz	r0, 8013ef8 <_svfiprintf_r+0x150>
 8013ee8:	9b04      	ldr	r3, [sp, #16]
 8013eea:	eba0 000a 	sub.w	r0, r0, sl
 8013eee:	2240      	movs	r2, #64	; 0x40
 8013ef0:	4082      	lsls	r2, r0
 8013ef2:	4313      	orrs	r3, r2
 8013ef4:	3401      	adds	r4, #1
 8013ef6:	9304      	str	r3, [sp, #16]
 8013ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013efc:	4825      	ldr	r0, [pc, #148]	; (8013f94 <_svfiprintf_r+0x1ec>)
 8013efe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f02:	2206      	movs	r2, #6
 8013f04:	f7ec f984 	bl	8000210 <memchr>
 8013f08:	2800      	cmp	r0, #0
 8013f0a:	d038      	beq.n	8013f7e <_svfiprintf_r+0x1d6>
 8013f0c:	4b22      	ldr	r3, [pc, #136]	; (8013f98 <_svfiprintf_r+0x1f0>)
 8013f0e:	bb1b      	cbnz	r3, 8013f58 <_svfiprintf_r+0x1b0>
 8013f10:	9b03      	ldr	r3, [sp, #12]
 8013f12:	3307      	adds	r3, #7
 8013f14:	f023 0307 	bic.w	r3, r3, #7
 8013f18:	3308      	adds	r3, #8
 8013f1a:	9303      	str	r3, [sp, #12]
 8013f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f1e:	4433      	add	r3, r6
 8013f20:	9309      	str	r3, [sp, #36]	; 0x24
 8013f22:	e768      	b.n	8013df6 <_svfiprintf_r+0x4e>
 8013f24:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f28:	460c      	mov	r4, r1
 8013f2a:	2001      	movs	r0, #1
 8013f2c:	e7a6      	b.n	8013e7c <_svfiprintf_r+0xd4>
 8013f2e:	2300      	movs	r3, #0
 8013f30:	3401      	adds	r4, #1
 8013f32:	9305      	str	r3, [sp, #20]
 8013f34:	4619      	mov	r1, r3
 8013f36:	f04f 0c0a 	mov.w	ip, #10
 8013f3a:	4620      	mov	r0, r4
 8013f3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f40:	3a30      	subs	r2, #48	; 0x30
 8013f42:	2a09      	cmp	r2, #9
 8013f44:	d903      	bls.n	8013f4e <_svfiprintf_r+0x1a6>
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d0c6      	beq.n	8013ed8 <_svfiprintf_r+0x130>
 8013f4a:	9105      	str	r1, [sp, #20]
 8013f4c:	e7c4      	b.n	8013ed8 <_svfiprintf_r+0x130>
 8013f4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f52:	4604      	mov	r4, r0
 8013f54:	2301      	movs	r3, #1
 8013f56:	e7f0      	b.n	8013f3a <_svfiprintf_r+0x192>
 8013f58:	ab03      	add	r3, sp, #12
 8013f5a:	9300      	str	r3, [sp, #0]
 8013f5c:	462a      	mov	r2, r5
 8013f5e:	4b0f      	ldr	r3, [pc, #60]	; (8013f9c <_svfiprintf_r+0x1f4>)
 8013f60:	a904      	add	r1, sp, #16
 8013f62:	4638      	mov	r0, r7
 8013f64:	f7fd fe62 	bl	8011c2c <_printf_float>
 8013f68:	1c42      	adds	r2, r0, #1
 8013f6a:	4606      	mov	r6, r0
 8013f6c:	d1d6      	bne.n	8013f1c <_svfiprintf_r+0x174>
 8013f6e:	89ab      	ldrh	r3, [r5, #12]
 8013f70:	065b      	lsls	r3, r3, #25
 8013f72:	f53f af2d 	bmi.w	8013dd0 <_svfiprintf_r+0x28>
 8013f76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f78:	b01d      	add	sp, #116	; 0x74
 8013f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f7e:	ab03      	add	r3, sp, #12
 8013f80:	9300      	str	r3, [sp, #0]
 8013f82:	462a      	mov	r2, r5
 8013f84:	4b05      	ldr	r3, [pc, #20]	; (8013f9c <_svfiprintf_r+0x1f4>)
 8013f86:	a904      	add	r1, sp, #16
 8013f88:	4638      	mov	r0, r7
 8013f8a:	f7fe f8f3 	bl	8012174 <_printf_i>
 8013f8e:	e7eb      	b.n	8013f68 <_svfiprintf_r+0x1c0>
 8013f90:	080d6c74 	.word	0x080d6c74
 8013f94:	080d6c7e 	.word	0x080d6c7e
 8013f98:	08011c2d 	.word	0x08011c2d
 8013f9c:	08013cf5 	.word	0x08013cf5
 8013fa0:	080d6c7a 	.word	0x080d6c7a

08013fa4 <__sflush_r>:
 8013fa4:	898a      	ldrh	r2, [r1, #12]
 8013fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013faa:	4605      	mov	r5, r0
 8013fac:	0710      	lsls	r0, r2, #28
 8013fae:	460c      	mov	r4, r1
 8013fb0:	d458      	bmi.n	8014064 <__sflush_r+0xc0>
 8013fb2:	684b      	ldr	r3, [r1, #4]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	dc05      	bgt.n	8013fc4 <__sflush_r+0x20>
 8013fb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	dc02      	bgt.n	8013fc4 <__sflush_r+0x20>
 8013fbe:	2000      	movs	r0, #0
 8013fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013fc6:	2e00      	cmp	r6, #0
 8013fc8:	d0f9      	beq.n	8013fbe <__sflush_r+0x1a>
 8013fca:	2300      	movs	r3, #0
 8013fcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013fd0:	682f      	ldr	r7, [r5, #0]
 8013fd2:	6a21      	ldr	r1, [r4, #32]
 8013fd4:	602b      	str	r3, [r5, #0]
 8013fd6:	d032      	beq.n	801403e <__sflush_r+0x9a>
 8013fd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013fda:	89a3      	ldrh	r3, [r4, #12]
 8013fdc:	075a      	lsls	r2, r3, #29
 8013fde:	d505      	bpl.n	8013fec <__sflush_r+0x48>
 8013fe0:	6863      	ldr	r3, [r4, #4]
 8013fe2:	1ac0      	subs	r0, r0, r3
 8013fe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013fe6:	b10b      	cbz	r3, 8013fec <__sflush_r+0x48>
 8013fe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013fea:	1ac0      	subs	r0, r0, r3
 8013fec:	2300      	movs	r3, #0
 8013fee:	4602      	mov	r2, r0
 8013ff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013ff2:	6a21      	ldr	r1, [r4, #32]
 8013ff4:	4628      	mov	r0, r5
 8013ff6:	47b0      	blx	r6
 8013ff8:	1c43      	adds	r3, r0, #1
 8013ffa:	89a3      	ldrh	r3, [r4, #12]
 8013ffc:	d106      	bne.n	801400c <__sflush_r+0x68>
 8013ffe:	6829      	ldr	r1, [r5, #0]
 8014000:	291d      	cmp	r1, #29
 8014002:	d82b      	bhi.n	801405c <__sflush_r+0xb8>
 8014004:	4a29      	ldr	r2, [pc, #164]	; (80140ac <__sflush_r+0x108>)
 8014006:	410a      	asrs	r2, r1
 8014008:	07d6      	lsls	r6, r2, #31
 801400a:	d427      	bmi.n	801405c <__sflush_r+0xb8>
 801400c:	2200      	movs	r2, #0
 801400e:	6062      	str	r2, [r4, #4]
 8014010:	04d9      	lsls	r1, r3, #19
 8014012:	6922      	ldr	r2, [r4, #16]
 8014014:	6022      	str	r2, [r4, #0]
 8014016:	d504      	bpl.n	8014022 <__sflush_r+0x7e>
 8014018:	1c42      	adds	r2, r0, #1
 801401a:	d101      	bne.n	8014020 <__sflush_r+0x7c>
 801401c:	682b      	ldr	r3, [r5, #0]
 801401e:	b903      	cbnz	r3, 8014022 <__sflush_r+0x7e>
 8014020:	6560      	str	r0, [r4, #84]	; 0x54
 8014022:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014024:	602f      	str	r7, [r5, #0]
 8014026:	2900      	cmp	r1, #0
 8014028:	d0c9      	beq.n	8013fbe <__sflush_r+0x1a>
 801402a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801402e:	4299      	cmp	r1, r3
 8014030:	d002      	beq.n	8014038 <__sflush_r+0x94>
 8014032:	4628      	mov	r0, r5
 8014034:	f7ff f9e2 	bl	80133fc <_free_r>
 8014038:	2000      	movs	r0, #0
 801403a:	6360      	str	r0, [r4, #52]	; 0x34
 801403c:	e7c0      	b.n	8013fc0 <__sflush_r+0x1c>
 801403e:	2301      	movs	r3, #1
 8014040:	4628      	mov	r0, r5
 8014042:	47b0      	blx	r6
 8014044:	1c41      	adds	r1, r0, #1
 8014046:	d1c8      	bne.n	8013fda <__sflush_r+0x36>
 8014048:	682b      	ldr	r3, [r5, #0]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d0c5      	beq.n	8013fda <__sflush_r+0x36>
 801404e:	2b1d      	cmp	r3, #29
 8014050:	d001      	beq.n	8014056 <__sflush_r+0xb2>
 8014052:	2b16      	cmp	r3, #22
 8014054:	d101      	bne.n	801405a <__sflush_r+0xb6>
 8014056:	602f      	str	r7, [r5, #0]
 8014058:	e7b1      	b.n	8013fbe <__sflush_r+0x1a>
 801405a:	89a3      	ldrh	r3, [r4, #12]
 801405c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014060:	81a3      	strh	r3, [r4, #12]
 8014062:	e7ad      	b.n	8013fc0 <__sflush_r+0x1c>
 8014064:	690f      	ldr	r7, [r1, #16]
 8014066:	2f00      	cmp	r7, #0
 8014068:	d0a9      	beq.n	8013fbe <__sflush_r+0x1a>
 801406a:	0793      	lsls	r3, r2, #30
 801406c:	680e      	ldr	r6, [r1, #0]
 801406e:	bf08      	it	eq
 8014070:	694b      	ldreq	r3, [r1, #20]
 8014072:	600f      	str	r7, [r1, #0]
 8014074:	bf18      	it	ne
 8014076:	2300      	movne	r3, #0
 8014078:	eba6 0807 	sub.w	r8, r6, r7
 801407c:	608b      	str	r3, [r1, #8]
 801407e:	f1b8 0f00 	cmp.w	r8, #0
 8014082:	dd9c      	ble.n	8013fbe <__sflush_r+0x1a>
 8014084:	6a21      	ldr	r1, [r4, #32]
 8014086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014088:	4643      	mov	r3, r8
 801408a:	463a      	mov	r2, r7
 801408c:	4628      	mov	r0, r5
 801408e:	47b0      	blx	r6
 8014090:	2800      	cmp	r0, #0
 8014092:	dc06      	bgt.n	80140a2 <__sflush_r+0xfe>
 8014094:	89a3      	ldrh	r3, [r4, #12]
 8014096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801409a:	81a3      	strh	r3, [r4, #12]
 801409c:	f04f 30ff 	mov.w	r0, #4294967295
 80140a0:	e78e      	b.n	8013fc0 <__sflush_r+0x1c>
 80140a2:	4407      	add	r7, r0
 80140a4:	eba8 0800 	sub.w	r8, r8, r0
 80140a8:	e7e9      	b.n	801407e <__sflush_r+0xda>
 80140aa:	bf00      	nop
 80140ac:	dfbffffe 	.word	0xdfbffffe

080140b0 <_fflush_r>:
 80140b0:	b538      	push	{r3, r4, r5, lr}
 80140b2:	690b      	ldr	r3, [r1, #16]
 80140b4:	4605      	mov	r5, r0
 80140b6:	460c      	mov	r4, r1
 80140b8:	b913      	cbnz	r3, 80140c0 <_fflush_r+0x10>
 80140ba:	2500      	movs	r5, #0
 80140bc:	4628      	mov	r0, r5
 80140be:	bd38      	pop	{r3, r4, r5, pc}
 80140c0:	b118      	cbz	r0, 80140ca <_fflush_r+0x1a>
 80140c2:	6a03      	ldr	r3, [r0, #32]
 80140c4:	b90b      	cbnz	r3, 80140ca <_fflush_r+0x1a>
 80140c6:	f7fe fa03 	bl	80124d0 <__sinit>
 80140ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d0f3      	beq.n	80140ba <_fflush_r+0xa>
 80140d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80140d4:	07d0      	lsls	r0, r2, #31
 80140d6:	d404      	bmi.n	80140e2 <_fflush_r+0x32>
 80140d8:	0599      	lsls	r1, r3, #22
 80140da:	d402      	bmi.n	80140e2 <_fflush_r+0x32>
 80140dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140de:	f7fe fb0e 	bl	80126fe <__retarget_lock_acquire_recursive>
 80140e2:	4628      	mov	r0, r5
 80140e4:	4621      	mov	r1, r4
 80140e6:	f7ff ff5d 	bl	8013fa4 <__sflush_r>
 80140ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80140ec:	07da      	lsls	r2, r3, #31
 80140ee:	4605      	mov	r5, r0
 80140f0:	d4e4      	bmi.n	80140bc <_fflush_r+0xc>
 80140f2:	89a3      	ldrh	r3, [r4, #12]
 80140f4:	059b      	lsls	r3, r3, #22
 80140f6:	d4e1      	bmi.n	80140bc <_fflush_r+0xc>
 80140f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140fa:	f7fe fb01 	bl	8012700 <__retarget_lock_release_recursive>
 80140fe:	e7dd      	b.n	80140bc <_fflush_r+0xc>

08014100 <memmove>:
 8014100:	4288      	cmp	r0, r1
 8014102:	b510      	push	{r4, lr}
 8014104:	eb01 0402 	add.w	r4, r1, r2
 8014108:	d902      	bls.n	8014110 <memmove+0x10>
 801410a:	4284      	cmp	r4, r0
 801410c:	4623      	mov	r3, r4
 801410e:	d807      	bhi.n	8014120 <memmove+0x20>
 8014110:	1e43      	subs	r3, r0, #1
 8014112:	42a1      	cmp	r1, r4
 8014114:	d008      	beq.n	8014128 <memmove+0x28>
 8014116:	f811 2b01 	ldrb.w	r2, [r1], #1
 801411a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801411e:	e7f8      	b.n	8014112 <memmove+0x12>
 8014120:	4402      	add	r2, r0
 8014122:	4601      	mov	r1, r0
 8014124:	428a      	cmp	r2, r1
 8014126:	d100      	bne.n	801412a <memmove+0x2a>
 8014128:	bd10      	pop	{r4, pc}
 801412a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801412e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014132:	e7f7      	b.n	8014124 <memmove+0x24>

08014134 <_sbrk_r>:
 8014134:	b538      	push	{r3, r4, r5, lr}
 8014136:	4d06      	ldr	r5, [pc, #24]	; (8014150 <_sbrk_r+0x1c>)
 8014138:	2300      	movs	r3, #0
 801413a:	4604      	mov	r4, r0
 801413c:	4608      	mov	r0, r1
 801413e:	602b      	str	r3, [r5, #0]
 8014140:	f7ef fde8 	bl	8003d14 <_sbrk>
 8014144:	1c43      	adds	r3, r0, #1
 8014146:	d102      	bne.n	801414e <_sbrk_r+0x1a>
 8014148:	682b      	ldr	r3, [r5, #0]
 801414a:	b103      	cbz	r3, 801414e <_sbrk_r+0x1a>
 801414c:	6023      	str	r3, [r4, #0]
 801414e:	bd38      	pop	{r3, r4, r5, pc}
 8014150:	20038260 	.word	0x20038260

08014154 <memcpy>:
 8014154:	440a      	add	r2, r1
 8014156:	4291      	cmp	r1, r2
 8014158:	f100 33ff 	add.w	r3, r0, #4294967295
 801415c:	d100      	bne.n	8014160 <memcpy+0xc>
 801415e:	4770      	bx	lr
 8014160:	b510      	push	{r4, lr}
 8014162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014166:	f803 4f01 	strb.w	r4, [r3, #1]!
 801416a:	4291      	cmp	r1, r2
 801416c:	d1f9      	bne.n	8014162 <memcpy+0xe>
 801416e:	bd10      	pop	{r4, pc}

08014170 <__assert_func>:
 8014170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014172:	4614      	mov	r4, r2
 8014174:	461a      	mov	r2, r3
 8014176:	4b09      	ldr	r3, [pc, #36]	; (801419c <__assert_func+0x2c>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	4605      	mov	r5, r0
 801417c:	68d8      	ldr	r0, [r3, #12]
 801417e:	b14c      	cbz	r4, 8014194 <__assert_func+0x24>
 8014180:	4b07      	ldr	r3, [pc, #28]	; (80141a0 <__assert_func+0x30>)
 8014182:	9100      	str	r1, [sp, #0]
 8014184:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014188:	4906      	ldr	r1, [pc, #24]	; (80141a4 <__assert_func+0x34>)
 801418a:	462b      	mov	r3, r5
 801418c:	f000 f872 	bl	8014274 <fiprintf>
 8014190:	f000 f882 	bl	8014298 <abort>
 8014194:	4b04      	ldr	r3, [pc, #16]	; (80141a8 <__assert_func+0x38>)
 8014196:	461c      	mov	r4, r3
 8014198:	e7f3      	b.n	8014182 <__assert_func+0x12>
 801419a:	bf00      	nop
 801419c:	20000128 	.word	0x20000128
 80141a0:	080d6c8f 	.word	0x080d6c8f
 80141a4:	080d6c9c 	.word	0x080d6c9c
 80141a8:	080d6cca 	.word	0x080d6cca

080141ac <_calloc_r>:
 80141ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80141ae:	fba1 2402 	umull	r2, r4, r1, r2
 80141b2:	b94c      	cbnz	r4, 80141c8 <_calloc_r+0x1c>
 80141b4:	4611      	mov	r1, r2
 80141b6:	9201      	str	r2, [sp, #4]
 80141b8:	f7ff f994 	bl	80134e4 <_malloc_r>
 80141bc:	9a01      	ldr	r2, [sp, #4]
 80141be:	4605      	mov	r5, r0
 80141c0:	b930      	cbnz	r0, 80141d0 <_calloc_r+0x24>
 80141c2:	4628      	mov	r0, r5
 80141c4:	b003      	add	sp, #12
 80141c6:	bd30      	pop	{r4, r5, pc}
 80141c8:	220c      	movs	r2, #12
 80141ca:	6002      	str	r2, [r0, #0]
 80141cc:	2500      	movs	r5, #0
 80141ce:	e7f8      	b.n	80141c2 <_calloc_r+0x16>
 80141d0:	4621      	mov	r1, r4
 80141d2:	f7fe fa16 	bl	8012602 <memset>
 80141d6:	e7f4      	b.n	80141c2 <_calloc_r+0x16>

080141d8 <__ascii_mbtowc>:
 80141d8:	b082      	sub	sp, #8
 80141da:	b901      	cbnz	r1, 80141de <__ascii_mbtowc+0x6>
 80141dc:	a901      	add	r1, sp, #4
 80141de:	b142      	cbz	r2, 80141f2 <__ascii_mbtowc+0x1a>
 80141e0:	b14b      	cbz	r3, 80141f6 <__ascii_mbtowc+0x1e>
 80141e2:	7813      	ldrb	r3, [r2, #0]
 80141e4:	600b      	str	r3, [r1, #0]
 80141e6:	7812      	ldrb	r2, [r2, #0]
 80141e8:	1e10      	subs	r0, r2, #0
 80141ea:	bf18      	it	ne
 80141ec:	2001      	movne	r0, #1
 80141ee:	b002      	add	sp, #8
 80141f0:	4770      	bx	lr
 80141f2:	4610      	mov	r0, r2
 80141f4:	e7fb      	b.n	80141ee <__ascii_mbtowc+0x16>
 80141f6:	f06f 0001 	mvn.w	r0, #1
 80141fa:	e7f8      	b.n	80141ee <__ascii_mbtowc+0x16>

080141fc <_realloc_r>:
 80141fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014200:	4680      	mov	r8, r0
 8014202:	4614      	mov	r4, r2
 8014204:	460e      	mov	r6, r1
 8014206:	b921      	cbnz	r1, 8014212 <_realloc_r+0x16>
 8014208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801420c:	4611      	mov	r1, r2
 801420e:	f7ff b969 	b.w	80134e4 <_malloc_r>
 8014212:	b92a      	cbnz	r2, 8014220 <_realloc_r+0x24>
 8014214:	f7ff f8f2 	bl	80133fc <_free_r>
 8014218:	4625      	mov	r5, r4
 801421a:	4628      	mov	r0, r5
 801421c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014220:	f000 f841 	bl	80142a6 <_malloc_usable_size_r>
 8014224:	4284      	cmp	r4, r0
 8014226:	4607      	mov	r7, r0
 8014228:	d802      	bhi.n	8014230 <_realloc_r+0x34>
 801422a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801422e:	d812      	bhi.n	8014256 <_realloc_r+0x5a>
 8014230:	4621      	mov	r1, r4
 8014232:	4640      	mov	r0, r8
 8014234:	f7ff f956 	bl	80134e4 <_malloc_r>
 8014238:	4605      	mov	r5, r0
 801423a:	2800      	cmp	r0, #0
 801423c:	d0ed      	beq.n	801421a <_realloc_r+0x1e>
 801423e:	42bc      	cmp	r4, r7
 8014240:	4622      	mov	r2, r4
 8014242:	4631      	mov	r1, r6
 8014244:	bf28      	it	cs
 8014246:	463a      	movcs	r2, r7
 8014248:	f7ff ff84 	bl	8014154 <memcpy>
 801424c:	4631      	mov	r1, r6
 801424e:	4640      	mov	r0, r8
 8014250:	f7ff f8d4 	bl	80133fc <_free_r>
 8014254:	e7e1      	b.n	801421a <_realloc_r+0x1e>
 8014256:	4635      	mov	r5, r6
 8014258:	e7df      	b.n	801421a <_realloc_r+0x1e>

0801425a <__ascii_wctomb>:
 801425a:	b149      	cbz	r1, 8014270 <__ascii_wctomb+0x16>
 801425c:	2aff      	cmp	r2, #255	; 0xff
 801425e:	bf85      	ittet	hi
 8014260:	238a      	movhi	r3, #138	; 0x8a
 8014262:	6003      	strhi	r3, [r0, #0]
 8014264:	700a      	strbls	r2, [r1, #0]
 8014266:	f04f 30ff 	movhi.w	r0, #4294967295
 801426a:	bf98      	it	ls
 801426c:	2001      	movls	r0, #1
 801426e:	4770      	bx	lr
 8014270:	4608      	mov	r0, r1
 8014272:	4770      	bx	lr

08014274 <fiprintf>:
 8014274:	b40e      	push	{r1, r2, r3}
 8014276:	b503      	push	{r0, r1, lr}
 8014278:	4601      	mov	r1, r0
 801427a:	ab03      	add	r3, sp, #12
 801427c:	4805      	ldr	r0, [pc, #20]	; (8014294 <fiprintf+0x20>)
 801427e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014282:	6800      	ldr	r0, [r0, #0]
 8014284:	9301      	str	r3, [sp, #4]
 8014286:	f000 f83f 	bl	8014308 <_vfiprintf_r>
 801428a:	b002      	add	sp, #8
 801428c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014290:	b003      	add	sp, #12
 8014292:	4770      	bx	lr
 8014294:	20000128 	.word	0x20000128

08014298 <abort>:
 8014298:	b508      	push	{r3, lr}
 801429a:	2006      	movs	r0, #6
 801429c:	f000 fa0c 	bl	80146b8 <raise>
 80142a0:	2001      	movs	r0, #1
 80142a2:	f7ef fcbf 	bl	8003c24 <_exit>

080142a6 <_malloc_usable_size_r>:
 80142a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80142aa:	1f18      	subs	r0, r3, #4
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	bfbc      	itt	lt
 80142b0:	580b      	ldrlt	r3, [r1, r0]
 80142b2:	18c0      	addlt	r0, r0, r3
 80142b4:	4770      	bx	lr

080142b6 <__sfputc_r>:
 80142b6:	6893      	ldr	r3, [r2, #8]
 80142b8:	3b01      	subs	r3, #1
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	b410      	push	{r4}
 80142be:	6093      	str	r3, [r2, #8]
 80142c0:	da08      	bge.n	80142d4 <__sfputc_r+0x1e>
 80142c2:	6994      	ldr	r4, [r2, #24]
 80142c4:	42a3      	cmp	r3, r4
 80142c6:	db01      	blt.n	80142cc <__sfputc_r+0x16>
 80142c8:	290a      	cmp	r1, #10
 80142ca:	d103      	bne.n	80142d4 <__sfputc_r+0x1e>
 80142cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142d0:	f000 b934 	b.w	801453c <__swbuf_r>
 80142d4:	6813      	ldr	r3, [r2, #0]
 80142d6:	1c58      	adds	r0, r3, #1
 80142d8:	6010      	str	r0, [r2, #0]
 80142da:	7019      	strb	r1, [r3, #0]
 80142dc:	4608      	mov	r0, r1
 80142de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142e2:	4770      	bx	lr

080142e4 <__sfputs_r>:
 80142e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142e6:	4606      	mov	r6, r0
 80142e8:	460f      	mov	r7, r1
 80142ea:	4614      	mov	r4, r2
 80142ec:	18d5      	adds	r5, r2, r3
 80142ee:	42ac      	cmp	r4, r5
 80142f0:	d101      	bne.n	80142f6 <__sfputs_r+0x12>
 80142f2:	2000      	movs	r0, #0
 80142f4:	e007      	b.n	8014306 <__sfputs_r+0x22>
 80142f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142fa:	463a      	mov	r2, r7
 80142fc:	4630      	mov	r0, r6
 80142fe:	f7ff ffda 	bl	80142b6 <__sfputc_r>
 8014302:	1c43      	adds	r3, r0, #1
 8014304:	d1f3      	bne.n	80142ee <__sfputs_r+0xa>
 8014306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014308 <_vfiprintf_r>:
 8014308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801430c:	460d      	mov	r5, r1
 801430e:	b09d      	sub	sp, #116	; 0x74
 8014310:	4614      	mov	r4, r2
 8014312:	4698      	mov	r8, r3
 8014314:	4606      	mov	r6, r0
 8014316:	b118      	cbz	r0, 8014320 <_vfiprintf_r+0x18>
 8014318:	6a03      	ldr	r3, [r0, #32]
 801431a:	b90b      	cbnz	r3, 8014320 <_vfiprintf_r+0x18>
 801431c:	f7fe f8d8 	bl	80124d0 <__sinit>
 8014320:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014322:	07d9      	lsls	r1, r3, #31
 8014324:	d405      	bmi.n	8014332 <_vfiprintf_r+0x2a>
 8014326:	89ab      	ldrh	r3, [r5, #12]
 8014328:	059a      	lsls	r2, r3, #22
 801432a:	d402      	bmi.n	8014332 <_vfiprintf_r+0x2a>
 801432c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801432e:	f7fe f9e6 	bl	80126fe <__retarget_lock_acquire_recursive>
 8014332:	89ab      	ldrh	r3, [r5, #12]
 8014334:	071b      	lsls	r3, r3, #28
 8014336:	d501      	bpl.n	801433c <_vfiprintf_r+0x34>
 8014338:	692b      	ldr	r3, [r5, #16]
 801433a:	b99b      	cbnz	r3, 8014364 <_vfiprintf_r+0x5c>
 801433c:	4629      	mov	r1, r5
 801433e:	4630      	mov	r0, r6
 8014340:	f000 f93a 	bl	80145b8 <__swsetup_r>
 8014344:	b170      	cbz	r0, 8014364 <_vfiprintf_r+0x5c>
 8014346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014348:	07dc      	lsls	r4, r3, #31
 801434a:	d504      	bpl.n	8014356 <_vfiprintf_r+0x4e>
 801434c:	f04f 30ff 	mov.w	r0, #4294967295
 8014350:	b01d      	add	sp, #116	; 0x74
 8014352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014356:	89ab      	ldrh	r3, [r5, #12]
 8014358:	0598      	lsls	r0, r3, #22
 801435a:	d4f7      	bmi.n	801434c <_vfiprintf_r+0x44>
 801435c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801435e:	f7fe f9cf 	bl	8012700 <__retarget_lock_release_recursive>
 8014362:	e7f3      	b.n	801434c <_vfiprintf_r+0x44>
 8014364:	2300      	movs	r3, #0
 8014366:	9309      	str	r3, [sp, #36]	; 0x24
 8014368:	2320      	movs	r3, #32
 801436a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801436e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014372:	2330      	movs	r3, #48	; 0x30
 8014374:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014528 <_vfiprintf_r+0x220>
 8014378:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801437c:	f04f 0901 	mov.w	r9, #1
 8014380:	4623      	mov	r3, r4
 8014382:	469a      	mov	sl, r3
 8014384:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014388:	b10a      	cbz	r2, 801438e <_vfiprintf_r+0x86>
 801438a:	2a25      	cmp	r2, #37	; 0x25
 801438c:	d1f9      	bne.n	8014382 <_vfiprintf_r+0x7a>
 801438e:	ebba 0b04 	subs.w	fp, sl, r4
 8014392:	d00b      	beq.n	80143ac <_vfiprintf_r+0xa4>
 8014394:	465b      	mov	r3, fp
 8014396:	4622      	mov	r2, r4
 8014398:	4629      	mov	r1, r5
 801439a:	4630      	mov	r0, r6
 801439c:	f7ff ffa2 	bl	80142e4 <__sfputs_r>
 80143a0:	3001      	adds	r0, #1
 80143a2:	f000 80a9 	beq.w	80144f8 <_vfiprintf_r+0x1f0>
 80143a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143a8:	445a      	add	r2, fp
 80143aa:	9209      	str	r2, [sp, #36]	; 0x24
 80143ac:	f89a 3000 	ldrb.w	r3, [sl]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	f000 80a1 	beq.w	80144f8 <_vfiprintf_r+0x1f0>
 80143b6:	2300      	movs	r3, #0
 80143b8:	f04f 32ff 	mov.w	r2, #4294967295
 80143bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80143c0:	f10a 0a01 	add.w	sl, sl, #1
 80143c4:	9304      	str	r3, [sp, #16]
 80143c6:	9307      	str	r3, [sp, #28]
 80143c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80143cc:	931a      	str	r3, [sp, #104]	; 0x68
 80143ce:	4654      	mov	r4, sl
 80143d0:	2205      	movs	r2, #5
 80143d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143d6:	4854      	ldr	r0, [pc, #336]	; (8014528 <_vfiprintf_r+0x220>)
 80143d8:	f7eb ff1a 	bl	8000210 <memchr>
 80143dc:	9a04      	ldr	r2, [sp, #16]
 80143de:	b9d8      	cbnz	r0, 8014418 <_vfiprintf_r+0x110>
 80143e0:	06d1      	lsls	r1, r2, #27
 80143e2:	bf44      	itt	mi
 80143e4:	2320      	movmi	r3, #32
 80143e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143ea:	0713      	lsls	r3, r2, #28
 80143ec:	bf44      	itt	mi
 80143ee:	232b      	movmi	r3, #43	; 0x2b
 80143f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143f4:	f89a 3000 	ldrb.w	r3, [sl]
 80143f8:	2b2a      	cmp	r3, #42	; 0x2a
 80143fa:	d015      	beq.n	8014428 <_vfiprintf_r+0x120>
 80143fc:	9a07      	ldr	r2, [sp, #28]
 80143fe:	4654      	mov	r4, sl
 8014400:	2000      	movs	r0, #0
 8014402:	f04f 0c0a 	mov.w	ip, #10
 8014406:	4621      	mov	r1, r4
 8014408:	f811 3b01 	ldrb.w	r3, [r1], #1
 801440c:	3b30      	subs	r3, #48	; 0x30
 801440e:	2b09      	cmp	r3, #9
 8014410:	d94d      	bls.n	80144ae <_vfiprintf_r+0x1a6>
 8014412:	b1b0      	cbz	r0, 8014442 <_vfiprintf_r+0x13a>
 8014414:	9207      	str	r2, [sp, #28]
 8014416:	e014      	b.n	8014442 <_vfiprintf_r+0x13a>
 8014418:	eba0 0308 	sub.w	r3, r0, r8
 801441c:	fa09 f303 	lsl.w	r3, r9, r3
 8014420:	4313      	orrs	r3, r2
 8014422:	9304      	str	r3, [sp, #16]
 8014424:	46a2      	mov	sl, r4
 8014426:	e7d2      	b.n	80143ce <_vfiprintf_r+0xc6>
 8014428:	9b03      	ldr	r3, [sp, #12]
 801442a:	1d19      	adds	r1, r3, #4
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	9103      	str	r1, [sp, #12]
 8014430:	2b00      	cmp	r3, #0
 8014432:	bfbb      	ittet	lt
 8014434:	425b      	neglt	r3, r3
 8014436:	f042 0202 	orrlt.w	r2, r2, #2
 801443a:	9307      	strge	r3, [sp, #28]
 801443c:	9307      	strlt	r3, [sp, #28]
 801443e:	bfb8      	it	lt
 8014440:	9204      	strlt	r2, [sp, #16]
 8014442:	7823      	ldrb	r3, [r4, #0]
 8014444:	2b2e      	cmp	r3, #46	; 0x2e
 8014446:	d10c      	bne.n	8014462 <_vfiprintf_r+0x15a>
 8014448:	7863      	ldrb	r3, [r4, #1]
 801444a:	2b2a      	cmp	r3, #42	; 0x2a
 801444c:	d134      	bne.n	80144b8 <_vfiprintf_r+0x1b0>
 801444e:	9b03      	ldr	r3, [sp, #12]
 8014450:	1d1a      	adds	r2, r3, #4
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	9203      	str	r2, [sp, #12]
 8014456:	2b00      	cmp	r3, #0
 8014458:	bfb8      	it	lt
 801445a:	f04f 33ff 	movlt.w	r3, #4294967295
 801445e:	3402      	adds	r4, #2
 8014460:	9305      	str	r3, [sp, #20]
 8014462:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014538 <_vfiprintf_r+0x230>
 8014466:	7821      	ldrb	r1, [r4, #0]
 8014468:	2203      	movs	r2, #3
 801446a:	4650      	mov	r0, sl
 801446c:	f7eb fed0 	bl	8000210 <memchr>
 8014470:	b138      	cbz	r0, 8014482 <_vfiprintf_r+0x17a>
 8014472:	9b04      	ldr	r3, [sp, #16]
 8014474:	eba0 000a 	sub.w	r0, r0, sl
 8014478:	2240      	movs	r2, #64	; 0x40
 801447a:	4082      	lsls	r2, r0
 801447c:	4313      	orrs	r3, r2
 801447e:	3401      	adds	r4, #1
 8014480:	9304      	str	r3, [sp, #16]
 8014482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014486:	4829      	ldr	r0, [pc, #164]	; (801452c <_vfiprintf_r+0x224>)
 8014488:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801448c:	2206      	movs	r2, #6
 801448e:	f7eb febf 	bl	8000210 <memchr>
 8014492:	2800      	cmp	r0, #0
 8014494:	d03f      	beq.n	8014516 <_vfiprintf_r+0x20e>
 8014496:	4b26      	ldr	r3, [pc, #152]	; (8014530 <_vfiprintf_r+0x228>)
 8014498:	bb1b      	cbnz	r3, 80144e2 <_vfiprintf_r+0x1da>
 801449a:	9b03      	ldr	r3, [sp, #12]
 801449c:	3307      	adds	r3, #7
 801449e:	f023 0307 	bic.w	r3, r3, #7
 80144a2:	3308      	adds	r3, #8
 80144a4:	9303      	str	r3, [sp, #12]
 80144a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144a8:	443b      	add	r3, r7
 80144aa:	9309      	str	r3, [sp, #36]	; 0x24
 80144ac:	e768      	b.n	8014380 <_vfiprintf_r+0x78>
 80144ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80144b2:	460c      	mov	r4, r1
 80144b4:	2001      	movs	r0, #1
 80144b6:	e7a6      	b.n	8014406 <_vfiprintf_r+0xfe>
 80144b8:	2300      	movs	r3, #0
 80144ba:	3401      	adds	r4, #1
 80144bc:	9305      	str	r3, [sp, #20]
 80144be:	4619      	mov	r1, r3
 80144c0:	f04f 0c0a 	mov.w	ip, #10
 80144c4:	4620      	mov	r0, r4
 80144c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144ca:	3a30      	subs	r2, #48	; 0x30
 80144cc:	2a09      	cmp	r2, #9
 80144ce:	d903      	bls.n	80144d8 <_vfiprintf_r+0x1d0>
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d0c6      	beq.n	8014462 <_vfiprintf_r+0x15a>
 80144d4:	9105      	str	r1, [sp, #20]
 80144d6:	e7c4      	b.n	8014462 <_vfiprintf_r+0x15a>
 80144d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80144dc:	4604      	mov	r4, r0
 80144de:	2301      	movs	r3, #1
 80144e0:	e7f0      	b.n	80144c4 <_vfiprintf_r+0x1bc>
 80144e2:	ab03      	add	r3, sp, #12
 80144e4:	9300      	str	r3, [sp, #0]
 80144e6:	462a      	mov	r2, r5
 80144e8:	4b12      	ldr	r3, [pc, #72]	; (8014534 <_vfiprintf_r+0x22c>)
 80144ea:	a904      	add	r1, sp, #16
 80144ec:	4630      	mov	r0, r6
 80144ee:	f7fd fb9d 	bl	8011c2c <_printf_float>
 80144f2:	4607      	mov	r7, r0
 80144f4:	1c78      	adds	r0, r7, #1
 80144f6:	d1d6      	bne.n	80144a6 <_vfiprintf_r+0x19e>
 80144f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144fa:	07d9      	lsls	r1, r3, #31
 80144fc:	d405      	bmi.n	801450a <_vfiprintf_r+0x202>
 80144fe:	89ab      	ldrh	r3, [r5, #12]
 8014500:	059a      	lsls	r2, r3, #22
 8014502:	d402      	bmi.n	801450a <_vfiprintf_r+0x202>
 8014504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014506:	f7fe f8fb 	bl	8012700 <__retarget_lock_release_recursive>
 801450a:	89ab      	ldrh	r3, [r5, #12]
 801450c:	065b      	lsls	r3, r3, #25
 801450e:	f53f af1d 	bmi.w	801434c <_vfiprintf_r+0x44>
 8014512:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014514:	e71c      	b.n	8014350 <_vfiprintf_r+0x48>
 8014516:	ab03      	add	r3, sp, #12
 8014518:	9300      	str	r3, [sp, #0]
 801451a:	462a      	mov	r2, r5
 801451c:	4b05      	ldr	r3, [pc, #20]	; (8014534 <_vfiprintf_r+0x22c>)
 801451e:	a904      	add	r1, sp, #16
 8014520:	4630      	mov	r0, r6
 8014522:	f7fd fe27 	bl	8012174 <_printf_i>
 8014526:	e7e4      	b.n	80144f2 <_vfiprintf_r+0x1ea>
 8014528:	080d6c74 	.word	0x080d6c74
 801452c:	080d6c7e 	.word	0x080d6c7e
 8014530:	08011c2d 	.word	0x08011c2d
 8014534:	080142e5 	.word	0x080142e5
 8014538:	080d6c7a 	.word	0x080d6c7a

0801453c <__swbuf_r>:
 801453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801453e:	460e      	mov	r6, r1
 8014540:	4614      	mov	r4, r2
 8014542:	4605      	mov	r5, r0
 8014544:	b118      	cbz	r0, 801454e <__swbuf_r+0x12>
 8014546:	6a03      	ldr	r3, [r0, #32]
 8014548:	b90b      	cbnz	r3, 801454e <__swbuf_r+0x12>
 801454a:	f7fd ffc1 	bl	80124d0 <__sinit>
 801454e:	69a3      	ldr	r3, [r4, #24]
 8014550:	60a3      	str	r3, [r4, #8]
 8014552:	89a3      	ldrh	r3, [r4, #12]
 8014554:	071a      	lsls	r2, r3, #28
 8014556:	d525      	bpl.n	80145a4 <__swbuf_r+0x68>
 8014558:	6923      	ldr	r3, [r4, #16]
 801455a:	b31b      	cbz	r3, 80145a4 <__swbuf_r+0x68>
 801455c:	6823      	ldr	r3, [r4, #0]
 801455e:	6922      	ldr	r2, [r4, #16]
 8014560:	1a98      	subs	r0, r3, r2
 8014562:	6963      	ldr	r3, [r4, #20]
 8014564:	b2f6      	uxtb	r6, r6
 8014566:	4283      	cmp	r3, r0
 8014568:	4637      	mov	r7, r6
 801456a:	dc04      	bgt.n	8014576 <__swbuf_r+0x3a>
 801456c:	4621      	mov	r1, r4
 801456e:	4628      	mov	r0, r5
 8014570:	f7ff fd9e 	bl	80140b0 <_fflush_r>
 8014574:	b9e0      	cbnz	r0, 80145b0 <__swbuf_r+0x74>
 8014576:	68a3      	ldr	r3, [r4, #8]
 8014578:	3b01      	subs	r3, #1
 801457a:	60a3      	str	r3, [r4, #8]
 801457c:	6823      	ldr	r3, [r4, #0]
 801457e:	1c5a      	adds	r2, r3, #1
 8014580:	6022      	str	r2, [r4, #0]
 8014582:	701e      	strb	r6, [r3, #0]
 8014584:	6962      	ldr	r2, [r4, #20]
 8014586:	1c43      	adds	r3, r0, #1
 8014588:	429a      	cmp	r2, r3
 801458a:	d004      	beq.n	8014596 <__swbuf_r+0x5a>
 801458c:	89a3      	ldrh	r3, [r4, #12]
 801458e:	07db      	lsls	r3, r3, #31
 8014590:	d506      	bpl.n	80145a0 <__swbuf_r+0x64>
 8014592:	2e0a      	cmp	r6, #10
 8014594:	d104      	bne.n	80145a0 <__swbuf_r+0x64>
 8014596:	4621      	mov	r1, r4
 8014598:	4628      	mov	r0, r5
 801459a:	f7ff fd89 	bl	80140b0 <_fflush_r>
 801459e:	b938      	cbnz	r0, 80145b0 <__swbuf_r+0x74>
 80145a0:	4638      	mov	r0, r7
 80145a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145a4:	4621      	mov	r1, r4
 80145a6:	4628      	mov	r0, r5
 80145a8:	f000 f806 	bl	80145b8 <__swsetup_r>
 80145ac:	2800      	cmp	r0, #0
 80145ae:	d0d5      	beq.n	801455c <__swbuf_r+0x20>
 80145b0:	f04f 37ff 	mov.w	r7, #4294967295
 80145b4:	e7f4      	b.n	80145a0 <__swbuf_r+0x64>
	...

080145b8 <__swsetup_r>:
 80145b8:	b538      	push	{r3, r4, r5, lr}
 80145ba:	4b2a      	ldr	r3, [pc, #168]	; (8014664 <__swsetup_r+0xac>)
 80145bc:	4605      	mov	r5, r0
 80145be:	6818      	ldr	r0, [r3, #0]
 80145c0:	460c      	mov	r4, r1
 80145c2:	b118      	cbz	r0, 80145cc <__swsetup_r+0x14>
 80145c4:	6a03      	ldr	r3, [r0, #32]
 80145c6:	b90b      	cbnz	r3, 80145cc <__swsetup_r+0x14>
 80145c8:	f7fd ff82 	bl	80124d0 <__sinit>
 80145cc:	89a3      	ldrh	r3, [r4, #12]
 80145ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80145d2:	0718      	lsls	r0, r3, #28
 80145d4:	d422      	bmi.n	801461c <__swsetup_r+0x64>
 80145d6:	06d9      	lsls	r1, r3, #27
 80145d8:	d407      	bmi.n	80145ea <__swsetup_r+0x32>
 80145da:	2309      	movs	r3, #9
 80145dc:	602b      	str	r3, [r5, #0]
 80145de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80145e2:	81a3      	strh	r3, [r4, #12]
 80145e4:	f04f 30ff 	mov.w	r0, #4294967295
 80145e8:	e034      	b.n	8014654 <__swsetup_r+0x9c>
 80145ea:	0758      	lsls	r0, r3, #29
 80145ec:	d512      	bpl.n	8014614 <__swsetup_r+0x5c>
 80145ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145f0:	b141      	cbz	r1, 8014604 <__swsetup_r+0x4c>
 80145f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80145f6:	4299      	cmp	r1, r3
 80145f8:	d002      	beq.n	8014600 <__swsetup_r+0x48>
 80145fa:	4628      	mov	r0, r5
 80145fc:	f7fe fefe 	bl	80133fc <_free_r>
 8014600:	2300      	movs	r3, #0
 8014602:	6363      	str	r3, [r4, #52]	; 0x34
 8014604:	89a3      	ldrh	r3, [r4, #12]
 8014606:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801460a:	81a3      	strh	r3, [r4, #12]
 801460c:	2300      	movs	r3, #0
 801460e:	6063      	str	r3, [r4, #4]
 8014610:	6923      	ldr	r3, [r4, #16]
 8014612:	6023      	str	r3, [r4, #0]
 8014614:	89a3      	ldrh	r3, [r4, #12]
 8014616:	f043 0308 	orr.w	r3, r3, #8
 801461a:	81a3      	strh	r3, [r4, #12]
 801461c:	6923      	ldr	r3, [r4, #16]
 801461e:	b94b      	cbnz	r3, 8014634 <__swsetup_r+0x7c>
 8014620:	89a3      	ldrh	r3, [r4, #12]
 8014622:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801462a:	d003      	beq.n	8014634 <__swsetup_r+0x7c>
 801462c:	4621      	mov	r1, r4
 801462e:	4628      	mov	r0, r5
 8014630:	f000 f884 	bl	801473c <__smakebuf_r>
 8014634:	89a0      	ldrh	r0, [r4, #12]
 8014636:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801463a:	f010 0301 	ands.w	r3, r0, #1
 801463e:	d00a      	beq.n	8014656 <__swsetup_r+0x9e>
 8014640:	2300      	movs	r3, #0
 8014642:	60a3      	str	r3, [r4, #8]
 8014644:	6963      	ldr	r3, [r4, #20]
 8014646:	425b      	negs	r3, r3
 8014648:	61a3      	str	r3, [r4, #24]
 801464a:	6923      	ldr	r3, [r4, #16]
 801464c:	b943      	cbnz	r3, 8014660 <__swsetup_r+0xa8>
 801464e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014652:	d1c4      	bne.n	80145de <__swsetup_r+0x26>
 8014654:	bd38      	pop	{r3, r4, r5, pc}
 8014656:	0781      	lsls	r1, r0, #30
 8014658:	bf58      	it	pl
 801465a:	6963      	ldrpl	r3, [r4, #20]
 801465c:	60a3      	str	r3, [r4, #8]
 801465e:	e7f4      	b.n	801464a <__swsetup_r+0x92>
 8014660:	2000      	movs	r0, #0
 8014662:	e7f7      	b.n	8014654 <__swsetup_r+0x9c>
 8014664:	20000128 	.word	0x20000128

08014668 <_raise_r>:
 8014668:	291f      	cmp	r1, #31
 801466a:	b538      	push	{r3, r4, r5, lr}
 801466c:	4604      	mov	r4, r0
 801466e:	460d      	mov	r5, r1
 8014670:	d904      	bls.n	801467c <_raise_r+0x14>
 8014672:	2316      	movs	r3, #22
 8014674:	6003      	str	r3, [r0, #0]
 8014676:	f04f 30ff 	mov.w	r0, #4294967295
 801467a:	bd38      	pop	{r3, r4, r5, pc}
 801467c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801467e:	b112      	cbz	r2, 8014686 <_raise_r+0x1e>
 8014680:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014684:	b94b      	cbnz	r3, 801469a <_raise_r+0x32>
 8014686:	4620      	mov	r0, r4
 8014688:	f000 f830 	bl	80146ec <_getpid_r>
 801468c:	462a      	mov	r2, r5
 801468e:	4601      	mov	r1, r0
 8014690:	4620      	mov	r0, r4
 8014692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014696:	f000 b817 	b.w	80146c8 <_kill_r>
 801469a:	2b01      	cmp	r3, #1
 801469c:	d00a      	beq.n	80146b4 <_raise_r+0x4c>
 801469e:	1c59      	adds	r1, r3, #1
 80146a0:	d103      	bne.n	80146aa <_raise_r+0x42>
 80146a2:	2316      	movs	r3, #22
 80146a4:	6003      	str	r3, [r0, #0]
 80146a6:	2001      	movs	r0, #1
 80146a8:	e7e7      	b.n	801467a <_raise_r+0x12>
 80146aa:	2400      	movs	r4, #0
 80146ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80146b0:	4628      	mov	r0, r5
 80146b2:	4798      	blx	r3
 80146b4:	2000      	movs	r0, #0
 80146b6:	e7e0      	b.n	801467a <_raise_r+0x12>

080146b8 <raise>:
 80146b8:	4b02      	ldr	r3, [pc, #8]	; (80146c4 <raise+0xc>)
 80146ba:	4601      	mov	r1, r0
 80146bc:	6818      	ldr	r0, [r3, #0]
 80146be:	f7ff bfd3 	b.w	8014668 <_raise_r>
 80146c2:	bf00      	nop
 80146c4:	20000128 	.word	0x20000128

080146c8 <_kill_r>:
 80146c8:	b538      	push	{r3, r4, r5, lr}
 80146ca:	4d07      	ldr	r5, [pc, #28]	; (80146e8 <_kill_r+0x20>)
 80146cc:	2300      	movs	r3, #0
 80146ce:	4604      	mov	r4, r0
 80146d0:	4608      	mov	r0, r1
 80146d2:	4611      	mov	r1, r2
 80146d4:	602b      	str	r3, [r5, #0]
 80146d6:	f7ef fa95 	bl	8003c04 <_kill>
 80146da:	1c43      	adds	r3, r0, #1
 80146dc:	d102      	bne.n	80146e4 <_kill_r+0x1c>
 80146de:	682b      	ldr	r3, [r5, #0]
 80146e0:	b103      	cbz	r3, 80146e4 <_kill_r+0x1c>
 80146e2:	6023      	str	r3, [r4, #0]
 80146e4:	bd38      	pop	{r3, r4, r5, pc}
 80146e6:	bf00      	nop
 80146e8:	20038260 	.word	0x20038260

080146ec <_getpid_r>:
 80146ec:	f7ef ba82 	b.w	8003bf4 <_getpid>

080146f0 <__swhatbuf_r>:
 80146f0:	b570      	push	{r4, r5, r6, lr}
 80146f2:	460c      	mov	r4, r1
 80146f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146f8:	2900      	cmp	r1, #0
 80146fa:	b096      	sub	sp, #88	; 0x58
 80146fc:	4615      	mov	r5, r2
 80146fe:	461e      	mov	r6, r3
 8014700:	da0d      	bge.n	801471e <__swhatbuf_r+0x2e>
 8014702:	89a3      	ldrh	r3, [r4, #12]
 8014704:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014708:	f04f 0100 	mov.w	r1, #0
 801470c:	bf0c      	ite	eq
 801470e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014712:	2340      	movne	r3, #64	; 0x40
 8014714:	2000      	movs	r0, #0
 8014716:	6031      	str	r1, [r6, #0]
 8014718:	602b      	str	r3, [r5, #0]
 801471a:	b016      	add	sp, #88	; 0x58
 801471c:	bd70      	pop	{r4, r5, r6, pc}
 801471e:	466a      	mov	r2, sp
 8014720:	f000 f848 	bl	80147b4 <_fstat_r>
 8014724:	2800      	cmp	r0, #0
 8014726:	dbec      	blt.n	8014702 <__swhatbuf_r+0x12>
 8014728:	9901      	ldr	r1, [sp, #4]
 801472a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801472e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014732:	4259      	negs	r1, r3
 8014734:	4159      	adcs	r1, r3
 8014736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801473a:	e7eb      	b.n	8014714 <__swhatbuf_r+0x24>

0801473c <__smakebuf_r>:
 801473c:	898b      	ldrh	r3, [r1, #12]
 801473e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014740:	079d      	lsls	r5, r3, #30
 8014742:	4606      	mov	r6, r0
 8014744:	460c      	mov	r4, r1
 8014746:	d507      	bpl.n	8014758 <__smakebuf_r+0x1c>
 8014748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801474c:	6023      	str	r3, [r4, #0]
 801474e:	6123      	str	r3, [r4, #16]
 8014750:	2301      	movs	r3, #1
 8014752:	6163      	str	r3, [r4, #20]
 8014754:	b002      	add	sp, #8
 8014756:	bd70      	pop	{r4, r5, r6, pc}
 8014758:	ab01      	add	r3, sp, #4
 801475a:	466a      	mov	r2, sp
 801475c:	f7ff ffc8 	bl	80146f0 <__swhatbuf_r>
 8014760:	9900      	ldr	r1, [sp, #0]
 8014762:	4605      	mov	r5, r0
 8014764:	4630      	mov	r0, r6
 8014766:	f7fe febd 	bl	80134e4 <_malloc_r>
 801476a:	b948      	cbnz	r0, 8014780 <__smakebuf_r+0x44>
 801476c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014770:	059a      	lsls	r2, r3, #22
 8014772:	d4ef      	bmi.n	8014754 <__smakebuf_r+0x18>
 8014774:	f023 0303 	bic.w	r3, r3, #3
 8014778:	f043 0302 	orr.w	r3, r3, #2
 801477c:	81a3      	strh	r3, [r4, #12]
 801477e:	e7e3      	b.n	8014748 <__smakebuf_r+0xc>
 8014780:	89a3      	ldrh	r3, [r4, #12]
 8014782:	6020      	str	r0, [r4, #0]
 8014784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014788:	81a3      	strh	r3, [r4, #12]
 801478a:	9b00      	ldr	r3, [sp, #0]
 801478c:	6163      	str	r3, [r4, #20]
 801478e:	9b01      	ldr	r3, [sp, #4]
 8014790:	6120      	str	r0, [r4, #16]
 8014792:	b15b      	cbz	r3, 80147ac <__smakebuf_r+0x70>
 8014794:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014798:	4630      	mov	r0, r6
 801479a:	f000 f81d 	bl	80147d8 <_isatty_r>
 801479e:	b128      	cbz	r0, 80147ac <__smakebuf_r+0x70>
 80147a0:	89a3      	ldrh	r3, [r4, #12]
 80147a2:	f023 0303 	bic.w	r3, r3, #3
 80147a6:	f043 0301 	orr.w	r3, r3, #1
 80147aa:	81a3      	strh	r3, [r4, #12]
 80147ac:	89a3      	ldrh	r3, [r4, #12]
 80147ae:	431d      	orrs	r5, r3
 80147b0:	81a5      	strh	r5, [r4, #12]
 80147b2:	e7cf      	b.n	8014754 <__smakebuf_r+0x18>

080147b4 <_fstat_r>:
 80147b4:	b538      	push	{r3, r4, r5, lr}
 80147b6:	4d07      	ldr	r5, [pc, #28]	; (80147d4 <_fstat_r+0x20>)
 80147b8:	2300      	movs	r3, #0
 80147ba:	4604      	mov	r4, r0
 80147bc:	4608      	mov	r0, r1
 80147be:	4611      	mov	r1, r2
 80147c0:	602b      	str	r3, [r5, #0]
 80147c2:	f7ef fa7e 	bl	8003cc2 <_fstat>
 80147c6:	1c43      	adds	r3, r0, #1
 80147c8:	d102      	bne.n	80147d0 <_fstat_r+0x1c>
 80147ca:	682b      	ldr	r3, [r5, #0]
 80147cc:	b103      	cbz	r3, 80147d0 <_fstat_r+0x1c>
 80147ce:	6023      	str	r3, [r4, #0]
 80147d0:	bd38      	pop	{r3, r4, r5, pc}
 80147d2:	bf00      	nop
 80147d4:	20038260 	.word	0x20038260

080147d8 <_isatty_r>:
 80147d8:	b538      	push	{r3, r4, r5, lr}
 80147da:	4d06      	ldr	r5, [pc, #24]	; (80147f4 <_isatty_r+0x1c>)
 80147dc:	2300      	movs	r3, #0
 80147de:	4604      	mov	r4, r0
 80147e0:	4608      	mov	r0, r1
 80147e2:	602b      	str	r3, [r5, #0]
 80147e4:	f7ef fa7d 	bl	8003ce2 <_isatty>
 80147e8:	1c43      	adds	r3, r0, #1
 80147ea:	d102      	bne.n	80147f2 <_isatty_r+0x1a>
 80147ec:	682b      	ldr	r3, [r5, #0]
 80147ee:	b103      	cbz	r3, 80147f2 <_isatty_r+0x1a>
 80147f0:	6023      	str	r3, [r4, #0]
 80147f2:	bd38      	pop	{r3, r4, r5, pc}
 80147f4:	20038260 	.word	0x20038260

080147f8 <_init>:
 80147f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147fa:	bf00      	nop
 80147fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147fe:	bc08      	pop	{r3}
 8014800:	469e      	mov	lr, r3
 8014802:	4770      	bx	lr

08014804 <_fini>:
 8014804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014806:	bf00      	nop
 8014808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801480a:	bc08      	pop	{r3}
 801480c:	469e      	mov	lr, r3
 801480e:	4770      	bx	lr
